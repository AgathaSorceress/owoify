var N=null,E="",T="t",U="u",searchIndex={};
var R=["cfg_if","lazy_static","string","option","propertyvalues","new128","split128","ppv_lite86","extract","insert","Generate only the basic implementations necessary to be…","ppv_lite86::x86_64","try_from","try_into","borrow_mut","result","type_id","borrow","typeid","instance","vec128_storage","vec256_storage","vec512_storage","default","RotateEachWord32","RotateEachWord64","UnsafeFrom","LaneWords4","MultiLane","StoreBytes","SseMachine","Avx2Machine","to_owned","clone_into","utf8sequence","utf8range","formatter","Utf8Range","Utf8Sequence","Utf8Sequences","getrandom","nonzerou32","Returns the element for the current thread, or creates it…","Returns the element for the current thread, if it exists.","get_or_try","iter_mut","Returns a mutable iterator over the local values of all…","Removes all thread-specific values from the `ThreadLocal`,…","get_default","Returns the element for the current thread, or creates a…","into_iter","size_hint","threadlocal","cachedthreadlocal","ThreadLocal","CachedThreadLocal","IntoIter","An iterator over all occurrences of the needles in a…","An iterator over all occurrences of the needle in a…","memchr2","memchr3","memchr","Creates a new iterator that yields all positions of needle…","next_back","Machine","u32x4x2","u64x2x2","u32x4x4","u64x2x4","unpack","read_le","read_be","A wrapper type implementing [`RngCore`] for some type…","The core part of the RNG, implementing the `generate`…","Create a new `BlockRng` from an existing RNG implementing…","Get the index into the result buffer.","Reset the number of available results. This will force a…","generate_and_set","Generate a new set of results immediately, setting the…","rand_core","Implement `fill_bytes` by reading chunks from the output…","to_string","rand_core::block","next_u32","next_u64","fill_bytes","try_fill_bytes","from_seed","seed_from_u64","from_rng","rngcore","blockrng","blockrng64","BlockRng","BlockRng64","BlockRngCore","SeedableRng","aho_corasick","aho_corasick::ErrorKind","ahocorasick","Build an Aho-Corasick automaton using the configuration…","ahocorasickbuilder","match_kind","matchkind","errorkind","MatchKind","ErrorKind","AhoCorasick","AhoCorasickBuilder","FindOverlappingIter","StreamFindIter","A cryptographically secure random number generator that…","get_word_pos","Get the offset from the start of the stream, in 32-bit…","set_word_pos","Set the offset from the start of the stream, in 32-bit…","set_stream","Set the stream number.","ChaCha with 20 rounds","chacha20core","chacha12core","chacha8core","generate","ChaCha20Rng","ChaCha12Rng","ChaCha8Rng","ChaCha12Core","ChaCha20Core","ChaCha8Core","The span of this class.","regex_syntax::ast","regex_syntax::ast::ErrorKind","original","Assertion","A single zero-width assertion.","Repetition","A grouped regular expression.","Alternation","An alternation of regular expressions.","A concatenation of regular expressions.","A Unicode character class, e.g., `\\pL` or `\\p{Greek}`.","A perl character class, e.g., `\\d` or `\\W`.","Bracketed","A bracketed character class set, which may contain zero or…","CaptureName","ParserBuilder","A builder for a regular expression parser.","parserbuilder","withcomments","classsetitem","classsetbinaryop","position","is_empty","classasciikind","regex_syntax","ClassUnicode","WordBoundary","A set of characters represented by Unicode scalar values.","StartLine","StartText","Unicode","GroupKind","CaptureIndex","NonCapturing","regex_syntax::hir","RepetitionKind","The kind of a repetition operator.","ZeroOrOne","ZeroOrMore","OneOrMore","RepetitionRange","Executes an implementation of `Visitor` in constant stack…","Literal","literals","Create a new printer.","Print the given `Ast` to the given writer. The writer must…","translatorbuilder","translator","translate","All implementors of `Visitor` must provide a `finish`…","visit_pre","visit_post","visit_alternation_in","Return the type of this error.","The original pattern string in which this error occurred.","Return the span at which this error occurred.","literal","repetition","Return true if and only if this HIR is required to match…","Return true if and only if this HIR contains any…","is_always_utf8","classunicode","case_fold_simple","classunicoderange","Create a new class from a sequence of ranges.","classbytes","Create a new class with no ranges.","Add a new range to this set.","Return an iterator over all ranges in this class.","Return the underlying ranges as a slice.","Expand this character class such that it contains all case…","intersect","difference","symmetric_difference","classbytesrange","Return the start of this range.","Return the end of this range.","is_negated","is_match_empty","Create a new parser builder with a default configuration.","Build a parser from this configuration with the given…","nest_limit","Set the nesting limit for this parser.","Whether to support octal syntax or not.","allow_invalid_utf8","ignore_whitespace","Enable verbose mode in the regular expression.","case_insensitive","multi_line","dot_matches_new_line","swap_greed","Enable or disable the Unicode flag (`u`) by default.","Create a new parser with a default configuration.","regex_syntax::ast::parse","regex_syntax::ast::print","regex_syntax::hir::literal","regex_syntax::hir::print","regex_syntax::hir::translate","alternation","literalkind","classperl","classascii","classunicodekind","classbracketed","classset","classsetrange","classsetunion","assertion","repetitionop","repetitionkind","repetitionrange","groupkind","capturename","flagsitem","flagsitemkind","wordboundary","specialliteralkind","hexliteralkind","classperlkind","classunicodeopkind","classsetbinaryopkind","assertionkind","setflags","ordering","partial_cmp","description","This method is called before beginning traversal of the AST.","This method is called on an `Ast` before descending into…","This method is called on an `Ast` after descending all of…","This method is called between child nodes of an…","visit_class_set_item_pre","This method is called on every `ClassSetItem` before…","visit_class_set_item_post","This method is called on every `ClassSetItem` after…","visit_class_set_binary_op_pre","This method is called on every `ClassSetBinaryOp` before…","visit_class_set_binary_op_post","This method is called on every `ClassSetBinaryOp` after…","visit_class_set_binary_op_in","This method is called between the left hand and right hand…","This method is called before beginning traversal of the HIR.","This method is called on an `Hir` before descending into…","This method is called on an `Hir` after descending all of…","This method is called between child nodes of an alternation.","WithComments","ClassPerl","ClassAscii","ClassBracketed","ClassSetRange","ClassSetUnion","ClassSetBinaryOp","RepetitionOp","FlagsItem","LiteralKind","SpecialLiteralKind","HexLiteralKind","ClassPerlKind","ClassAsciiKind","ClassUnicodeKind","ClassUnicodeOpKind","ClassSetItem","ClassSetBinaryOpKind","AssertionKind","FlagsItemKind","TranslatorBuilder","Translator","ClassUnicodeRange","ClassBytes","ClassBytesRange","ClassUnicodeIter","ClassBytesIter","A distribution to sample floating point numbers uniformly…","Sample values uniformly between two bounds.","new_inclusive","Create a new `Uniform` instance which samples uniformly…","rand::distributions","bernoulli","bernoullierror","WeightedIndex","A distribution using weighted sampling to pick a…","weightederror","rand::distributions::weighted","weightedindex","dirichlet","rand::rngs","rand::seq","choose_multiple","sample_iter","Fill `dest` entirely with random bytes (uniform value…","rand::distributions::uniform","rand::distributions::weighted::alias_method","rand::rngs::adapter","rand::rngs::mock","rand::seq::index","sample_single","uniform","unitspheresurface","unitcircle","chisquared","lognormal","triangular","threadrng","indexvec","indexvecintoiter","BernoulliError","SampleUniform","UniformSampler","SampleBorrow","Bernoulli","WeightedError","UnitSphereSurface","UnitCircle","ChiSquared","LogNormal","Dirichlet","Triangular","Distribution","ReseedingRng","EntropyRng","SliceRandom","IteratorRandom","AsByteSliceMut","Alphanumeric","OpenClosed01","StandardNormal","Standard","UniformInt","UniformFloat","UniformDuration","ThreadRng","ReadError","SliceChooseIter","IndexVecIter","IndexVecIntoIter","Error type of random number generators","Construct from any type supporting `std::error::Error`","Reference the inner error (`std` only)","take_inner","Unwrap the inner error (`std` only)","Retrieve the error code, if any.","The core of a random number generator.","Return the next random `u32`.","Return the next random `u64`.","Fill `dest` with random data.","Fill `dest` entirely with random data.","CryptoRng","A marker trait used to indicate that an [`RngCore`] or…","A random number generator that can be explicitly seeded.","Seed type, which is restricted to types…","Create a new PRNG using the given seed.","Create a new PRNG using a `u64` seed.","Create a new PRNG seeded from another `Rng`.","from_entropy","Creates a new instance of the RNG seeded via [`getrandom`].","RegexBuilder","A configurable builder for a regular expression.","RegexSetBuilder","A configurable builder for a set of regular expressions.","Match represents a single match of a regex in a haystack.","An iterator over all non-overlapping matches for a…","CaptureMatches","An iterator that yields all non-overlapping capture groups…","Yields all substrings delimited by a regular expression…","Yields at most `N` substrings delimited by a regular…","CaptureNames","An iterator over the names of all possible captures.","CaptureLocations","CaptureLocations is a low level representation of the raw…","SubCaptureMatches","An iterator that yields all capturing matches in the order…","ReplacerRef","By-reference adaptor for a `Replacer`","Match multiple (possibly overlapping) regular expressions…","SetMatches","A set of matches returned by a regex set.","SetMatchesIntoIter","An owned iterator over the set of matches from a regex set.","SetMatchesIter","A borrowed iterator over the set of matches from a regex…","regexbuilder","Create a new regular expression builder with the given…","Consume the builder and compile the regular expression.","Set the value for the case insensitive (`i`) flag.","Set the value for the multi-line matching (`m`) flag.","Set the value for the any character (`s`) flag, where in…","Set the value for the greedy swap (`U`) flag.","Set the value for the ignore whitespace (`x`) flag.","Set the value for the Unicode (`u`) flag.","size_limit","Set the approximate size limit of the compiled regular…","dfa_size_limit","Set the approximate size of the cache used by the DFA.","regex::bytes","regexsetbuilder","Consume the builder and compile the regular expressions…","regexset","no_expansion","Return a fixed unchanging replacement byte string.","Return a `Replacer` that borrows and wraps this `Replacer`.","replacerref","find_iter","captures","replace_all","replacer","capturelocations","is_match","Create a new regex set with the given regular expressions.","Returns true if and only if one of the regexes in this set…","Returns the set of regular expressions that match in the…","setmatches","Returns the total number of regular expressions in this set.","Returns the patterns that this set will match on.","matched_any","Whether this set contains any matches.","Whether the regex at the given index matched.","The total number of regexes in the set that created these…","Returns an iterator over indexes in the regex that matched.","setmatchesiter","Returns the starting byte offset of the match in the…","Returns the ending byte offset of the match in the haystack.","Returns the matched text.","Compiles a regular expression. Once compiled, it can be…","Returns true if and only if the regex matches the string…","Returns the start and end byte range of the leftmost-first…","Returns an iterator for each successive non-overlapping…","Returns the capture groups corresponding to the…","captures_iter","Returns an iterator over all the non-overlapping capture…","capturematches","Returns an iterator of substrings of `text` delimited by a…","Returns an iterator of at most `limit` substrings of…","Replaces the leftmost-first match with the replacement…","Replaces all non-overlapping matches in `text` with the…","Replaces at most `limit` non-overlapping matches in `text`…","shortest_match","Returns the end location of a match in the text given.","shortest_match_at","Returns the same as shortest_match, but starts the search…","is_match_at","Returns the same as is_match, but starts the search at the…","Returns the same as find, but starts the search at the…","captures_read","This is like `captures`, but uses `CaptureLocations`…","captures_read_at","Returns the original string of this regex.","capture_names","Returns an iterator over the capture names.","capturenames","captures_len","Returns the number of captures.","capture_locations","Returns an empty set of capture locations that can be…","Returns the start and end positions of the Nth capture…","Returns the total number of capturing groups.","Returns the match associated with the capture group at…","Returns the match for the capture group named `name`. If…","subcapturematches","Expands all instances of `$name` in `replacement` to the…","Returns the number of captured groups.","Replacer describes types that can be used to replace…","replace_append","Appends text to `dst` to replace the current match.","Shows the original regular expression.","Attempts to parse a string into a regular expression","Return a fixed unchanging replacement string.","NoExpand","Replacer","Captures","RegexSet","Escapes all regular expression meta characters in `text`.","unicode","matches","OwOifiable"];
searchIndex["aho_corasick"]={"doc":"A library for finding occurrences of many patterns at…","i":[[3,R[107],R[97],"An automaton for searching multiple strings in linear time.",N,N],[3,R[108],E,"A builder for configuring an Aho-Corasick automaton.",N,N],[3,"FindIter",E,"An iterator of non-overlapping matches in a particular…",N,N],[3,R[109],E,"An iterator of overlapping matches in a particular haystack.",N,N],[3,R[110],E,"An iterator that reports Aho-Corasick matches in a stream.",N,N],[3,"Error",E,"An error that occurred during the construction of an…",N,N],[3,"Match",E,"A representation of a match reported by an Aho-Corasick…",N,N],[4,R[105],E,"A knob for controlling the match semantics of an…",N,N],[13,R[355],E,"Use standard match semantics, which support overlapping…",0,N],[13,"LeftmostFirst",E,"Use leftmost-first match semantics, which reports leftmost…",0,N],[13,"LeftmostLongest",E,"Use leftmost-longest match semantics, which reports…",0,N],[4,R[106],E,"The kind of error that occurred.",N,N],[13,"StateIDOverflow",E,"An error that occurs when constructing an automaton would…",1,N],[12,"max",R[98],"The maximum possible state ID.",1,N],[13,"PremultiplyOverflow",R[97],"An error that occurs when premultiplication of state IDs…",1,N],[12,"max",R[98],"The maximum possible state id.",1,N],[12,"requested_max",E,"The maximum ID required by premultiplication.",1,N],[11,"new",R[97],"Create a new Aho-Corasick automaton using the default…",2,[[["i"]],[R[99]]]],[11,"new_auto_configured",E,"Build an Aho-Corasick automaton with an automatically…",2,[[],[R[99]]]],[11,R[435],E,"Returns true if and only if this automaton matches the…",2,[[["self"],["asref"]],["bool"]]],[11,"earliest_find",E,"Returns the location of the first detected match in…",2,[[["self"],["asref"]],[[R[3],["match"]],["match"]]]],[11,"find",E,"Returns the location of the first match according to the…",2,[[["self"],["asref"]],[[R[3],["match"]],["match"]]]],[11,R[430],E,"Returns an iterator of non-overlapping matches, using the…",2,[[["b"],["self"]],["finditer"]]],[11,"find_overlapping_iter",E,"Returns an iterator of overlapping matches in the given…",2,[[["b"],["self"]],["findoverlappingiter"]]],[11,R[432],E,"Replace all matches with a corresponding value in the…",2,[[["self"],["str"]],[R[2]]]],[11,"replace_all_bytes",E,"Replace all matches using raw bytes with a corresponding…",2,[[["self"]],[["u8"],["vec",["u8"]]]]],[11,"replace_all_with",E,"Replace all matches using a closure called on each match.…",2,[[[R[2]],["str"],["self"],["f"]]]],[11,"replace_all_with_bytes",E,"Replace all matches using raw bytes with a closure called…",2,[[["vec"],["self"],["f"]]]],[11,"stream_find_iter",E,"Returns an iterator of non-overlapping matches in the…",2,[[["read"],["self"]],[["read"],["streamfinditer"]]]],[11,"stream_replace_all",E,"Search for and replace all matches of this automaton in…",2,[[["w"],["self"],["r"]],[R[15]]]],[11,"stream_replace_all_with",E,"Search the given reader and replace all matches of this…",2,[[["w"],["self"],["f"],["r"]],[R[15]]]],[11,R[102],E,"Returns the match kind used by this automaton.",2,[[["self"]],[R[103]]]],[11,"max_pattern_len",E,"Returns the length of the longest pattern matched by this…",2,[[["self"]],["usize"]]],[11,"pattern_count",E,"Return the total number of patterns matched by this…",2,[[["self"]],["usize"]]],[11,"supports_overlapping",E,"Returns true if and only if this automaton supports…",2,[[["self"]],["bool"]]],[11,"supports_stream",E,"Returns true if and only if this automaton supports stream…",2,[[["self"]],["bool"]]],[11,"heap_bytes",E,"Returns the total amount of heap used by this automaton,…",2,[[["self"]],["usize"]]],[11,"new",E,"Create a new builder for configuring an Aho-Corasick…",3,[[],[R[101]]]],[11,"build",E,R[100],3,[[["self"],["i"]],[R[99]]]],[11,"build_with_size",E,R[100],3,[[["self"],["i"]],[[R[99]],[R[15],[R[99],"error"]],["error"]]]],[11,"auto_configure",E,"Automatically configure the settings on this builder…",3,[[["self"]],[R[101]]]],[11,R[102],E,"Set the desired match semantics.",3,[[["self"],[R[103]]],[R[101]]]],[11,"ascii_case_insensitive",E,"Enable ASCII-aware case insensitive matching.",3,[[["self"],["bool"]],[R[101]]]],[11,"dense_depth",E,"Set the limit on how many NFA states use a dense…",3,[[["self"],["usize"]],[R[101]]]],[11,"dfa",E,"Compile the standard Aho-Corasick automaton into a…",3,[[["self"],["bool"]],[R[101]]]],[11,"prefilter",E,"Enable heuristic prefilter optimizations.",3,[[["self"],["bool"]],[R[101]]]],[11,"byte_classes",E,"Shrink the size of the transition alphabet by mapping…",3,[[["self"],["bool"]],[R[101]]]],[11,"premultiply",E,"Premultiply state identifiers in the transition table.…",3,[[["self"],["bool"]],[R[101]]]],[11,"kind",E,"Return the kind of this error.",4,[[["self"]],[R[104]]]],[8,"StateID",E,"A trait describing the representation of an automaton's…",N,N],[10,"from_usize",E,"Convert from a `usize` to this implementation's…",5,[[["usize"]],["self"]]],[10,"to_usize",E,"Convert this implementation's representation to a `usize`.",5,[[],["usize"]]],[10,"max_id",E,"Return the maximum state identifier supported by this…",5,[[],["usize"]]],[11,"pattern",E,"Returns the identifier of the pattern that matched.",6,[[["self"]],["usize"]]],[11,"start",E,"The starting position of the match.",6,[[["self"]],["usize"]]],[11,"end",E,"The ending position of the match.",6,[[["self"]],["usize"]]],[11,R[152],E,"Returns true if and only if this match is empty. That is,…",6,[[["self"]],["bool"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[32],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,[[[T],["self"]]]],[11,"into",E,E,2,[[],[U]]],[11,R[12],E,E,2,[[[U]],[R[15]]]],[11,R[13],E,E,2,[[],[R[15]]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[32],E,E,3,[[["self"]],[T]]],[11,R[33],E,E,3,[[[T],["self"]]]],[11,"into",E,E,3,[[],[U]]],[11,R[12],E,E,3,[[[U]],[R[15]]]],[11,R[13],E,E,3,[[],[R[15]]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"]],[R[18]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[50],E,E,7,[[],["i"]]],[11,"into",E,E,7,[[],[U]]],[11,R[12],E,E,7,[[[U]],[R[15]]]],[11,R[13],E,E,7,[[],[R[15]]]],[11,R[14],E,E,7,[[["self"]],[T]]],[11,R[17],E,E,7,[[["self"]],[T]]],[11,R[16],E,E,7,[[["self"]],[R[18]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[50],E,E,8,[[],["i"]]],[11,"into",E,E,8,[[],[U]]],[11,R[12],E,E,8,[[[U]],[R[15]]]],[11,R[13],E,E,8,[[],[R[15]]]],[11,R[14],E,E,8,[[["self"]],[T]]],[11,R[17],E,E,8,[[["self"]],[T]]],[11,R[16],E,E,8,[[["self"]],[R[18]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[50],E,E,9,[[],["i"]]],[11,"into",E,E,9,[[],[U]]],[11,R[12],E,E,9,[[[U]],[R[15]]]],[11,R[13],E,E,9,[[],[R[15]]]],[11,R[14],E,E,9,[[["self"]],[T]]],[11,R[17],E,E,9,[[["self"]],[T]]],[11,R[16],E,E,9,[[["self"]],[R[18]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[32],E,E,4,[[["self"]],[T]]],[11,R[33],E,E,4,[[[T],["self"]]]],[11,R[81],E,E,4,[[["self"]],[R[2]]]],[11,"into",E,E,4,[[],[U]]],[11,R[12],E,E,4,[[[U]],[R[15]]]],[11,R[13],E,E,4,[[],[R[15]]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,[[["self"]],[R[18]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[32],E,E,6,[[["self"]],[T]]],[11,R[33],E,E,6,[[[T],["self"]]]],[11,"into",E,E,6,[[],[U]]],[11,R[12],E,E,6,[[[U]],[R[15]]]],[11,R[13],E,E,6,[[],[R[15]]]],[11,R[14],E,E,6,[[["self"]],[T]]],[11,R[17],E,E,6,[[["self"]],[T]]],[11,R[16],E,E,6,[[["self"]],[R[18]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[32],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,[[[T],["self"]]]],[11,"into",E,E,0,[[],[U]]],[11,R[12],E,E,0,[[[U]],[R[15]]]],[11,R[13],E,E,0,[[],[R[15]]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[32],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[[T],["self"]]]],[11,"into",E,E,1,[[],[U]]],[11,R[12],E,E,1,[[[U]],[R[15]]]],[11,R[13],E,E,1,[[],[R[15]]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,"next",E,E,7,[[["self"]],[[R[3],["match"]],["match"]]]],[11,"next",E,E,8,[[["self"]],[[R[3],["match"]],["match"]]]],[11,"next",E,E,9,[[["self"]],[[R[3],[R[15]]],[R[15],["match"]]]]],[11,"eq",E,E,0,[[[R[103]],["self"]],["bool"]]],[11,"eq",E,E,6,[[["self"],["match"]],["bool"]]],[11,"ne",E,E,6,[[["self"],["match"]],["bool"]]],[11,"clone",E,E,2,[[["self"]],[R[99]]]],[11,"clone",E,E,3,[[["self"]],[R[101]]]],[11,"clone",E,E,0,[[["self"]],[R[103]]]],[11,"clone",E,E,4,[[["self"]],["error"]]],[11,"clone",E,E,1,[[["self"]],[R[104]]]],[11,"clone",E,E,6,[[["self"]],["match"]]],[11,R[23],E,E,3,[[],[R[101]]]],[11,R[23],E,E,0,[[],[R[103]]]],[11,"fmt",E,E,4,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,2,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,7,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,8,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,9,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,3,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,0,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,4,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,1,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,6,[[["self"],[R[36]]],[R[15]]]],[11,"hash",E,E,6,[[["self"],["__h"]]]],[11,R[255],E,E,4,[[["self"]],["str"]]]],"p":[[4,R[105]],[4,R[106]],[3,R[107]],[3,R[108]],[3,"Error"],[8,"StateID"],[3,"Match"],[3,"FindIter"],[3,R[109]],[3,R[110]]]};
searchIndex["c2_chacha"]={"doc":"Pure Rust ChaCha with SIMD optimizations.","i":[[0,"guts","c2_chacha",E,N,N],[8,R[64],"c2_chacha::guts",E,N,N],[16,"u32x4",E,E,0,N],[16,"u64x2",E,E,0,N],[16,"u128x1",E,E,0,N],[16,R[65],E,E,0,N],[16,R[66],E,E,0,N],[16,"u64x4",E,E,0,N],[16,"u128x2",E,E,0,N],[16,R[67],E,E,0,N],[16,R[68],E,E,0,N],[16,"u128x4",E,E,0,N],[11,R[69],E,E,0,[[["s"]],["v"]]],[11,"vec",E,E,0,[[["a"]],["v"]]],[11,R[70],E,E,0,[[],["v"]]],[11,R[71],E,E,0,[[],["v"]]],[10,R[19],E,E,0,[[],["self"]]],[3,"ChaCha",E,E,N,N],[3,"State",E,E,N,N],[11,"new",E,E,1,[[],["self"]]],[11,"refill4",E,"Produce 4 blocks of output, advancing the state",1,[[["self"],["u32"]]]],[11,"refill",E,"Produce a block of output, advancing the state",1,[[["self"],["u32"]]]],[11,"set_stream_param",E,E,1,[[["self"],["u32"],["u64"]]]],[11,"get_stream_param",E,E,1,[[["self"],["u32"]],["u64"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[32],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[[T],["self"]]]],[11,"into",E,E,1,[[],[U]]],[11,R[12],E,E,1,[[[U]],[R[15]]]],[11,R[13],E,E,1,[[],[R[15]]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,"vzip",E,E,1,[[],["v"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[32],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,[[[T],["self"]]]],[11,"into",E,E,2,[[],[U]]],[11,R[12],E,E,2,[[[U]],[R[15]]]],[11,R[13],E,E,2,[[],[R[15]]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,"vzip",E,E,2,[[],["v"]]],[11,"clone",E,E,1,[[["self"]],["chacha"]]],[11,"clone",E,E,2,[[["self"]],["state"]]]],"p":[[8,R[64]],[3,"ChaCha"],[3,"State"]]};
searchIndex["cfg_if"]={"doc":"A macro for defining `#[cfg]` if-else statements.","i":[[14,R[0],R[0],"The main macro provided by this crate. See crate…",N,N]],"p":[]};
searchIndex["getrandom"]={"doc":"Interface to the random number generator of the operating…","i":[[3,"Error",R[40],"A small and `no_std` compatible error type.",N,N],[5,R[40],E,"Fill `dest` with random bytes from the system's preferred…",N,[[],[[R[15],["error"]],["error"]]]],[18,"UNKNOWN",E,E,0,N],[18,"UNAVAILABLE",E,E,0,N],[18,"INTERNAL_START",E,"Codes below this point represent OS Errors (i.e. positive…",0,N],[18,"CUSTOM_START",E,"Codes at or above this point can be used by users to…",0,N],[11,"raw_os_error",E,"Extract the raw OS error code (if this error came from the…",0,[[["self"]],[[R[3],["i32"]],["i32"]]]],[11,"code",E,"Extract the bare error code.",0,[[["self"]],[R[41]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[12],E,E,0,[[[U]],[R[15]]]],[11,"into",E,E,0,[[],[U]]],[11,R[13],E,E,0,[[],[R[15]]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,R[32],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,[[[T],["self"]]]],[11,R[81],E,E,0,[[["self"]],[R[2]]]],[11,"eq",E,E,0,[[["self"],["error"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["error"]],["bool"]]],[11,"from",E,E,0,[[[R[41]]],["self"]]],[11,"from",E,E,0,[[["error"]],["self"]]],[11,"fmt",E,E,0,[[[R[36]],["self"]],[R[15]]]],[11,"fmt",E,E,0,[[[R[36]],["self"]],[R[15]]]],[11,"clone",E,E,0,[[["self"]],["error"]]]],"p":[[3,"Error"]]};
searchIndex["lazy_static"]={"doc":"A macro for declaring lazily evaluated statics.","i":[[5,"initialize",R[1],"Takes a shared reference to a lazy static and initializes…",N,[[[T]]]],[8,"LazyStatic",E,"Support trait for enabling a few common operation on lazy…",N,N],[14,R[1],E,E,N,N]],"p":[]};
searchIndex["memchr"]={"doc":"The `memchr` crate provides heavily optimized routines for…","i":[[3,"Memchr",R[61],"An iterator for `memchr`.",N,N],[3,"Memchr2",E,"An iterator for `memchr2`.",N,N],[3,"Memchr3",E,"An iterator for `memchr3`.",N,N],[5,"memchr_iter",E,R[58],N,[[["u8"]],[R[61]]]],[5,"memchr2_iter",E,R[57],N,[[["u8"]],[R[59]]]],[5,"memchr3_iter",E,R[57],N,[[["u8"]],[R[60]]]],[5,"memrchr_iter",E,R[58],N,[[["u8"]],[["rev",[R[61]]],[R[61]]]]],[5,"memrchr2_iter",E,R[57],N,[[["u8"]],[["rev",[R[59]]],[R[59]]]]],[5,"memrchr3_iter",E,R[57],N,[[["u8"]],[["rev",[R[60]]],[R[60]]]]],[5,R[61],E,"Search for the first occurrence of a byte in a slice.",N,[[["u8"]],[[R[3],["usize"]],["usize"]]]],[5,R[59],E,"Like `memchr`, but searches for two bytes instead of one.",N,[[["u8"]],[[R[3],["usize"]],["usize"]]]],[5,R[60],E,"Like `memchr`, but searches for three bytes instead of one.",N,[[["u8"]],[[R[3],["usize"]],["usize"]]]],[5,"memrchr",E,"Search for the last occurrence of a byte in a slice.",N,[[["u8"]],[[R[3],["usize"]],["usize"]]]],[5,"memrchr2",E,"Like `memrchr`, but searches for two bytes instead of one.",N,[[["u8"]],[[R[3],["usize"]],["usize"]]]],[5,"memrchr3",E,"Like `memrchr`, but searches for three bytes instead of one.",N,[[["u8"]],[[R[3],["usize"]],["usize"]]]],[11,"new",E,R[62],0,[[["u8"]],[R[61]]]],[11,"new",E,R[62],1,[[["u8"]],[R[59]]]],[11,"new",E,"Create a new `Memchr3` that's initialized to zero with a…",2,[[["u8"]],[R[60]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[50],E,E,0,[[],["i"]]],[11,"into",E,E,0,[[],[U]]],[11,R[12],E,E,0,[[[U]],[R[15]]]],[11,R[13],E,E,0,[[],[R[15]]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[50],E,E,1,[[],["i"]]],[11,"into",E,E,1,[[],[U]]],[11,R[12],E,E,1,[[[U]],[R[15]]]],[11,R[13],E,E,1,[[],[R[15]]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[50],E,E,2,[[],["i"]]],[11,"into",E,E,2,[[],[U]]],[11,R[12],E,E,2,[[[U]],[R[15]]]],[11,R[13],E,E,2,[[],[R[15]]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,R[63],E,E,0,[[["self"]],[R[3]]]],[11,R[63],E,E,1,[[["self"]],[R[3]]]],[11,R[63],E,E,2,[[["self"]],[R[3]]]],[11,"next",E,E,0,[[["self"]],[[R[3],["usize"]],["usize"]]]],[11,R[51],E,E,0,[[["self"]]]],[11,"next",E,E,1,[[["self"]],[[R[3],["usize"]],["usize"]]]],[11,R[51],E,E,1,[[["self"]]]],[11,"next",E,E,2,[[["self"]],[[R[3],["usize"]],["usize"]]]],[11,R[51],E,E,2,[[["self"]]]]],"p":[[3,"Memchr"],[3,"Memchr2"],[3,"Memchr3"]]};
searchIndex["owoify"]={"doc":E,"i":[[8,R[502],"owoify",E,N,N],[10,"owoify",E,"The owoification method",0,[[["self"]],["self"]]]],"p":[[8,R[502]]]};
searchIndex["ppv_lite86"]={"doc":E,"i":[[0,"x86_64",R[7],E,N,N],[3,"YesS3",R[11],E,N,N],[3,"NoS3",E,E,N,N],[3,"YesS4",E,E,N,N],[3,"NoS4",E,E,N,N],[3,"YesA1",E,E,N,N],[3,"NoA1",E,E,N,N],[3,"YesA2",E,E,N,N],[3,"NoA2",E,E,N,N],[3,"YesNI",E,E,N,N],[3,"NoNI",E,E,N,N],[3,R[30],E,E,N,N],[3,R[31],E,E,N,N],[19,R[20],E,"Generic wrapper for unparameterized storage of any of the…",N,N],[19,R[21],E,E,N,N],[19,R[22],E,E,N,N],[6,"SSE2",E,E,N,N],[6,"SSSE3",E,E,N,N],[6,"SSE41",E,E,N,N],[6,"AVX",E,"AVX but not AVX2: only 128-bit integer operations, but use…",N,N],[6,"AVX2",E,E,N,N],[11,R[5],E,E,0,[[],["self"]]],[11,R[6],E,E,0,[[]]],[11,R[5],E,E,1,[[],["self"]]],[11,R[6],E,E,1,[[]]],[8,"AndNot",R[7],E,N,N],[16,"Output",E,E,2,N],[10,"andnot",E,E,2,[[]]],[8,"BSwap",E,E,N,N],[10,"bswap",E,E,3,[[],["self"]]],[8,"ArithOps",E,"Ops that depend on word size",N,N],[8,"BitOps0",E,"Ops that are independent of word size and endian",N,N],[8,"BitOps32",E,E,N,N],[8,"BitOps64",E,E,N,N],[8,"BitOps128",E,E,N,N],[8,R[24],E,E,N,N],[10,"rotate_each_word_right7",E,E,4,[[],["self"]]],[10,"rotate_each_word_right8",E,E,4,[[],["self"]]],[10,"rotate_each_word_right11",E,E,4,[[],["self"]]],[10,"rotate_each_word_right12",E,E,4,[[],["self"]]],[10,"rotate_each_word_right16",E,E,4,[[],["self"]]],[10,"rotate_each_word_right20",E,E,4,[[],["self"]]],[10,"rotate_each_word_right24",E,E,4,[[],["self"]]],[10,"rotate_each_word_right25",E,E,4,[[],["self"]]],[8,R[25],E,E,N,N],[10,"rotate_each_word_right32",E,E,5,[[],["self"]]],[8,"RotateEachWord128",E,E,N,N],[8,R[26],E,E,N,N],[10,"unsafe_from",E,E,6,[[[T]],["self"]]],[8,"Vec2",E,"A vector composed of two elements, which may be words or…",N,N],[10,R[8],E,E,7,[[["u32"]],["w"]]],[10,R[9],E,E,7,[[["w"],["u32"]],["self"]]],[8,"Vec4",E,"A vector composed of four elements, which may be words or…",N,N],[10,R[8],E,E,8,[[["u32"]],["w"]]],[10,R[9],E,E,8,[[["w"],["u32"]],["self"]]],[8,"Words4",E,"A vector composed of four words; depending on their size,…",N,N],[10,"shuffle1230",E,E,9,[[],["self"]]],[10,"shuffle2301",E,E,9,[[],["self"]]],[10,"shuffle3012",E,E,9,[[],["self"]]],[8,R[27],E,"A vector composed one or more lanes each composed of four…",N,N],[10,"shuffle_lane_words1230",E,E,10,[[],["self"]]],[10,"shuffle_lane_words2301",E,E,10,[[],["self"]]],[10,"shuffle_lane_words3012",E,E,10,[[],["self"]]],[8,"Swap64",E,"Exchange neigboring ranges of bits of the specified size",N,N],[10,"swap1",E,E,11,[[],["self"]]],[10,"swap2",E,E,11,[[],["self"]]],[10,"swap4",E,E,11,[[],["self"]]],[10,"swap8",E,E,11,[[],["self"]]],[10,"swap16",E,E,11,[[],["self"]]],[10,"swap32",E,E,11,[[],["self"]]],[10,"swap64",E,E,11,[[],["self"]]],[8,"u32x4",E,E,N,N],[8,"u64x2",E,E,N,N],[8,"u128x1",E,E,N,N],[8,R[65],E,E,N,N],[8,R[66],E,E,N,N],[8,"u64x4",E,E,N,N],[8,"u128x2",E,E,N,N],[8,R[67],E,E,N,N],[8,R[68],E,E,N,N],[8,"u128x4",E,E,N,N],[8,R[28],E,"A vector composed of multiple 128-bit lanes.",N,N],[10,"to_lanes",E,"Split a multi-lane vector into single-lane vectors.",12,[[],["lanes"]]],[10,"from_lanes",E,"Build a multi-lane vector from individual lanes.",12,[[["lanes"]],["self"]]],[8,"VZip",E,"Combine single vectors into a multi-lane vector.",N,N],[10,"vzip",E,E,13,[[],["v"]]],[8,R[64],E,E,N,N],[16,"u32x4",E,E,14,N],[16,"u64x2",E,E,14,N],[16,"u128x1",E,E,14,N],[16,R[65],E,E,14,N],[16,R[66],E,E,14,N],[16,"u64x4",E,E,14,N],[16,"u128x2",E,E,14,N],[16,R[67],E,E,14,N],[16,R[68],E,E,14,N],[16,"u128x4",E,E,14,N],[11,R[69],E,E,14,[[["s"]],["store"]]],[11,"vec",E,E,14,[[["a"]],["v"]]],[11,R[70],E,E,14,[[],["v"]]],[11,R[71],E,E,14,[[],["v"]]],[10,R[19],E,E,14,[[],["self"]]],[8,"Store",E,E,N,N],[10,R[69],E,E,15,[[["s"]],["self"]]],[8,R[29],E,E,N,N],[10,"unsafe_read_le",E,E,16,[[],["self"]]],[10,"unsafe_read_be",E,E,16,[[],["self"]]],[10,"write_le",E,E,16,[[]]],[10,"write_be",E,E,16,[[]]],[14,"dispatch",E,"Generate the full set of optimized implementations to take…",N,N],[14,"dispatch_light128",E,R[10],N,N],[14,"dispatch_light256",E,R[10],N,N],[11,"from",R[11],E,17,[[[T]],[T]]],[11,R[12],E,E,17,[[[U]],[R[15]]]],[11,"into",E,E,17,[[],[U]]],[11,R[13],E,E,17,[[],[R[15]]]],[11,R[17],E,E,17,[[["self"]],[T]]],[11,R[14],E,E,17,[[["self"]],[T]]],[11,R[16],E,E,17,[[["self"]],[R[18]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[12],E,E,18,[[[U]],[R[15]]]],[11,"into",E,E,18,[[],[U]]],[11,R[13],E,E,18,[[],[R[15]]]],[11,R[17],E,E,18,[[["self"]],[T]]],[11,R[14],E,E,18,[[["self"]],[T]]],[11,R[16],E,E,18,[[["self"]],[R[18]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[12],E,E,19,[[[U]],[R[15]]]],[11,"into",E,E,19,[[],[U]]],[11,R[13],E,E,19,[[],[R[15]]]],[11,R[17],E,E,19,[[["self"]],[T]]],[11,R[14],E,E,19,[[["self"]],[T]]],[11,R[16],E,E,19,[[["self"]],[R[18]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[12],E,E,20,[[[U]],[R[15]]]],[11,"into",E,E,20,[[],[U]]],[11,R[13],E,E,20,[[],[R[15]]]],[11,R[17],E,E,20,[[["self"]],[T]]],[11,R[14],E,E,20,[[["self"]],[T]]],[11,R[16],E,E,20,[[["self"]],[R[18]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[12],E,E,21,[[[U]],[R[15]]]],[11,"into",E,E,21,[[],[U]]],[11,R[13],E,E,21,[[],[R[15]]]],[11,R[17],E,E,21,[[["self"]],[T]]],[11,R[14],E,E,21,[[["self"]],[T]]],[11,R[16],E,E,21,[[["self"]],[R[18]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[12],E,E,22,[[[U]],[R[15]]]],[11,"into",E,E,22,[[],[U]]],[11,R[13],E,E,22,[[],[R[15]]]],[11,R[17],E,E,22,[[["self"]],[T]]],[11,R[14],E,E,22,[[["self"]],[T]]],[11,R[16],E,E,22,[[["self"]],[R[18]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[12],E,E,23,[[[U]],[R[15]]]],[11,"into",E,E,23,[[],[U]]],[11,R[13],E,E,23,[[],[R[15]]]],[11,R[17],E,E,23,[[["self"]],[T]]],[11,R[14],E,E,23,[[["self"]],[T]]],[11,R[16],E,E,23,[[["self"]],[R[18]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[12],E,E,24,[[[U]],[R[15]]]],[11,"into",E,E,24,[[],[U]]],[11,R[13],E,E,24,[[],[R[15]]]],[11,R[17],E,E,24,[[["self"]],[T]]],[11,R[14],E,E,24,[[["self"]],[T]]],[11,R[16],E,E,24,[[["self"]],[R[18]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[12],E,E,25,[[[U]],[R[15]]]],[11,"into",E,E,25,[[],[U]]],[11,R[13],E,E,25,[[],[R[15]]]],[11,R[17],E,E,25,[[["self"]],[T]]],[11,R[14],E,E,25,[[["self"]],[T]]],[11,R[16],E,E,25,[[["self"]],[R[18]]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[12],E,E,26,[[[U]],[R[15]]]],[11,"into",E,E,26,[[],[U]]],[11,R[13],E,E,26,[[],[R[15]]]],[11,R[17],E,E,26,[[["self"]],[T]]],[11,R[14],E,E,26,[[["self"]],[T]]],[11,R[16],E,E,26,[[["self"]],[R[18]]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[12],E,E,27,[[[U]],[R[15]]]],[11,"into",E,E,27,[[],[U]]],[11,R[13],E,E,27,[[],[R[15]]]],[11,R[17],E,E,27,[[["self"]],[T]]],[11,R[14],E,E,27,[[["self"]],[T]]],[11,R[16],E,E,27,[[["self"]],[R[18]]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[12],E,E,28,[[[U]],[R[15]]]],[11,"into",E,E,28,[[],[U]]],[11,R[13],E,E,28,[[],[R[15]]]],[11,R[17],E,E,28,[[["self"]],[T]]],[11,R[14],E,E,28,[[["self"]],[T]]],[11,R[16],E,E,28,[[["self"]],[R[18]]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[12],E,E,29,[[[U]],[R[15]]]],[11,"into",E,E,29,[[],[U]]],[11,R[13],E,E,29,[[],[R[15]]]],[11,R[17],E,E,29,[[["self"]],[T]]],[11,R[14],E,E,29,[[["self"]],[T]]],[11,R[16],E,E,29,[[["self"]],[R[18]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[12],E,E,0,[[[U]],[R[15]]]],[11,"into",E,E,0,[[],[U]]],[11,R[13],E,E,0,[[],[R[15]]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[12],E,E,1,[[[U]],[R[15]]]],[11,"into",E,E,1,[[],[U]]],[11,R[13],E,E,1,[[],[R[15]]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,R[19],E,E,27,[[],["self"]]],[11,R[19],E,E,28,[[],["self"]]],[11,R[69],E,E,29,[[[R[20]]],["self"]]],[11,"into",E,E,29,[[]]],[11,"into",E,E,29,[[]]],[11,"into",E,E,29,[[]]],[11,"into",E,E,0,[[]]],[11,"into",E,E,0,[[]]],[11,"into",E,E,0,[[]]],[11,"into",E,E,1,[[]]],[11,"into",E,E,1,[[]]],[11,"into",E,E,1,[[]]],[11,"clone",E,E,17,[[["self"]],["yess3"]]],[11,"clone",E,E,18,[[["self"]],["nos3"]]],[11,"clone",E,E,19,[[["self"]],["yess4"]]],[11,"clone",E,E,20,[[["self"]],["nos4"]]],[11,"clone",E,E,21,[[["self"]],["yesa1"]]],[11,"clone",E,E,22,[[["self"]],["noa1"]]],[11,"clone",E,E,23,[[["self"]],["yesa2"]]],[11,"clone",E,E,24,[[["self"]],["noa2"]]],[11,"clone",E,E,25,[[["self"]],["yesni"]]],[11,"clone",E,E,26,[[["self"]],["noni"]]],[11,"clone",E,E,27,[[["self"]],["ssemachine"]]],[11,"clone",E,E,28,[[["self"]],["avx2machine"]]],[11,"clone",E,E,29,[[["self"]],[R[20]]]],[11,"clone",E,E,0,[[["self"]],[R[21]]]],[11,"clone",E,E,1,[[["self"]],[R[22]]]],[11,R[23],E,E,29,[[],["self"]]],[11,R[23],E,E,0,[[],["self"]]],[11,R[23],E,E,1,[[],["self"]]],[11,R[69],R[7],E,14,[[["s"]],["store"]]],[11,"vec",E,E,14,[[["a"]],["v"]]],[11,R[70],E,E,14,[[],["v"]]],[11,R[71],E,E,14,[[],["v"]]]],"p":[[19,R[21]],[19,R[22]],[8,"AndNot"],[8,"BSwap"],[8,R[24]],[8,R[25]],[8,R[26]],[8,"Vec2"],[8,"Vec4"],[8,"Words4"],[8,R[27]],[8,"Swap64"],[8,R[28]],[8,"VZip"],[8,R[64]],[8,"Store"],[8,R[29]],[3,"YesS3"],[3,"NoS3"],[3,"YesS4"],[3,"NoS4"],[3,"YesA1"],[3,"NoA1"],[3,"YesA2"],[3,"NoA2"],[3,"YesNI"],[3,"NoNI"],[3,R[30]],[3,R[31]],[19,R[20]]]};
searchIndex["rand"]={"doc":"Utilities for random number generation","i":[[8,"RngCore","rand",R[370],N,N],[10,R[83],E,R[371],0,[[["self"]],["u32"]]],[10,R[84],E,R[372],0,[[["self"]],["u64"]]],[10,R[85],E,R[373],0,[[["self"]]]],[10,R[86],E,R[374],0,[[["self"]],[[R[15],["error"]],["error"]]]],[8,R[375],E,R[376],N,N],[8,R[96],E,R[377],N,N],[16,"Seed",E,R[378],1,N],[10,R[87],E,R[379],1,[[],["self"]]],[11,R[88],E,R[380],1,[[["u64"]],["self"]]],[11,R[89],E,R[381],1,[[["r"]],[["error"],[R[15],["error"]]]]],[11,R[382],E,R[383],1,[[],["self"]]],[3,"Error",E,R[364],N,N],[5,"thread_rng",E,"Retrieve the lazily-initialized thread-local random number…",N,[[],[R[331]]]],[5,"random",E,"Generates a random value using the thread-local random…",N,[[],[T]]],[0,"distributions",E,"Generating random samples from probability distributions",N,N],[3,R[352],R[305],"Sample a `char`, uniformly distributed over ASCII letters…",N,N],[3,"Uniform",E,R[302],N,N],[3,R[353],E,R[301],N,N],[3,"Open01",E,R[301],N,N],[3,R[338],E,"The Bernoulli distribution.",N,N],[3,R[340],E,"Samples uniformly from the surface of the unit sphere in…",N,N],[3,R[341],E,"Samples uniformly from the edge of the unit circle in two…",N,N],[3,"Gamma",E,"The Gamma distribution `Gamma(shape, scale)` distribution.",N,N],[3,R[342],E,"The chi-squared distribution `χ²(k)`, where `k` is the…",N,N],[3,"FisherF",E,"The Fisher F distribution `F(m, n)`.",N,N],[3,"StudentT",E,"The Student t distribution, `t(nu)`, where `nu` is the…",N,N],[3,"Beta",E,"The Beta distribution with shape parameters `alpha` and…",N,N],[3,"Normal",E,"The normal distribution `N(mean, std_dev**2)`.",N,N],[3,R[343],E,"The log-normal distribution `ln N(mean, std_dev**2)`.",N,N],[3,R[354],E,"Samples floating-point numbers according to the normal…",N,N],[3,"Exp",E,"The exponential distribution `Exp(lambda)`.",N,N],[3,"Exp1",E,"Samples floating-point numbers according to the…",N,N],[3,"Pareto",E,"Samples floating-point numbers according to the Pareto…",N,N],[3,"Poisson",E,"The Poisson distribution `Poisson(lambda)`.",N,N],[3,"Binomial",E,"The binomial distribution `Binomial(n, p)`.",N,N],[3,"Cauchy",E,"The Cauchy distribution `Cauchy(median, scale)`.",N,N],[3,R[344],E,"The dirichelet distribution `Dirichlet(alpha)`.",N,N],[3,R[345],E,"The triangular distribution.",N,N],[3,"Weibull",E,"Samples floating-point numbers according to the Weibull…",N,N],[3,"DistIter",E,"An iterator that generates random values of `T` with…",N,N],[3,R[355],E,"A generic random value distribution, implemented for many…",N,N],[4,R[334],E,"Error type returned from `Bernoulli::new`.",N,N],[13,"InvalidProbability",E,"`p < 0` or `p > 1`.",2,N],[0,R[325],E,"A distribution uniformly sampling numbers within a given…",N,N],[3,"Uniform",R[319],R[302],N,N],[3,R[356],E,"The back-end implementing [`UniformSampler`] for integer…",N,N],[3,R[357],E,"The back-end implementing [`UniformSampler`] for…",N,N],[3,R[358],E,"The back-end implementing [`UniformSampler`] for `Duration`.",N,N],[8,R[335],E,"Helper trait for creating objects using the correct…",N,N],[16,"Sampler",E,"The `UniformSampler` implementation supporting type `X`.",3,N],[8,R[336],E,"Helper trait handling actual uniform sampling.",N,N],[16,"X",E,"The type sampled by this implementation.",4,N],[10,"new",E,"Construct self, with inclusive lower bound and exclusive…",4,[[["b2"],["b1"]],["self"]]],[10,R[303],E,"Construct self, with inclusive bounds `[low, high]`.",4,[[["b2"],["b1"]],["self"]]],[10,"sample",E,"Sample a value.",4,[[["self"],["r"]]]],[11,R[324],E,"Sample a single value uniformly from a range with…",4,[[["b2"],["b1"],["r"]]]],[8,R[337],E,"Helper trait similar to [`Borrow`] but implemented only…",N,N],[10,R[17],E,"Immutably borrows from an owned value. See…",5,[[["self"]],["borrowed"]]],[11,"new",E,R[304],6,[[["b2"],["b1"]],[R[325]]]],[11,R[303],E,R[304],6,[[["b2"],["b1"]],[R[325]]]],[11,"new",R[305],"Construct a new `Bernoulli` with the given probability of…",7,[[["f64"]],[[R[306]],[R[307]],[R[15],[R[306],R[307]]]]]],[11,"from_ratio",E,"Construct a new `Bernoulli` with the probability of…",7,[[["u32"]],[[R[306]],[R[307]],[R[15],[R[306],R[307]]]]]],[0,"weighted",E,"Weighted index sampling",N,N],[3,R[308],R[311],R[309],N,N],[4,R[339],E,"Error type returned from `WeightedIndex::new`.",N,N],[13,"NoItem",E,"The provided weight collection contains no items.",8,N],[13,"InvalidWeight",E,"A weight is either less than zero, greater than the…",8,N],[13,"AllWeightsZero",E,"All items in the provided weight collection are zero.",8,N],[13,"TooMany",E,"Too many weights are provided (length greater than…",8,N],[0,"alias_method",E,"This module contains an implementation of alias method for…",N,N],[3,R[308],R[320],R[309],N,N],[8,"Weight",E,"Trait that must be implemented for weights, that are used…",N,N],[18,"MAX",E,"Maximum number representable by `Self`.",9,N],[18,"ZERO",E,"Element of `Self` equivalent to 0.",9,N],[10,"try_from_u32_lossy",E,"Produce an instance of `Self` from a `u32` value, or…",9,[[["u32"]],[R[3]]]],[11,"sum",E,"Sums all values in slice `values`.",9,[[],["self"]]],[11,"new",E,"Creates a new [`WeightedIndex`].",10,[[["vec"]],[[R[15],[R[310]]],[R[310]]]]],[11,"new",R[311],"Creates a new a `WeightedIndex` [`Distribution`] using the…",11,[[["i"]],[[R[15],[R[312],R[310]]],[R[312]],[R[310]]]]],[11,"new",R[305],"Construct a new `UnitSphereSurface` distribution.",12,[[],[R[326]]]],[11,"new",E,"Construct a new `UnitCircle` distribution.",13,[[],[R[327]]]],[11,"new",E,"Construct an object representing the `Gamma(shape, scale)`…",14,[[["f64"]],["gamma"]]],[11,"new",E,"Create a new chi-squared distribution with…",15,[[["f64"]],[R[328]]]],[11,"new",E,"Create a new `FisherF` distribution, with the given…",16,[[["f64"]],["fisherf"]]],[11,"new",E,"Create a new Student t distribution with `n` degrees of…",17,[[["f64"]],["studentt"]]],[11,"new",E,"Construct an object representing the `Beta(alpha, beta)`…",18,[[["f64"]],["beta"]]],[11,"new",E,"Construct a new `Normal` distribution with the given mean…",19,[[["f64"]],["normal"]]],[11,"new",E,"Construct a new `LogNormal` distribution with the given…",20,[[["f64"]],[R[329]]]],[11,"new",E,"Construct a new `Exp` with the given shape parameter…",21,[[["f64"]],["exp"]]],[11,"new",E,"Construct a new Pareto distribution with given `scale` and…",22,[[["f64"]],["pareto"]]],[11,"new",E,"Construct a new `Poisson` with the given shape parameter…",23,[[["f64"]],["poisson"]]],[11,"new",E,"Construct a new `Binomial` with the given shape parameters…",24,[[["f64"],["u64"]],["binomial"]]],[11,"new",E,"Construct a new `Cauchy` with the given shape parameters…",25,[[["f64"]],["cauchy"]]],[11,"new",E,"Construct a new `Dirichlet` with the given alpha parameter…",26,[[["into",["vec"]],["vec",["f64"]]],[R[313]]]],[11,"new_with_param",E,"Construct a new `Dirichlet` with the given shape parameter…",26,[[["f64"],["usize"]],[R[313]]]],[11,"new",E,"Construct a new `Triangular` with minimum `min`, maximum…",27,[[["f64"]],[R[330]]]],[11,"new",E,"Construct a new `Weibull` distribution with given `scale`…",28,[[["f64"]],["weibull"]]],[8,R[346],E,"Types (distributions) that can be used to create a random…",N,N],[10,"sample",E,"Generate a random value of `T`, using `rng` as the source…",29,[[["self"],["r"]],[T]]],[11,R[317],E,"Create an iterator that generates random values of `T`,…",29,[[["r"]],["distiter"]]],[0,"prelude","rand","Convenience re-export of common members",N,N],[0,"rngs",E,"Random number generators and adapters",N,N],[3,R[348],R[314],"An interface returning random data from external…",N,N],[3,"StdRng",E,"The standard RNG. The PRNG algorithm in `StdRng` is chosen…",N,N],[3,R[359],E,"The type returned by [`thread_rng`], essentially just a…",N,N],[3,"OsRng",E,"A random number generator that retrieves randomness from…",N,N],[0,"adapter",E,"Wrappers / adapters forming RNGs",N,N],[3,"ReadRng",R[321],"An RNG that reads random bytes straight from any type…",N,N],[3,R[360],E,"`ReadRng` error type",N,N],[3,R[347],E,"A wrapper around any PRNG that implements…",N,N],[11,"new",E,"Create a new `ReadRng` from a `Read`.",30,[[["r"]],["readrng"]]],[11,"new",E,"Create a new `ReseedingRng` from an existing PRNG,…",31,[[["rsdr"],["u64"],["r"]],["self"]]],[11,"reseed",E,"Reseed the internal PRNG.",31,[[["self"]],[[R[15],["error"]],["error"]]]],[11,"new",R[314],"Create a new `EntropyRng`.",32,[[],["self"]]],[0,"mock",E,"Mock random number generator",N,N],[3,"StepRng",R[322],"A simple implementation of `RngCore` for testing purposes.",N,N],[11,"new",E,"Create a `StepRng`, yielding an arithmetic sequence…",33,[[["u64"]],["self"]]],[11,"new",R[314],"Create a new `OsRng`.",34,[[],[["osrng"],["error"],[R[15],["osrng","error"]]]]],[0,"seq","rand","Sequence-related functionality",N,N],[3,R[361],R[315],"An iterator over multiple slice elements.",N,N],[0,"index",E,"Low-level API for sampling indices",N,N],[4,"IndexVec",R[323],"A vector of indices.",N,N],[4,R[362],E,"Return type of `IndexVec::iter`.",N,N],[4,R[363],E,"Return type of `IndexVec::into_iter`.",N,N],[5,"sample",E,"Randomly sample exactly `amount` distinct indices from…",N,[[["r"],["usize"]],[R[332]]]],[11,"len",E,"Returns the number of indices",35,[[["self"]],["usize"]]],[11,"index",E,"Return the value at the given `index`.",35,[[["self"],["usize"]],["usize"]]],[11,"into_vec",E,"Return result as a `Vec<usize>`. Conversion may or may not…",35,[[],[["usize"],["vec",["usize"]]]]],[11,"iter",E,"Iterate over the indices as a sequence of `usize` values",35,[[["self"]],["indexveciter"]]],[11,R[50],E,"Convert into an iterator over the indices as a sequence of…",35,[[],[R[333]]]],[8,R[349],R[315],"Extension trait on slices, providing random mutation and…",N,N],[16,"Item",E,"The element type.",36,N],[10,"choose",E,"Returns a reference to one random element of the slice, or…",36,[[["self"],["r"]],[R[3]]]],[10,"choose_mut",E,"Returns a mutable reference to one random element of the…",36,[[["self"],["r"]],[R[3]]]],[10,R[316],E,"Chooses `amount` elements from the slice at random,…",36,[[["self"],["r"],["usize"]],["slicechooseiter"]]],[10,"choose_weighted",E,"Similar to [`choose`], but where the likelihood of each…",36,[[["self"],["r"],["f"]],[[R[310]],[R[15],[R[310]]]]]],[10,"choose_weighted_mut",E,"Similar to [`choose_mut`], but where the likelihood of…",36,[[["self"],["r"],["f"]],[[R[15],[R[310]]],[R[310]]]]],[10,"shuffle",E,"Shuffle a mutable slice in place.",36,[[["self"],["r"]]]],[10,"partial_shuffle",E,"Shuffle a slice in place, but exit early.",36,[[["self"],["r"],["usize"]]]],[8,R[350],E,"Extension trait on iterators, providing random sampling…",N,N],[11,"choose",E,"Choose one element at random from the iterator.",37,[[["r"]],[R[3]]]],[11,"choose_multiple_fill",E,"Collects values at random from the iterator into a…",37,[[["r"]],["usize"]]],[11,R[316],E,"Collects `amount` values at random from the iterator into…",37,[[["r"],["usize"]],["vec"]]],[8,"Rng","rand","An automatically-implemented extension trait on…",N,N],[11,"gen",E,"Return a random value supporting the [`Standard`]…",38,[[["self"]],[T]]],[11,"gen_range",E,"Generate a random value in the range [`low`, `high`), i.e.…",38,[[["self"],["b1"],["b2"]],["sampleuniform"]]],[11,"sample",E,"Sample a new value, using the given distribution.",38,[[["self"],["distribution"]],[T]]],[11,R[317],E,"Create an iterator that generates values using the given…",38,[[["d"]],["distiter"]]],[11,"fill",E,R[318],38,[[["self"],[T]]]],[11,"try_fill",E,R[318],38,[[["self"],[T]],[[R[15],["error"]],["error"]]]],[11,"gen_bool",E,"Return a bool with a probability `p` of being true.",38,[[["self"],["f64"]],["bool"]]],[11,"gen_ratio",E,"Return a bool with a probability of…",38,[[["self"],["u32"]],["bool"]]],[8,R[351],E,"Trait for casting types to byte slices",N,N],[10,"as_byte_slice_mut",E,"Return a mutable reference to self as a byte slice",39,[[["self"]]]],[10,"to_le",E,"Call `to_le` on each element (i.e. byte-swap on Big Endian…",39,[[["self"]]]],[11,"from",E,E,40,[[[T]],[T]]],[11,R[81],E,E,40,[[["self"]],[R[2]]]],[11,"into",E,E,40,[[],[U]]],[11,R[12],E,E,40,[[[U]],[R[15]]]],[11,R[13],E,E,40,[[],[R[15]]]],[11,R[14],E,E,40,[[["self"]],[T]]],[11,R[17],E,E,40,[[["self"]],[T]]],[11,R[16],E,E,40,[[["self"]],[R[18]]]],[11,"vzip",E,E,40,[[],["v"]]],[11,"from",R[305],E,41,[[[T]],[T]]],[11,"into",E,E,41,[[],[U]]],[11,R[12],E,E,41,[[[U]],[R[15]]]],[11,R[13],E,E,41,[[],[R[15]]]],[11,R[14],E,E,41,[[["self"]],[T]]],[11,R[17],E,E,41,[[["self"]],[T]]],[11,R[16],E,E,41,[[["self"]],[R[18]]]],[11,"vzip",E,E,41,[[],["v"]]],[11,"from",R[319],E,6,[[[T]],[T]]],[11,R[32],E,E,6,[[["self"]],[T]]],[11,R[33],E,E,6,[[[T],["self"]]]],[11,"into",E,E,6,[[],[U]]],[11,R[12],E,E,6,[[[U]],[R[15]]]],[11,R[13],E,E,6,[[],[R[15]]]],[11,R[14],E,E,6,[[["self"]],[T]]],[11,R[17],E,E,6,[[["self"]],[T]]],[11,R[16],E,E,6,[[["self"]],[R[18]]]],[11,"vzip",E,E,6,[[],["v"]]],[11,"from",R[305],E,42,[[[T]],[T]]],[11,R[32],E,E,42,[[["self"]],[T]]],[11,R[33],E,E,42,[[[T],["self"]]]],[11,"into",E,E,42,[[],[U]]],[11,R[12],E,E,42,[[[U]],[R[15]]]],[11,R[13],E,E,42,[[],[R[15]]]],[11,R[14],E,E,42,[[["self"]],[T]]],[11,R[17],E,E,42,[[["self"]],[T]]],[11,R[16],E,E,42,[[["self"]],[R[18]]]],[11,"vzip",E,E,42,[[],["v"]]],[11,"from",E,E,43,[[[T]],[T]]],[11,R[32],E,E,43,[[["self"]],[T]]],[11,R[33],E,E,43,[[[T],["self"]]]],[11,"into",E,E,43,[[],[U]]],[11,R[12],E,E,43,[[[U]],[R[15]]]],[11,R[13],E,E,43,[[],[R[15]]]],[11,R[14],E,E,43,[[["self"]],[T]]],[11,R[17],E,E,43,[[["self"]],[T]]],[11,R[16],E,E,43,[[["self"]],[R[18]]]],[11,"vzip",E,E,43,[[],["v"]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[32],E,E,7,[[["self"]],[T]]],[11,R[33],E,E,7,[[[T],["self"]]]],[11,"into",E,E,7,[[],[U]]],[11,R[12],E,E,7,[[[U]],[R[15]]]],[11,R[13],E,E,7,[[],[R[15]]]],[11,R[14],E,E,7,[[["self"]],[T]]],[11,R[17],E,E,7,[[["self"]],[T]]],[11,R[16],E,E,7,[[["self"]],[R[18]]]],[11,"vzip",E,E,7,[[],["v"]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[32],E,E,12,[[["self"]],[T]]],[11,R[33],E,E,12,[[[T],["self"]]]],[11,"into",E,E,12,[[],[U]]],[11,R[12],E,E,12,[[[U]],[R[15]]]],[11,R[13],E,E,12,[[],[R[15]]]],[11,R[14],E,E,12,[[["self"]],[T]]],[11,R[17],E,E,12,[[["self"]],[T]]],[11,R[16],E,E,12,[[["self"]],[R[18]]]],[11,"vzip",E,E,12,[[],["v"]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[32],E,E,13,[[["self"]],[T]]],[11,R[33],E,E,13,[[[T],["self"]]]],[11,"into",E,E,13,[[],[U]]],[11,R[12],E,E,13,[[[U]],[R[15]]]],[11,R[13],E,E,13,[[],[R[15]]]],[11,R[14],E,E,13,[[["self"]],[T]]],[11,R[17],E,E,13,[[["self"]],[T]]],[11,R[16],E,E,13,[[["self"]],[R[18]]]],[11,"vzip",E,E,13,[[],["v"]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[32],E,E,14,[[["self"]],[T]]],[11,R[33],E,E,14,[[[T],["self"]]]],[11,"into",E,E,14,[[],[U]]],[11,R[12],E,E,14,[[[U]],[R[15]]]],[11,R[13],E,E,14,[[],[R[15]]]],[11,R[14],E,E,14,[[["self"]],[T]]],[11,R[17],E,E,14,[[["self"]],[T]]],[11,R[16],E,E,14,[[["self"]],[R[18]]]],[11,"vzip",E,E,14,[[],["v"]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[32],E,E,15,[[["self"]],[T]]],[11,R[33],E,E,15,[[[T],["self"]]]],[11,"into",E,E,15,[[],[U]]],[11,R[12],E,E,15,[[[U]],[R[15]]]],[11,R[13],E,E,15,[[],[R[15]]]],[11,R[14],E,E,15,[[["self"]],[T]]],[11,R[17],E,E,15,[[["self"]],[T]]],[11,R[16],E,E,15,[[["self"]],[R[18]]]],[11,"vzip",E,E,15,[[],["v"]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[32],E,E,16,[[["self"]],[T]]],[11,R[33],E,E,16,[[[T],["self"]]]],[11,"into",E,E,16,[[],[U]]],[11,R[12],E,E,16,[[[U]],[R[15]]]],[11,R[13],E,E,16,[[],[R[15]]]],[11,R[14],E,E,16,[[["self"]],[T]]],[11,R[17],E,E,16,[[["self"]],[T]]],[11,R[16],E,E,16,[[["self"]],[R[18]]]],[11,"vzip",E,E,16,[[],["v"]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[32],E,E,17,[[["self"]],[T]]],[11,R[33],E,E,17,[[[T],["self"]]]],[11,"into",E,E,17,[[],[U]]],[11,R[12],E,E,17,[[[U]],[R[15]]]],[11,R[13],E,E,17,[[],[R[15]]]],[11,R[14],E,E,17,[[["self"]],[T]]],[11,R[17],E,E,17,[[["self"]],[T]]],[11,R[16],E,E,17,[[["self"]],[R[18]]]],[11,"vzip",E,E,17,[[],["v"]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[32],E,E,18,[[["self"]],[T]]],[11,R[33],E,E,18,[[[T],["self"]]]],[11,"into",E,E,18,[[],[U]]],[11,R[12],E,E,18,[[[U]],[R[15]]]],[11,R[13],E,E,18,[[],[R[15]]]],[11,R[14],E,E,18,[[["self"]],[T]]],[11,R[17],E,E,18,[[["self"]],[T]]],[11,R[16],E,E,18,[[["self"]],[R[18]]]],[11,"vzip",E,E,18,[[],["v"]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[32],E,E,19,[[["self"]],[T]]],[11,R[33],E,E,19,[[[T],["self"]]]],[11,"into",E,E,19,[[],[U]]],[11,R[12],E,E,19,[[[U]],[R[15]]]],[11,R[13],E,E,19,[[],[R[15]]]],[11,R[14],E,E,19,[[["self"]],[T]]],[11,R[17],E,E,19,[[["self"]],[T]]],[11,R[16],E,E,19,[[["self"]],[R[18]]]],[11,"vzip",E,E,19,[[],["v"]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[32],E,E,20,[[["self"]],[T]]],[11,R[33],E,E,20,[[[T],["self"]]]],[11,"into",E,E,20,[[],[U]]],[11,R[12],E,E,20,[[[U]],[R[15]]]],[11,R[13],E,E,20,[[],[R[15]]]],[11,R[14],E,E,20,[[["self"]],[T]]],[11,R[17],E,E,20,[[["self"]],[T]]],[11,R[16],E,E,20,[[["self"]],[R[18]]]],[11,"vzip",E,E,20,[[],["v"]]],[11,"from",E,E,44,[[[T]],[T]]],[11,R[32],E,E,44,[[["self"]],[T]]],[11,R[33],E,E,44,[[[T],["self"]]]],[11,"into",E,E,44,[[],[U]]],[11,R[12],E,E,44,[[[U]],[R[15]]]],[11,R[13],E,E,44,[[],[R[15]]]],[11,R[14],E,E,44,[[["self"]],[T]]],[11,R[17],E,E,44,[[["self"]],[T]]],[11,R[16],E,E,44,[[["self"]],[R[18]]]],[11,"vzip",E,E,44,[[],["v"]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[32],E,E,21,[[["self"]],[T]]],[11,R[33],E,E,21,[[[T],["self"]]]],[11,"into",E,E,21,[[],[U]]],[11,R[12],E,E,21,[[[U]],[R[15]]]],[11,R[13],E,E,21,[[],[R[15]]]],[11,R[14],E,E,21,[[["self"]],[T]]],[11,R[17],E,E,21,[[["self"]],[T]]],[11,R[16],E,E,21,[[["self"]],[R[18]]]],[11,"vzip",E,E,21,[[],["v"]]],[11,"from",E,E,45,[[[T]],[T]]],[11,R[32],E,E,45,[[["self"]],[T]]],[11,R[33],E,E,45,[[[T],["self"]]]],[11,"into",E,E,45,[[],[U]]],[11,R[12],E,E,45,[[[U]],[R[15]]]],[11,R[13],E,E,45,[[],[R[15]]]],[11,R[14],E,E,45,[[["self"]],[T]]],[11,R[17],E,E,45,[[["self"]],[T]]],[11,R[16],E,E,45,[[["self"]],[R[18]]]],[11,"vzip",E,E,45,[[],["v"]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[32],E,E,22,[[["self"]],[T]]],[11,R[33],E,E,22,[[[T],["self"]]]],[11,"into",E,E,22,[[],[U]]],[11,R[12],E,E,22,[[[U]],[R[15]]]],[11,R[13],E,E,22,[[],[R[15]]]],[11,R[14],E,E,22,[[["self"]],[T]]],[11,R[17],E,E,22,[[["self"]],[T]]],[11,R[16],E,E,22,[[["self"]],[R[18]]]],[11,"vzip",E,E,22,[[],["v"]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[32],E,E,23,[[["self"]],[T]]],[11,R[33],E,E,23,[[[T],["self"]]]],[11,"into",E,E,23,[[],[U]]],[11,R[12],E,E,23,[[[U]],[R[15]]]],[11,R[13],E,E,23,[[],[R[15]]]],[11,R[14],E,E,23,[[["self"]],[T]]],[11,R[17],E,E,23,[[["self"]],[T]]],[11,R[16],E,E,23,[[["self"]],[R[18]]]],[11,"vzip",E,E,23,[[],["v"]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[32],E,E,24,[[["self"]],[T]]],[11,R[33],E,E,24,[[[T],["self"]]]],[11,"into",E,E,24,[[],[U]]],[11,R[12],E,E,24,[[[U]],[R[15]]]],[11,R[13],E,E,24,[[],[R[15]]]],[11,R[14],E,E,24,[[["self"]],[T]]],[11,R[17],E,E,24,[[["self"]],[T]]],[11,R[16],E,E,24,[[["self"]],[R[18]]]],[11,"vzip",E,E,24,[[],["v"]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[32],E,E,25,[[["self"]],[T]]],[11,R[33],E,E,25,[[[T],["self"]]]],[11,"into",E,E,25,[[],[U]]],[11,R[12],E,E,25,[[[U]],[R[15]]]],[11,R[13],E,E,25,[[],[R[15]]]],[11,R[14],E,E,25,[[["self"]],[T]]],[11,R[17],E,E,25,[[["self"]],[T]]],[11,R[16],E,E,25,[[["self"]],[R[18]]]],[11,"vzip",E,E,25,[[],["v"]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[32],E,E,26,[[["self"]],[T]]],[11,R[33],E,E,26,[[[T],["self"]]]],[11,"into",E,E,26,[[],[U]]],[11,R[12],E,E,26,[[[U]],[R[15]]]],[11,R[13],E,E,26,[[],[R[15]]]],[11,R[14],E,E,26,[[["self"]],[T]]],[11,R[17],E,E,26,[[["self"]],[T]]],[11,R[16],E,E,26,[[["self"]],[R[18]]]],[11,"vzip",E,E,26,[[],["v"]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[32],E,E,27,[[["self"]],[T]]],[11,R[33],E,E,27,[[[T],["self"]]]],[11,"into",E,E,27,[[],[U]]],[11,R[12],E,E,27,[[[U]],[R[15]]]],[11,R[13],E,E,27,[[],[R[15]]]],[11,R[14],E,E,27,[[["self"]],[T]]],[11,R[17],E,E,27,[[["self"]],[T]]],[11,R[16],E,E,27,[[["self"]],[R[18]]]],[11,"vzip",E,E,27,[[],["v"]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[32],E,E,28,[[["self"]],[T]]],[11,R[33],E,E,28,[[[T],["self"]]]],[11,"into",E,E,28,[[],[U]]],[11,R[12],E,E,28,[[[U]],[R[15]]]],[11,R[13],E,E,28,[[],[R[15]]]],[11,R[14],E,E,28,[[["self"]],[T]]],[11,R[17],E,E,28,[[["self"]],[T]]],[11,R[16],E,E,28,[[["self"]],[R[18]]]],[11,"vzip",E,E,28,[[],["v"]]],[11,"from",E,E,46,[[[T]],[T]]],[11,R[50],E,E,46,[[],["i"]]],[11,"into",E,E,46,[[],[U]]],[11,R[12],E,E,46,[[[U]],[R[15]]]],[11,R[13],E,E,46,[[],[R[15]]]],[11,R[14],E,E,46,[[["self"]],[T]]],[11,R[17],E,E,46,[[["self"]],[T]]],[11,R[16],E,E,46,[[["self"]],[R[18]]]],[11,"vzip",E,E,46,[[],["v"]]],[11,"from",E,E,47,[[[T]],[T]]],[11,R[32],E,E,47,[[["self"]],[T]]],[11,R[33],E,E,47,[[[T],["self"]]]],[11,"into",E,E,47,[[],[U]]],[11,R[12],E,E,47,[[[U]],[R[15]]]],[11,R[13],E,E,47,[[],[R[15]]]],[11,R[14],E,E,47,[[["self"]],[T]]],[11,R[17],E,E,47,[[["self"]],[T]]],[11,R[16],E,E,47,[[["self"]],[R[18]]]],[11,"vzip",E,E,47,[[],["v"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[32],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,[[[T],["self"]]]],[11,"into",E,E,2,[[],[U]]],[11,R[12],E,E,2,[[[U]],[R[15]]]],[11,R[13],E,E,2,[[],[R[15]]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,"vzip",E,E,2,[[],["v"]]],[11,"from",R[319],E,48,[[[T]],[T]]],[11,R[32],E,E,48,[[["self"]],[T]]],[11,R[33],E,E,48,[[[T],["self"]]]],[11,"into",E,E,48,[[],[U]]],[11,R[12],E,E,48,[[[U]],[R[15]]]],[11,R[13],E,E,48,[[],[R[15]]]],[11,R[14],E,E,48,[[["self"]],[T]]],[11,R[17],E,E,48,[[["self"]],[T]]],[11,R[16],E,E,48,[[["self"]],[R[18]]]],[11,"vzip",E,E,48,[[],["v"]]],[11,"from",E,E,49,[[[T]],[T]]],[11,R[32],E,E,49,[[["self"]],[T]]],[11,R[33],E,E,49,[[[T],["self"]]]],[11,"into",E,E,49,[[],[U]]],[11,R[12],E,E,49,[[[U]],[R[15]]]],[11,R[13],E,E,49,[[],[R[15]]]],[11,R[14],E,E,49,[[["self"]],[T]]],[11,R[17],E,E,49,[[["self"]],[T]]],[11,R[16],E,E,49,[[["self"]],[R[18]]]],[11,"vzip",E,E,49,[[],["v"]]],[11,"from",E,E,50,[[[T]],[T]]],[11,R[32],E,E,50,[[["self"]],[T]]],[11,R[33],E,E,50,[[[T],["self"]]]],[11,"into",E,E,50,[[],[U]]],[11,R[12],E,E,50,[[[U]],[R[15]]]],[11,R[13],E,E,50,[[],[R[15]]]],[11,R[14],E,E,50,[[["self"]],[T]]],[11,R[17],E,E,50,[[["self"]],[T]]],[11,R[16],E,E,50,[[["self"]],[R[18]]]],[11,"vzip",E,E,50,[[],["v"]]],[11,"from",R[311],E,11,[[[T]],[T]]],[11,R[32],E,E,11,[[["self"]],[T]]],[11,R[33],E,E,11,[[[T],["self"]]]],[11,"into",E,E,11,[[],[U]]],[11,R[12],E,E,11,[[[U]],[R[15]]]],[11,R[13],E,E,11,[[],[R[15]]]],[11,R[14],E,E,11,[[["self"]],[T]]],[11,R[17],E,E,11,[[["self"]],[T]]],[11,R[16],E,E,11,[[["self"]],[R[18]]]],[11,"vzip",E,E,11,[[],["v"]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[32],E,E,8,[[["self"]],[T]]],[11,R[33],E,E,8,[[[T],["self"]]]],[11,R[81],E,E,8,[[["self"]],[R[2]]]],[11,"into",E,E,8,[[],[U]]],[11,R[12],E,E,8,[[[U]],[R[15]]]],[11,R[13],E,E,8,[[],[R[15]]]],[11,R[14],E,E,8,[[["self"]],[T]]],[11,R[17],E,E,8,[[["self"]],[T]]],[11,R[16],E,E,8,[[["self"]],[R[18]]]],[11,"vzip",E,E,8,[[],["v"]]],[11,"from",R[320],E,10,[[[T]],[T]]],[11,R[32],E,E,10,[[["self"]],[T]]],[11,R[33],E,E,10,[[[T],["self"]]]],[11,"into",E,E,10,[[],[U]]],[11,R[12],E,E,10,[[[U]],[R[15]]]],[11,R[13],E,E,10,[[],[R[15]]]],[11,R[14],E,E,10,[[["self"]],[T]]],[11,R[17],E,E,10,[[["self"]],[T]]],[11,R[16],E,E,10,[[["self"]],[R[18]]]],[11,"vzip",E,E,10,[[],["v"]]],[11,"from",R[314],E,32,[[[T]],[T]]],[11,"into",E,E,32,[[],[U]]],[11,R[12],E,E,32,[[[U]],[R[15]]]],[11,R[13],E,E,32,[[],[R[15]]]],[11,R[14],E,E,32,[[["self"]],[T]]],[11,R[17],E,E,32,[[["self"]],[T]]],[11,R[16],E,E,32,[[["self"]],[R[18]]]],[11,"vzip",E,E,32,[[],["v"]]],[11,"from",E,E,51,[[[T]],[T]]],[11,R[32],E,E,51,[[["self"]],[T]]],[11,R[33],E,E,51,[[[T],["self"]]]],[11,"into",E,E,51,[[],[U]]],[11,R[12],E,E,51,[[[U]],[R[15]]]],[11,R[13],E,E,51,[[],[R[15]]]],[11,R[14],E,E,51,[[["self"]],[T]]],[11,R[17],E,E,51,[[["self"]],[T]]],[11,R[16],E,E,51,[[["self"]],[R[18]]]],[11,"vzip",E,E,51,[[],["v"]]],[11,"from",E,E,52,[[[T]],[T]]],[11,R[32],E,E,52,[[["self"]],[T]]],[11,R[33],E,E,52,[[[T],["self"]]]],[11,"into",E,E,52,[[],[U]]],[11,R[12],E,E,52,[[[U]],[R[15]]]],[11,R[13],E,E,52,[[],[R[15]]]],[11,R[14],E,E,52,[[["self"]],[T]]],[11,R[17],E,E,52,[[["self"]],[T]]],[11,R[16],E,E,52,[[["self"]],[R[18]]]],[11,"vzip",E,E,52,[[],["v"]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[32],E,E,34,[[["self"]],[T]]],[11,R[33],E,E,34,[[[T],["self"]]]],[11,"into",E,E,34,[[],[U]]],[11,R[12],E,E,34,[[[U]],[R[15]]]],[11,R[13],E,E,34,[[],[R[15]]]],[11,R[14],E,E,34,[[["self"]],[T]]],[11,R[17],E,E,34,[[["self"]],[T]]],[11,R[16],E,E,34,[[["self"]],[R[18]]]],[11,"vzip",E,E,34,[[],["v"]]],[11,"from",R[321],E,30,[[[T]],[T]]],[11,"into",E,E,30,[[],[U]]],[11,R[12],E,E,30,[[[U]],[R[15]]]],[11,R[13],E,E,30,[[],[R[15]]]],[11,R[14],E,E,30,[[["self"]],[T]]],[11,R[17],E,E,30,[[["self"]],[T]]],[11,R[16],E,E,30,[[["self"]],[R[18]]]],[11,"vzip",E,E,30,[[],["v"]]],[11,"from",E,E,53,[[[T]],[T]]],[11,R[81],E,E,53,[[["self"]],[R[2]]]],[11,"into",E,E,53,[[],[U]]],[11,R[12],E,E,53,[[[U]],[R[15]]]],[11,R[13],E,E,53,[[],[R[15]]]],[11,R[14],E,E,53,[[["self"]],[T]]],[11,R[17],E,E,53,[[["self"]],[T]]],[11,R[16],E,E,53,[[["self"]],[R[18]]]],[11,"vzip",E,E,53,[[],["v"]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[32],E,E,31,[[["self"]],[T]]],[11,R[33],E,E,31,[[[T],["self"]]]],[11,"into",E,E,31,[[],[U]]],[11,R[12],E,E,31,[[[U]],[R[15]]]],[11,R[13],E,E,31,[[],[R[15]]]],[11,R[14],E,E,31,[[["self"]],[T]]],[11,R[17],E,E,31,[[["self"]],[T]]],[11,R[16],E,E,31,[[["self"]],[R[18]]]],[11,"vzip",E,E,31,[[],["v"]]],[11,"from",R[322],E,33,[[[T]],[T]]],[11,R[32],E,E,33,[[["self"]],[T]]],[11,R[33],E,E,33,[[[T],["self"]]]],[11,"into",E,E,33,[[],[U]]],[11,R[12],E,E,33,[[[U]],[R[15]]]],[11,R[13],E,E,33,[[],[R[15]]]],[11,R[14],E,E,33,[[["self"]],[T]]],[11,R[17],E,E,33,[[["self"]],[T]]],[11,R[16],E,E,33,[[["self"]],[R[18]]]],[11,"vzip",E,E,33,[[],["v"]]],[11,"from",R[315],E,54,[[[T]],[T]]],[11,R[50],E,E,54,[[],["i"]]],[11,"into",E,E,54,[[],[U]]],[11,R[12],E,E,54,[[[U]],[R[15]]]],[11,R[13],E,E,54,[[],[R[15]]]],[11,R[14],E,E,54,[[["self"]],[T]]],[11,R[17],E,E,54,[[["self"]],[T]]],[11,R[16],E,E,54,[[["self"]],[R[18]]]],[11,"vzip",E,E,54,[[],["v"]]],[11,"from",R[323],E,35,[[[T]],[T]]],[11,R[32],E,E,35,[[["self"]],[T]]],[11,R[33],E,E,35,[[[T],["self"]]]],[11,"into",E,E,35,[[],[U]]],[11,R[12],E,E,35,[[[U]],[R[15]]]],[11,R[13],E,E,35,[[],[R[15]]]],[11,R[14],E,E,35,[[["self"]],[T]]],[11,R[17],E,E,35,[[["self"]],[T]]],[11,R[16],E,E,35,[[["self"]],[R[18]]]],[11,"vzip",E,E,35,[[],["v"]]],[11,"from",E,E,55,[[[T]],[T]]],[11,R[50],E,E,55,[[],["i"]]],[11,"into",E,E,55,[[],[U]]],[11,R[12],E,E,55,[[[U]],[R[15]]]],[11,R[13],E,E,55,[[],[R[15]]]],[11,R[14],E,E,55,[[["self"]],[T]]],[11,R[17],E,E,55,[[["self"]],[T]]],[11,R[16],E,E,55,[[["self"]],[R[18]]]],[11,"vzip",E,E,55,[[],["v"]]],[11,"from",E,E,56,[[[T]],[T]]],[11,R[32],E,E,56,[[["self"]],[T]]],[11,R[33],E,E,56,[[[T],["self"]]]],[11,R[50],E,E,56,[[],["i"]]],[11,"into",E,E,56,[[],[U]]],[11,R[12],E,E,56,[[[U]],[R[15]]]],[11,R[13],E,E,56,[[],[R[15]]]],[11,R[14],E,E,56,[[["self"]],[T]]],[11,R[17],E,E,56,[[["self"]],[T]]],[11,R[16],E,E,56,[[["self"]],[R[18]]]],[11,"vzip",E,E,56,[[],["v"]]],[11,"fmt","rand",E,40,[[["self"],[R[36]]],[["error"],[R[15],["error"]]]]],[11,"fmt",E,E,40,[[["self"],[R[36]]],[["error"],[R[15],["error"]]]]],[11,"from",E,E,40,[[[R[41]]],["error"]]],[11,"from",E,E,40,[[["error"]],["error"]]],[11,"source",E,E,40,[[["self"]],[[R[3],["error"]],["error"]]]],[11,"read",E,E,0,[[["self"]],[[R[15],["usize","error"]],["usize"],["error"]]]],[11,"new",R[319],E,48,[[["b2"],["b1"]],["self"]]],[11,R[303],E,E,48,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,48,[[["self"],["r"]]]],[11,R[324],E,E,48,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,48,[[["b2"],["b1"]],["self"]]],[11,R[303],E,E,48,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,48,[[["self"],["r"]]]],[11,R[324],E,E,48,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,48,[[["b2"],["b1"]],["self"]]],[11,R[303],E,E,48,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,48,[[["self"],["r"]]]],[11,R[324],E,E,48,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,48,[[["b2"],["b1"]],["self"]]],[11,R[303],E,E,48,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,48,[[["self"],["r"]]]],[11,R[324],E,E,48,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,48,[[["b2"],["b1"]],["self"]]],[11,R[303],E,E,48,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,48,[[["self"],["r"]]]],[11,R[324],E,E,48,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,48,[[["b2"],["b1"]],["self"]]],[11,R[303],E,E,48,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,48,[[["self"],["r"]]]],[11,R[324],E,E,48,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,48,[[["b2"],["b1"]],["self"]]],[11,R[303],E,E,48,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,48,[[["self"],["r"]]]],[11,R[324],E,E,48,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,48,[[["b2"],["b1"]],["self"]]],[11,R[303],E,E,48,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,48,[[["self"],["r"]]]],[11,R[324],E,E,48,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,48,[[["b2"],["b1"]],["self"]]],[11,R[303],E,E,48,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,48,[[["self"],["r"]]]],[11,R[324],E,E,48,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,48,[[["b2"],["b1"]],["self"]]],[11,R[303],E,E,48,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,48,[[["self"],["r"]]]],[11,R[324],E,E,48,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,48,[[["b2"],["b1"]],["self"]]],[11,R[303],E,E,48,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,48,[[["self"],["r"]]]],[11,R[324],E,E,48,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,48,[[["b2"],["b1"]],["self"]]],[11,R[303],E,E,48,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,48,[[["self"],["r"]]]],[11,R[324],E,E,48,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,49,[[["b2"],["b1"]],["self"]]],[11,R[303],E,E,49,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,49,[[["self"],["r"]]]],[11,R[324],E,E,49,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,49,[[["b2"],["b1"]],["self"]]],[11,R[303],E,E,49,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,49,[[["self"],["r"]]]],[11,R[324],E,E,49,[[["b2"],["b1"],["r"]]]],[11,"new",E,E,50,[[["b2"],["b1"]],["self"]]],[11,R[303],E,E,50,[[["b2"],["b1"]],["self"]]],[11,"sample",E,E,50,[[["self"],["r"]],["duration"]]],[11,"sample",E,E,6,[[["self"],["r"]],["x"]]],[11,"sample",R[305],E,7,[[["self"],["r"]],["bool"]]],[11,"sample",R[320],E,10,[[["self"],["r"]],["usize"]]],[11,"sample",R[311],E,11,[[["self"],["r"]],["usize"]]],[11,"sample",R[305],E,12,[[["self"],["r"]]]],[11,"sample",E,E,13,[[["self"],["r"]]]],[11,"sample",E,E,14,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,15,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,16,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,17,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,18,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,44,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,19,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,20,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,45,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,21,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,22,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,23,[[["self"],["r"]],["u64"]]],[11,"sample",E,E,24,[[["self"],["r"]],["u64"]]],[11,"sample",E,E,25,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,26,[[["self"],["r"]],[["vec",["f64"]],["f64"]]]],[11,"sample",E,E,27,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,28,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,47,[[["self"],["r"]],["f32"]]],[11,"sample",E,E,42,[[["self"],["r"]],["f32"]]],[11,"sample",E,E,43,[[["self"],["r"]],["f32"]]],[11,"sample",E,E,47,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,42,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,43,[[["self"],["r"]],["f64"]]],[11,"sample",E,E,47,[[["self"],["r"]],["u8"]]],[11,"sample",E,E,47,[[["self"],["r"]],["u16"]]],[11,"sample",E,E,47,[[["self"],["r"]],["u32"]]],[11,"sample",E,E,47,[[["self"],["r"]],["u64"]]],[11,"sample",E,E,47,[[["self"],["r"]],["u128"]]],[11,"sample",E,E,47,[[["self"],["r"]],["usize"]]],[11,"sample",E,E,47,[[["self"],["r"]],["i8"]]],[11,"sample",E,E,47,[[["self"],["r"]],["i16"]]],[11,"sample",E,E,47,[[["self"],["r"]],["i32"]]],[11,"sample",E,E,47,[[["self"],["r"]],["i64"]]],[11,"sample",E,E,47,[[["self"],["r"]],["i128"]]],[11,"sample",E,E,47,[[["self"],["r"]],["isize"]]],[11,"sample",E,E,47,[[["self"],["r"]],["nonzerou8"]]],[11,"sample",E,E,47,[[["self"],["r"]],["nonzerou16"]]],[11,"sample",E,E,47,[[["self"],["r"]],[R[41]]]],[11,"sample",E,E,47,[[["self"],["r"]],["nonzerou64"]]],[11,"sample",E,E,47,[[["self"],["r"]],["nonzerou128"]]],[11,"sample",E,E,47,[[["self"],["r"]],["nonzerousize"]]],[11,"sample",E,E,47,[[["self"],["r"]],["char"]]],[11,"sample",E,E,41,[[["self"],["r"]],["char"]]],[11,"sample",E,E,47,[[["self"],["r"]],["bool"]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]]]],[11,"sample",E,E,47,[[["self"],["r"]],[R[3]]]],[11,"sample",E,E,47,[[["self"],["r"]],["wrapping"]]],[11,"next",E,E,46,[[["self"]],[R[3]]]],[11,R[51],E,E,46,[[["self"]]]],[11,"next",R[323],E,55,[[["self"]],[[R[3],["usize"]],["usize"]]]],[11,R[51],E,E,55,[[["self"]]]],[11,"next",E,E,56,[[["self"]],[R[3]]]],[11,R[51],E,E,56,[[["self"]]]],[11,"next",R[315],E,54,[[["self"]],[R[3]]]],[11,R[51],E,E,54,[[["self"]]]],[11,"eq",R[305],E,2,[[["self"],[R[307]]],["bool"]]],[11,"eq",R[311],E,8,[[[R[310]],["self"]],["bool"]]],[11,"eq",R[323],E,35,[[[R[332]],["self"]],["bool"]]],[11,"from",R[319],E,6,[[["range"]],[R[325]]]],[11,"from",E,E,6,[[["rangeinclusive"]],[R[325]]]],[11,"from",R[323],E,35,[[["u32"],["vec",["u32"]]],["self"]]],[11,"from",E,E,35,[[["usize"],["vec",["usize"]]],["self"]]],[11,"clone",R[319],E,6,[[["self"]],[R[325]]]],[11,"clone",E,E,48,[[["self"]],["uniformint"]]],[11,"clone",E,E,49,[[["self"]],["uniformfloat"]]],[11,"clone",E,E,50,[[["self"]],["uniformduration"]]],[11,"clone",R[305],E,7,[[["self"]],[R[306]]]],[11,"clone",E,E,2,[[["self"]],[R[307]]]],[11,"clone",R[320],E,10,[[["self"]],["self"]]],[11,"clone",R[311],E,11,[[["self"]],[R[312]]]],[11,"clone",E,E,8,[[["self"]],[R[310]]]],[11,"clone",R[305],E,12,[[["self"]],[R[326]]]],[11,"clone",E,E,13,[[["self"]],[R[327]]]],[11,"clone",E,E,14,[[["self"]],["gamma"]]],[11,"clone",E,E,15,[[["self"]],[R[328]]]],[11,"clone",E,E,16,[[["self"]],["fisherf"]]],[11,"clone",E,E,17,[[["self"]],["studentt"]]],[11,"clone",E,E,18,[[["self"]],["beta"]]],[11,"clone",E,E,44,[[["self"]],["standardnormal"]]],[11,"clone",E,E,19,[[["self"]],["normal"]]],[11,"clone",E,E,20,[[["self"]],[R[329]]]],[11,"clone",E,E,45,[[["self"]],["exp1"]]],[11,"clone",E,E,21,[[["self"]],["exp"]]],[11,"clone",E,E,22,[[["self"]],["pareto"]]],[11,"clone",E,E,23,[[["self"]],["poisson"]]],[11,"clone",E,E,24,[[["self"]],["binomial"]]],[11,"clone",E,E,25,[[["self"]],["cauchy"]]],[11,"clone",E,E,26,[[["self"]],[R[313]]]],[11,"clone",E,E,27,[[["self"]],[R[330]]]],[11,"clone",E,E,28,[[["self"]],["weibull"]]],[11,"clone",E,E,42,[[["self"]],["openclosed01"]]],[11,"clone",E,E,43,[[["self"]],["open01"]]],[11,"clone",E,E,47,[[["self"]],["standard"]]],[11,"clone",R[321],E,31,[[["self"]],["reseedingrng"]]],[11,"clone",R[322],E,33,[[["self"]],["steprng"]]],[11,"clone",R[314],E,51,[[["self"]],["stdrng"]]],[11,"clone",E,E,52,[[["self"]],[R[331]]]],[11,"clone",E,E,34,[[["self"]],["osrng"]]],[11,"clone",R[323],E,35,[[["self"]],[R[332]]]],[11,"clone",E,E,56,[[["self"]],[R[333]]]],[11,R[23],R[314],E,32,[[],["self"]]],[11,R[23],E,E,52,[[],[R[331]]]],[11,R[23],E,E,34,[[],["osrng"]]],[11,"len",R[315],E,54,[[["self"]],["usize"]]],[11,"fmt",R[311],E,8,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[321],E,53,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[319],E,6,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,48,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,49,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,50,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[305],E,7,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,2,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[320],E,10,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[311],E,11,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,8,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[305],E,12,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,13,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,14,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,15,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,16,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,17,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,18,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,44,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,19,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,20,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,45,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,21,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,22,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,23,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,24,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,25,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,26,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,27,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,28,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,42,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,43,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,41,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,46,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,47,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[321],E,30,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,53,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,31,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[314],E,32,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[322],E,33,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[314],E,51,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,52,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,34,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[323],E,35,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,55,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,56,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[315],E,54,[[["self"],[R[36]]],[R[15]]]],[11,R[255],R[311],E,8,[[["self"]],["str"]]],[11,"cause",E,E,8,[[["self"]],[["error"],[R[3],["error"]]]]],[11,"source",R[321],E,53,[[["self"]],[["error"],[R[3],["error"]]]]],[11,R[83],E,E,30,[[["self"]],["u32"]]],[11,R[84],E,E,30,[[["self"]],["u64"]]],[11,R[85],E,E,30,[[["self"]]]],[11,R[86],E,E,30,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[83],E,E,31,[[["self"]],["u32"]]],[11,R[84],E,E,31,[[["self"]],["u64"]]],[11,R[85],E,E,31,[[["self"]]]],[11,R[86],E,E,31,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[83],R[314],E,32,[[["self"]],["u32"]]],[11,R[84],E,E,32,[[["self"]],["u64"]]],[11,R[85],E,E,32,[[["self"]]]],[11,R[86],E,E,32,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[83],R[322],E,33,[[["self"]],["u32"]]],[11,R[84],E,E,33,[[["self"]],["u64"]]],[11,R[85],E,E,33,[[["self"]]]],[11,R[86],E,E,33,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[83],R[314],E,51,[[["self"]],["u32"]]],[11,R[84],E,E,51,[[["self"]],["u64"]]],[11,R[85],E,E,51,[[["self"]]]],[11,R[86],E,E,51,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[83],E,E,52,[[["self"]],["u32"]]],[11,R[84],E,E,52,[[["self"]],["u64"]]],[11,R[85],E,E,52,[[["self"]]]],[11,R[86],E,E,52,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[83],E,E,34,[[["self"]],["u32"]]],[11,R[84],E,E,34,[[["self"]],["u64"]]],[11,R[85],E,E,34,[[["self"]]]],[11,R[86],E,E,34,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[87],E,E,51,[[],["self"]]],[11,R[89],E,E,51,[[[R[90]]],[["error"],[R[15],["error"]]]]],[11,"new","rand",R[365],40,[[["e"]],["error"]]],[11,"inner",E,R[366],40,[[["self"]],["error"]]],[11,R[367],E,R[368],40,[[],[["box",["error"]],["error"]]]],[11,"code",E,R[369],40,[[["self"]],[[R[41]],[R[3],[R[41]]]]]]],"p":[[8,"RngCore"],[8,R[96]],[4,R[334]],[8,R[335]],[8,R[336]],[8,R[337]],[3,"Uniform"],[3,R[338]],[4,R[339]],[8,"Weight"],[3,R[308]],[3,R[308]],[3,R[340]],[3,R[341]],[3,"Gamma"],[3,R[342]],[3,"FisherF"],[3,"StudentT"],[3,"Beta"],[3,"Normal"],[3,R[343]],[3,"Exp"],[3,"Pareto"],[3,"Poisson"],[3,"Binomial"],[3,"Cauchy"],[3,R[344]],[3,R[345]],[3,"Weibull"],[8,R[346]],[3,"ReadRng"],[3,R[347]],[3,R[348]],[3,"StepRng"],[3,"OsRng"],[4,"IndexVec"],[8,R[349]],[8,R[350]],[8,"Rng"],[8,R[351]],[3,"Error"],[3,R[352]],[3,R[353]],[3,"Open01"],[3,R[354]],[3,"Exp1"],[3,"DistIter"],[3,R[355]],[3,R[356]],[3,R[357]],[3,R[358]],[3,"StdRng"],[3,R[359]],[3,R[360]],[3,R[361]],[4,R[362]],[4,R[363]]]};
searchIndex["rand_chacha"]={"doc":"The ChaCha random number generator.","i":[[3,R[126],"rand_chacha","ChaCha with 12 rounds",N,N],[3,R[124],E,R[111],N,N],[3,R[127],E,R[118],N,N],[3,R[123],E,R[111],N,N],[3,R[128],E,"ChaCha with 8 rounds",N,N],[3,R[125],E,R[111],N,N],[11,R[112],E,R[113],0,[[["self"]],["u128"]]],[11,R[114],E,R[115],0,[[["self"],["u128"]]]],[11,R[116],E,R[117],0,[[["self"],["u64"]]]],[11,R[112],E,R[113],1,[[["self"]],["u128"]]],[11,R[114],E,R[115],1,[[["self"],["u128"]]]],[11,R[116],E,R[117],1,[[["self"],["u64"]]]],[11,R[112],E,R[113],2,[[["self"]],["u128"]]],[11,R[114],E,R[115],2,[[["self"],["u128"]]]],[11,R[116],E,R[117],2,[[["self"],["u64"]]]],[6,"ChaChaRng",E,R[118],N,N],[6,"ChaChaCore",E,"ChaCha with 20 rounds, low-level interface",N,N],[11,"from",E,E,3,[[[T]],[T]]],[11,R[32],E,E,3,[[["self"]],[T]]],[11,R[33],E,E,3,[[[T],["self"]]]],[11,"into",E,E,3,[[],[U]]],[11,R[12],E,E,3,[[[U]],[R[15]]]],[11,R[13],E,E,3,[[],[R[15]]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"]],[R[18]]]],[11,"vzip",E,E,3,[[],["v"]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[32],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[[T],["self"]]]],[11,"into",E,E,1,[[],[U]]],[11,R[12],E,E,1,[[[U]],[R[15]]]],[11,R[13],E,E,1,[[],[R[15]]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,"vzip",E,E,1,[[],["v"]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[32],E,E,4,[[["self"]],[T]]],[11,R[33],E,E,4,[[[T],["self"]]]],[11,"into",E,E,4,[[],[U]]],[11,R[12],E,E,4,[[[U]],[R[15]]]],[11,R[13],E,E,4,[[],[R[15]]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,[[["self"]],[R[18]]]],[11,"vzip",E,E,4,[[],["v"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[32],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,[[[T],["self"]]]],[11,"into",E,E,0,[[],[U]]],[11,R[12],E,E,0,[[[U]],[R[15]]]],[11,R[13],E,E,0,[[],[R[15]]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,"vzip",E,E,0,[[],["v"]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[32],E,E,5,[[["self"]],[T]]],[11,R[33],E,E,5,[[[T],["self"]]]],[11,"into",E,E,5,[[],[U]]],[11,R[12],E,E,5,[[[U]],[R[15]]]],[11,R[13],E,E,5,[[],[R[15]]]],[11,R[14],E,E,5,[[["self"]],[T]]],[11,R[17],E,E,5,[[["self"]],[T]]],[11,R[16],E,E,5,[[["self"]],[R[18]]]],[11,"vzip",E,E,5,[[],["v"]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[32],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,[[[T],["self"]]]],[11,"into",E,E,2,[[],[U]]],[11,R[12],E,E,2,[[[U]],[R[15]]]],[11,R[13],E,E,2,[[],[R[15]]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,"vzip",E,E,2,[[],["v"]]],[11,"from",E,E,0,[[[R[119]]],["self"]]],[11,"from",E,E,1,[[[R[120]]],["self"]]],[11,"from",E,E,2,[[[R[121]]],["self"]]],[11,"clone",E,E,4,[[["self"]],[R[119]]]],[11,"clone",E,E,0,[[["self"]],["chacha20rng"]]],[11,"clone",E,E,3,[[["self"]],[R[120]]]],[11,"clone",E,E,1,[[["self"]],["chacha12rng"]]],[11,"clone",E,E,5,[[["self"]],[R[121]]]],[11,"clone",E,E,2,[[["self"]],["chacha8rng"]]],[11,"fmt",E,E,4,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,0,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,3,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,1,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,5,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,2,[[["self"],[R[36]]],[R[15]]]],[11,R[122],E,E,4,[[["self"]]]],[11,R[122],E,E,3,[[["self"]]]],[11,R[122],E,E,5,[[["self"]]]],[11,R[83],E,E,0,[[["self"]],["u32"]]],[11,R[84],E,E,0,[[["self"]],["u64"]]],[11,R[85],E,E,0,[[["self"]]]],[11,R[86],E,E,0,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[83],E,E,1,[[["self"]],["u32"]]],[11,R[84],E,E,1,[[["self"]],["u64"]]],[11,R[85],E,E,1,[[["self"]]]],[11,R[86],E,E,1,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[83],E,E,2,[[["self"]],["u32"]]],[11,R[84],E,E,2,[[["self"]],["u64"]]],[11,R[85],E,E,2,[[["self"]]]],[11,R[86],E,E,2,[[["self"]],[[R[15],["error"]],["error"]]]],[11,R[87],E,E,4,[[],["self"]]],[11,R[87],E,E,0,[[],["self"]]],[11,R[87],E,E,3,[[],["self"]]],[11,R[87],E,E,1,[[],["self"]]],[11,R[87],E,E,5,[[],["self"]]],[11,R[87],E,E,2,[[],["self"]]]],"p":[[3,R[123]],[3,R[124]],[3,R[125]],[3,R[126]],[3,R[127]],[3,R[128]]]};
searchIndex["rand_core"]={"doc":"Random number generation traits","i":[[3,"Error",R[79],R[364],N,N],[11,"new",E,R[365],0,[[["e"]],["self"]]],[11,"inner",E,R[366],0,[[["self"]],["error"]]],[11,R[367],E,R[368],0,[[],[["error"],["box",["error"]]]]],[11,"code",E,R[369],0,[[["self"]],[[R[3],[R[41]]],[R[41]]]]],[0,"block",E,"The `BlockRngCore` trait and implementation helpers",N,N],[3,R[93],R[82],R[72],N,N],[12,"core",E,R[73],1,N],[3,R[94],E,R[72],N,N],[12,"core",E,R[73],2,N],[8,R[95],E,"A trait for RNGs which do not generate random numbers…",N,N],[16,"Item",E,"Results element type, e.g. `u32`.",3,N],[16,"Results",E,"Results type. This is the 'block' an RNG implementing…",3,N],[10,R[122],E,"Generate a new block of results.",3,[[["self"]]]],[11,"new",E,R[74],1,[[["r"]],[R[91]]]],[11,"index",E,R[75],1,[[["self"]],["usize"]]],[11,"reset",E,R[76],1,[[["self"]]]],[11,R[77],E,R[78],1,[[["self"],["usize"]]]],[11,"new",E,R[74],2,[[["r"]],[R[92]]]],[11,"index",E,R[75],2,[[["self"]],["usize"]]],[11,"reset",E,R[76],2,[[["self"]]]],[11,R[77],E,R[78],2,[[["self"],["usize"]]]],[0,"impls",R[79],"Helper functions for implementing `RngCore` functions.",N,N],[5,"next_u64_via_u32","rand_core::impls","Implement `next_u64` via `next_u32`, little-endian order.",N,[[["r"]],["u64"]]],[5,"fill_bytes_via_next",E,"Implement `fill_bytes` via `next_u64` and `next_u32`,…",N,[[["r"]]]],[5,"fill_via_u32_chunks",E,R[80],N,[[]]],[5,"fill_via_u64_chunks",E,R[80],N,[[]]],[5,"next_u32_via_fill",E,"Implement `next_u32` via `fill_bytes`, little-endian order.",N,[[["r"]],["u32"]]],[5,"next_u64_via_fill",E,"Implement `next_u64` via `fill_bytes`, little-endian order.",N,[[["r"]],["u64"]]],[0,"le",R[79],"Little-Endian utilities",N,N],[5,"read_u32_into","rand_core::le","Reads unsigned 32 bit integers from `src` into `dst`.…",N,[[]]],[5,"read_u64_into",E,"Reads unsigned 64 bit integers from `src` into `dst`.…",N,[[]]],[8,"RngCore",R[79],R[370],N,N],[10,R[83],E,R[371],4,[[["self"]],["u32"]]],[10,R[84],E,R[372],4,[[["self"]],["u64"]]],[10,R[85],E,R[373],4,[[["self"]]]],[10,R[86],E,R[374],4,[[["self"]],[["error"],[R[15],["error"]]]]],[8,R[375],E,R[376],N,N],[8,R[96],E,R[377],N,N],[16,"Seed",E,R[378],5,N],[10,R[87],E,R[379],5,[[],["self"]]],[11,R[88],E,R[380],5,[[["u64"]],["self"]]],[11,R[89],E,R[381],5,[[[R[90]]],[["error"],[R[15],["error"]]]]],[11,R[382],E,R[383],5,[[],["self"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[81],E,E,0,[[["self"]],[R[2]]]],[11,"into",E,E,0,[[],[U]]],[11,R[12],E,E,0,[[[U]],[R[15]]]],[11,R[13],E,E,0,[[],[R[15]]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,"from",R[82],E,1,[[[T]],[T]]],[11,R[32],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[[T],["self"]]]],[11,"into",E,E,1,[[],[U]]],[11,R[12],E,E,1,[[[U]],[R[15]]]],[11,R[13],E,E,1,[[],[R[15]]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[32],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,[[[T],["self"]]]],[11,"into",E,E,2,[[],[U]]],[11,R[12],E,E,2,[[[U]],[R[15]]]],[11,R[13],E,E,2,[[],[R[15]]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,R[83],E,E,1,[[["self"]],["u32"]]],[11,R[84],E,E,1,[[["self"]],["u64"]]],[11,R[85],E,E,1,[[["self"]]]],[11,R[86],E,E,1,[[["self"]],[["error"],[R[15],["error"]]]]],[11,R[83],E,E,2,[[["self"]],["u32"]]],[11,R[84],E,E,2,[[["self"]],["u64"]]],[11,R[85],E,E,2,[[["self"]]]],[11,R[86],E,E,2,[[["self"]],[["error"],[R[15],["error"]]]]],[11,R[87],E,E,1,[[],["self"]]],[11,R[88],E,E,1,[[["u64"]],["self"]]],[11,R[89],E,E,1,[[[R[90]]],[["error"],[R[15],["error"]]]]],[11,R[87],E,E,2,[[],["self"]]],[11,R[88],E,E,2,[[["u64"]],["self"]]],[11,R[89],E,E,2,[[[R[90]]],[["error"],[R[15],["error"]]]]],[11,"from",R[79],E,0,[[[R[41]]],["self"]]],[11,"from",E,E,0,[[["error"]],["self"]]],[11,"clone",R[82],E,1,[[["self"]],[R[91]]]],[11,"clone",E,E,2,[[["self"]],[R[92]]]],[11,"fmt",R[79],E,0,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,0,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[82],E,1,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,2,[[["self"],[R[36]]],[R[15]]]],[11,"read",R[79],E,4,[[["self"]],[["error"],["usize"],[R[15],["usize","error"]]]]],[11,"source",E,E,0,[[["self"]],[["error"],[R[3],["error"]]]]]],"p":[[3,"Error"],[3,R[93]],[3,R[94]],[8,R[95]],[8,"RngCore"],[8,R[96]]]};
searchIndex["regex"]={"doc":"This crate provides a library for parsing, compiling, and…","i":[[3,R[384],"regex",R[385],N,N],[3,R[386],E,R[387],N,N],[3,R[498],E,R[402],N,N],[3,R[403],E,R[404],N,N],[3,R[405],E,R[406],N,N],[3,R[407],E,R[408],N,N],[3,"Regex",E,"A compiled regular expression for matching Unicode strings.",N,N],[3,"Match",E,R[388],N,N],[3,R[497],E,"Captures represents a group of captured strings for a…",N,N],[3,R[394],E,R[395],N,N],[3,"Matches",E,R[389],N,N],[3,R[390],E,R[391],N,N],[3,R[398],E,R[399],N,N],[3,R[396],E,R[397],N,N],[3,R[400],E,R[401],N,N],[3,R[495],E,"`NoExpand` indicates literal string replacement.",N,N],[12,"0",E,E,0,N],[3,"Split",E,R[392],N,N],[3,"SplitN",E,R[393],N,N],[4,"Error",E,"An error that occurred during parsing or compiling a…",N,N],[13,"Syntax",E,"A syntax error.",1,N],[13,"CompiledTooBig",E,"The compiled program exceeded the set size limit. The…",1,N],[5,"escape",E,R[499],N,[[["str"]],[R[2]]]],[0,"bytes",E,"Match regular expressions on arbitrary bytes.",N,N],[3,R[384],R[422],R[385],N,N],[3,R[386],E,R[387],N,N],[3,"Match",E,R[388],N,N],[3,"Regex",E,"A compiled regular expression for matching arbitrary bytes.",N,N],[3,"Matches",E,R[389],N,N],[3,R[390],E,R[391],N,N],[3,"Split",E,R[392],N,N],[3,"SplitN",E,R[393],N,N],[3,R[394],E,R[395],N,N],[3,R[396],E,R[397],N,N],[3,R[497],E,"Captures represents a group of captured byte strings for a…",N,N],[3,R[398],E,R[399],N,N],[3,R[400],E,R[401],N,N],[3,R[495],E,"`NoExpand` indicates literal byte string replacement.",N,N],[12,"0",E,E,2,N],[3,R[498],E,R[402],N,N],[3,R[403],E,R[404],N,N],[3,R[405],E,R[406],N,N],[3,R[407],E,R[408],N,N],[8,R[496],E,R[489],N,N],[10,R[490],E,R[491],3,[[["self"],["vec"],[R[431]]]]],[11,R[426],E,R[427],3,[[["self"]],[["cow"],[R[3],["cow"]]]]],[11,"by_ref",E,R[428],3,[[["self"]],[R[429]]]],[11,"new",E,R[410],4,[[["str"]],[R[409]]]],[11,"build",E,R[411],4,[[["self"]],[[R[15],["regex","error"]],["regex"],["error"]]]],[11,R[217],E,R[412],4,[[["self"],["bool"]],[R[409]]]],[11,R[218],E,R[413],4,[[["self"],["bool"]],[R[409]]]],[11,R[219],E,R[414],4,[[["self"],["bool"]],[R[409]]]],[11,R[220],E,R[415],4,[[["self"],["bool"]],[R[409]]]],[11,R[215],E,R[416],4,[[["self"],["bool"]],[R[409]]]],[11,R[500],E,R[417],4,[[["self"],["bool"]],[R[409]]]],[11,"octal",E,R[213],4,[[["self"],["bool"]],[R[409]]]],[11,R[418],E,R[419],4,[[["self"],["usize"]],[R[409]]]],[11,R[420],E,R[421],4,[[["self"],["usize"]],[R[409]]]],[11,R[211],E,R[212],4,[[["self"],["u32"]],[R[409]]]],[11,"new","regex",R[410],5,[[["str"]],[R[409]]]],[11,"build",E,R[411],5,[[["self"]],[["regex"],[R[15],["regex","error"]],["error"]]]],[11,R[217],E,R[412],5,[[["self"],["bool"]],[R[409]]]],[11,R[218],E,R[413],5,[[["self"],["bool"]],[R[409]]]],[11,R[219],E,R[414],5,[[["self"],["bool"]],[R[409]]]],[11,R[220],E,R[415],5,[[["self"],["bool"]],[R[409]]]],[11,R[215],E,R[416],5,[[["self"],["bool"]],[R[409]]]],[11,R[500],E,R[417],5,[[["self"],["bool"]],[R[409]]]],[11,"octal",E,R[213],5,[[["self"],["bool"]],[R[409]]]],[11,R[418],E,R[419],5,[[["self"],["usize"]],[R[409]]]],[11,R[420],E,R[421],5,[[["self"],["usize"]],[R[409]]]],[11,R[211],E,R[212],5,[[["self"],["u32"]],[R[409]]]],[11,"new",R[422],R[410],6,[[["i"]],[R[423]]]],[11,"build",E,R[424],6,[[["self"]],[[R[425]],["error"],[R[15],[R[425],"error"]]]]],[11,R[217],E,R[412],6,[[["self"],["bool"]],[R[423]]]],[11,R[218],E,R[413],6,[[["self"],["bool"]],[R[423]]]],[11,R[219],E,R[414],6,[[["self"],["bool"]],[R[423]]]],[11,R[220],E,R[415],6,[[["self"],["bool"]],[R[423]]]],[11,R[215],E,R[416],6,[[["self"],["bool"]],[R[423]]]],[11,R[500],E,R[417],6,[[["self"],["bool"]],[R[423]]]],[11,"octal",E,R[213],6,[[["self"],["bool"]],[R[423]]]],[11,R[418],E,R[419],6,[[["self"],["usize"]],[R[423]]]],[11,R[420],E,R[421],6,[[["self"],["usize"]],[R[423]]]],[11,R[211],E,R[212],6,[[["self"],["u32"]],[R[423]]]],[11,"new","regex",R[410],7,[[["i"]],[R[423]]]],[11,"build",E,R[424],7,[[["self"]],[[R[425]],[R[15],[R[425],"error"]],["error"]]]],[11,R[217],E,R[412],7,[[["self"],["bool"]],[R[423]]]],[11,R[218],E,R[413],7,[[["self"],["bool"]],[R[423]]]],[11,R[219],E,R[414],7,[[["self"],["bool"]],[R[423]]]],[11,R[220],E,R[415],7,[[["self"],["bool"]],[R[423]]]],[11,R[215],E,R[416],7,[[["self"],["bool"]],[R[423]]]],[11,R[500],E,R[417],7,[[["self"],["bool"]],[R[423]]]],[11,"octal",E,R[213],7,[[["self"],["bool"]],[R[423]]]],[11,R[418],E,R[419],7,[[["self"],["usize"]],[R[423]]]],[11,R[420],E,R[421],7,[[["self"],["usize"]],[R[423]]]],[11,R[211],E,R[212],7,[[["self"],["u32"]],[R[423]]]],[11,R[426],R[422],R[427],3,[[["self"]],[["cow"],[R[3],["cow"]]]]],[11,"by_ref",E,R[428],3,[[["self"]],[R[429]]]],[11,"start",E,R[448],8,[[["self"]],["usize"]]],[11,"end",E,R[449],8,[[["self"]],["usize"]]],[11,"as_bytes",E,R[450],8,[[["self"]]]],[11,"new",E,R[451],9,[[["str"]],[[R[15],["regex","error"]],["regex"],["error"]]]],[11,R[435],E,R[452],9,[[["self"]],["bool"]]],[11,"find",E,R[453],9,[[["self"]],[[R[3],["match"]],["match"]]]],[11,R[430],E,R[454],9,[[["self"]],[R[501]]]],[11,R[431],E,R[455],9,[[["self"]],[[R[3],[R[431]]],[R[431]]]]],[11,R[456],E,R[457],9,[[["self"]],[R[458]]]],[11,"split",E,R[459],9,[[["self"]],["split"]]],[11,"splitn",E,R[460],9,[[["self"],["usize"]],["splitn"]]],[11,"replace",E,R[461],9,[[["self"],[R[433]]],["cow"]]],[11,R[432],E,R[462],9,[[["self"],[R[433]]],["cow"]]],[11,"replacen",E,R[463],9,[[["usize"],["self"],[R[433]]],["cow"]]],[11,R[464],E,R[465],9,[[["self"]],[[R[3],["usize"]],["usize"]]]],[11,R[466],E,R[467],9,[[["self"],["usize"]],[[R[3],["usize"]],["usize"]]]],[11,R[468],E,R[469],9,[[["self"],["usize"]],["bool"]]],[11,"find_at",E,R[470],9,[[["self"],["usize"]],[[R[3],["match"]],["match"]]]],[11,R[471],E,R[472],9,[[["self"],[R[434]]],[[R[3],["match"]],["match"]]]],[11,R[473],E,"Returns the same as `captures_read`, but starts the search…",9,[[["usize"],["self"],[R[434]]],[[R[3],["match"]],["match"]]]],[11,"as_str",E,R[474],9,[[["self"]],["str"]]],[11,R[475],E,R[476],9,[[["self"]],[R[477]]]],[11,R[478],E,R[479],9,[[["self"]],["usize"]]],[11,R[480],E,R[481],9,[[["self"]],[R[434]]]],[11,"get",E,R[482],10,[[["self"],["usize"]],[R[3]]]],[11,"len",E,R[483],10,[[["self"]],["usize"]]],[11,"get",E,R[484],11,[[["self"],["usize"]],[[R[3],["match"]],["match"]]]],[11,"name",E,R[485],11,[[["self"],["str"]],[[R[3],["match"]],["match"]]]],[11,"iter",E,R[399],11,[[["self"]],[R[486]]]],[11,"expand",E,R[487],11,[[["self"],["vec"]]]],[11,"len",E,R[488],11,[[["self"]],["usize"]]],[11,"new","regex",R[436],12,[[["i"]],[[R[425]],[R[15],[R[425],"error"]],["error"]]]],[11,R[435],E,R[437],12,[[["self"],["str"]],["bool"]]],[11,R[501],E,R[438],12,[[["self"],["str"]],[R[439]]]],[11,"len",E,R[440],12,[[["self"]],["usize"]]],[11,"patterns",E,R[441],12,[[["self"]]]],[11,R[442],E,R[443],13,[[["self"]],["bool"]]],[11,"matched",E,R[444],13,[[["self"],["usize"]],["bool"]]],[11,"len",E,R[445],13,[[["self"]],["usize"]]],[11,"iter",E,R[446],13,[[["self"]],[R[447]]]],[11,"new",R[422],R[436],14,[[["i"]],[[R[425]],["error"],[R[15],[R[425],"error"]]]]],[11,R[435],E,R[437],14,[[["self"]],["bool"]]],[11,R[501],E,R[438],14,[[["self"]],[R[439]]]],[11,"len",E,R[440],14,[[["self"]],["usize"]]],[11,"patterns",E,R[441],14,[[["self"]]]],[11,R[442],E,R[443],15,[[["self"]],["bool"]]],[11,"matched",E,R[444],15,[[["self"],["usize"]],["bool"]]],[11,"len",E,R[445],15,[[["self"]],["usize"]]],[11,"iter",E,R[446],15,[[["self"]],[R[447]]]],[11,"start","regex",R[448],16,[[["self"]],["usize"]]],[11,"end",E,R[449],16,[[["self"]],["usize"]]],[11,"as_str",E,R[450],16,[[["self"]],["str"]]],[11,"new",E,R[451],17,[[["str"]],[["regex"],[R[15],["regex","error"]],["error"]]]],[11,R[435],E,R[452],17,[[["self"],["str"]],["bool"]]],[11,"find",E,R[453],17,[[["str"],["self"]],[[R[3],["match"]],["match"]]]],[11,R[430],E,R[454],17,[[["self"],["str"]],[R[501]]]],[11,R[431],E,R[455],17,[[["str"],["self"]],[[R[431]],[R[3],[R[431]]]]]],[11,R[456],E,R[457],17,[[["self"],["str"]],[R[458]]]],[11,"split",E,R[459],17,[[["self"],["str"]],["split"]]],[11,"splitn",E,R[460],17,[[["self"],["str"],["usize"]],["splitn"]]],[11,"replace",E,R[461],17,[[["str"],["self"],[R[433]]],[["str"],["cow",["str"]]]]],[11,R[432],E,R[462],17,[[["str"],["self"],[R[433]]],[["str"],["cow",["str"]]]]],[11,"replacen",E,R[463],17,[[["usize"],["str"],["self"],[R[433]]],[["str"],["cow",["str"]]]]],[11,R[464],E,R[465],17,[[["self"],["str"]],[[R[3],["usize"]],["usize"]]]],[11,R[466],E,R[467],17,[[["self"],["usize"],["str"]],[[R[3],["usize"]],["usize"]]]],[11,R[468],E,R[469],17,[[["self"],["usize"],["str"]],["bool"]]],[11,"find_at",E,R[470],17,[[["str"],["self"],["usize"]],[[R[3],["match"]],["match"]]]],[11,R[471],E,R[472],17,[[["str"],["self"],[R[434]]],[[R[3],["match"]],["match"]]]],[11,R[473],E,"Returns the same as captures, but starts the search at the…",17,[[["usize"],["str"],["self"],[R[434]]],[[R[3],["match"]],["match"]]]],[11,"as_str",E,R[474],17,[[["self"]],["str"]]],[11,R[475],E,R[476],17,[[["self"]],[R[477]]]],[11,R[478],E,R[479],17,[[["self"]],["usize"]]],[11,R[480],E,R[481],17,[[["self"]],[R[434]]]],[11,"get",E,R[482],18,[[["self"],["usize"]],[R[3]]]],[11,"len",E,R[483],18,[[["self"]],["usize"]]],[11,"get",E,R[484],19,[[["self"],["usize"]],[[R[3],["match"]],["match"]]]],[11,"name",E,R[485],19,[[["self"],["str"]],[[R[3],["match"]],["match"]]]],[11,"iter",E,R[399],19,[[["self"]],[R[486]]]],[11,"expand",E,R[487],19,[[["self"],[R[2]],["str"]]]],[11,"len",E,R[488],19,[[["self"]],["usize"]]],[8,R[496],E,R[489],N,N],[10,R[490],E,R[491],20,[[["self"],[R[431]],[R[2]]]]],[11,R[426],E,R[494],20,[[["self"]],[[R[3],["cow"]],["cow",["str"]]]]],[11,"by_ref",E,R[428],20,[[["self"]],[R[429]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,"into",E,E,5,[[],[U]]],[11,R[12],E,E,5,[[[U]],[R[15]]]],[11,R[13],E,E,5,[[],[R[15]]]],[11,R[14],E,E,5,[[["self"]],[T]]],[11,R[17],E,E,5,[[["self"]],[T]]],[11,R[16],E,E,5,[[["self"]],[R[18]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,"into",E,E,7,[[],[U]]],[11,R[12],E,E,7,[[[U]],[R[15]]]],[11,R[13],E,E,7,[[],[R[15]]]],[11,R[14],E,E,7,[[["self"]],[T]]],[11,R[17],E,E,7,[[["self"]],[T]]],[11,R[16],E,E,7,[[["self"]],[R[18]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[32],E,E,12,[[["self"]],[T]]],[11,R[33],E,E,12,[[[T],["self"]]]],[11,"into",E,E,12,[[],[U]]],[11,R[12],E,E,12,[[[U]],[R[15]]]],[11,R[13],E,E,12,[[],[R[15]]]],[11,R[14],E,E,12,[[["self"]],[T]]],[11,R[17],E,E,12,[[["self"]],[T]]],[11,R[16],E,E,12,[[["self"]],[R[18]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[32],E,E,13,[[["self"]],[T]]],[11,R[33],E,E,13,[[[T],["self"]]]],[11,R[50],E,E,13,[[],["i"]]],[11,"into",E,E,13,[[],[U]]],[11,R[12],E,E,13,[[[U]],[R[15]]]],[11,R[13],E,E,13,[[],[R[15]]]],[11,R[14],E,E,13,[[["self"]],[T]]],[11,R[17],E,E,13,[[["self"]],[T]]],[11,R[16],E,E,13,[[["self"]],[R[18]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[50],E,E,21,[[],["i"]]],[11,"into",E,E,21,[[],[U]]],[11,R[12],E,E,21,[[[U]],[R[15]]]],[11,R[13],E,E,21,[[],[R[15]]]],[11,R[14],E,E,21,[[["self"]],[T]]],[11,R[17],E,E,21,[[["self"]],[T]]],[11,R[16],E,E,21,[[["self"]],[R[18]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[32],E,E,22,[[["self"]],[T]]],[11,R[33],E,E,22,[[[T],["self"]]]],[11,R[50],E,E,22,[[],["i"]]],[11,"into",E,E,22,[[],[U]]],[11,R[12],E,E,22,[[[U]],[R[15]]]],[11,R[13],E,E,22,[[],[R[15]]]],[11,R[14],E,E,22,[[["self"]],[T]]],[11,R[17],E,E,22,[[["self"]],[T]]],[11,R[16],E,E,22,[[["self"]],[R[18]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[32],E,E,17,[[["self"]],[T]]],[11,R[33],E,E,17,[[[T],["self"]]]],[11,R[81],E,E,17,[[["self"]],[R[2]]]],[11,"into",E,E,17,[[],[U]]],[11,R[12],E,E,17,[[[U]],[R[15]]]],[11,R[13],E,E,17,[[],[R[15]]]],[11,R[14],E,E,17,[[["self"]],[T]]],[11,R[17],E,E,17,[[["self"]],[T]]],[11,R[16],E,E,17,[[["self"]],[R[18]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[32],E,E,16,[[["self"]],[T]]],[11,R[33],E,E,16,[[[T],["self"]]]],[11,"into",E,E,16,[[],[U]]],[11,R[12],E,E,16,[[[U]],[R[15]]]],[11,R[13],E,E,16,[[],[R[15]]]],[11,R[14],E,E,16,[[["self"]],[T]]],[11,R[17],E,E,16,[[["self"]],[T]]],[11,R[16],E,E,16,[[["self"]],[R[18]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,"into",E,E,19,[[],[U]]],[11,R[12],E,E,19,[[[U]],[R[15]]]],[11,R[13],E,E,19,[[],[R[15]]]],[11,R[14],E,E,19,[[["self"]],[T]]],[11,R[17],E,E,19,[[["self"]],[T]]],[11,R[16],E,E,19,[[["self"]],[R[18]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[50],E,E,23,[[],["i"]]],[11,"into",E,E,23,[[],[U]]],[11,R[12],E,E,23,[[[U]],[R[15]]]],[11,R[13],E,E,23,[[],[R[15]]]],[11,R[14],E,E,23,[[["self"]],[T]]],[11,R[17],E,E,23,[[["self"]],[T]]],[11,R[16],E,E,23,[[["self"]],[R[18]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[50],E,E,24,[[],["i"]]],[11,"into",E,E,24,[[],[U]]],[11,R[12],E,E,24,[[[U]],[R[15]]]],[11,R[13],E,E,24,[[],[R[15]]]],[11,R[14],E,E,24,[[["self"]],[T]]],[11,R[17],E,E,24,[[["self"]],[T]]],[11,R[16],E,E,24,[[["self"]],[R[18]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[50],E,E,25,[[],["i"]]],[11,"into",E,E,25,[[],[U]]],[11,R[12],E,E,25,[[[U]],[R[15]]]],[11,R[13],E,E,25,[[],[R[15]]]],[11,R[14],E,E,25,[[["self"]],[T]]],[11,R[17],E,E,25,[[["self"]],[T]]],[11,R[16],E,E,25,[[["self"]],[R[18]]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[50],E,E,26,[[],["i"]]],[11,"into",E,E,26,[[],[U]]],[11,R[12],E,E,26,[[[U]],[R[15]]]],[11,R[13],E,E,26,[[],[R[15]]]],[11,R[14],E,E,26,[[["self"]],[T]]],[11,R[17],E,E,26,[[["self"]],[T]]],[11,R[16],E,E,26,[[["self"]],[R[18]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[32],E,E,18,[[["self"]],[T]]],[11,R[33],E,E,18,[[[T],["self"]]]],[11,"into",E,E,18,[[],[U]]],[11,R[12],E,E,18,[[[U]],[R[15]]]],[11,R[13],E,E,18,[[],[R[15]]]],[11,R[14],E,E,18,[[["self"]],[T]]],[11,R[17],E,E,18,[[["self"]],[T]]],[11,R[16],E,E,18,[[["self"]],[R[18]]]],[11,"from",E,E,27,[[[T]],[T]]],[11,"into",E,E,27,[[],[U]]],[11,R[12],E,E,27,[[[U]],[R[15]]]],[11,R[13],E,E,27,[[],[R[15]]]],[11,R[14],E,E,27,[[["self"]],[T]]],[11,R[17],E,E,27,[[["self"]],[T]]],[11,R[16],E,E,27,[[["self"]],[R[18]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[12],E,E,0,[[[U]],[R[15]]]],[11,R[13],E,E,0,[[],[R[15]]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[50],E,E,28,[[],["i"]]],[11,"into",E,E,28,[[],[U]]],[11,R[12],E,E,28,[[[U]],[R[15]]]],[11,R[13],E,E,28,[[],[R[15]]]],[11,R[14],E,E,28,[[["self"]],[T]]],[11,R[17],E,E,28,[[["self"]],[T]]],[11,R[16],E,E,28,[[["self"]],[R[18]]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[50],E,E,29,[[],["i"]]],[11,"into",E,E,29,[[],[U]]],[11,R[12],E,E,29,[[[U]],[R[15]]]],[11,R[13],E,E,29,[[],[R[15]]]],[11,R[14],E,E,29,[[["self"]],[T]]],[11,R[17],E,E,29,[[["self"]],[T]]],[11,R[16],E,E,29,[[["self"]],[R[18]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[32],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[[T],["self"]]]],[11,R[81],E,E,1,[[["self"]],[R[2]]]],[11,"into",E,E,1,[[],[U]]],[11,R[12],E,E,1,[[[U]],[R[15]]]],[11,R[13],E,E,1,[[],[R[15]]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,"from",R[422],E,4,[[[T]],[T]]],[11,"into",E,E,4,[[],[U]]],[11,R[12],E,E,4,[[[U]],[R[15]]]],[11,R[13],E,E,4,[[],[R[15]]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,[[["self"]],[R[18]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,"into",E,E,6,[[],[U]]],[11,R[12],E,E,6,[[[U]],[R[15]]]],[11,R[13],E,E,6,[[],[R[15]]]],[11,R[14],E,E,6,[[["self"]],[T]]],[11,R[17],E,E,6,[[["self"]],[T]]],[11,R[16],E,E,6,[[["self"]],[R[18]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[32],E,E,8,[[["self"]],[T]]],[11,R[33],E,E,8,[[[T],["self"]]]],[11,"into",E,E,8,[[],[U]]],[11,R[12],E,E,8,[[[U]],[R[15]]]],[11,R[13],E,E,8,[[],[R[15]]]],[11,R[14],E,E,8,[[["self"]],[T]]],[11,R[17],E,E,8,[[["self"]],[T]]],[11,R[16],E,E,8,[[["self"]],[R[18]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[32],E,E,9,[[["self"]],[T]]],[11,R[33],E,E,9,[[[T],["self"]]]],[11,R[81],E,E,9,[[["self"]],[R[2]]]],[11,"into",E,E,9,[[],[U]]],[11,R[12],E,E,9,[[[U]],[R[15]]]],[11,R[13],E,E,9,[[],[R[15]]]],[11,R[14],E,E,9,[[["self"]],[T]]],[11,R[17],E,E,9,[[["self"]],[T]]],[11,R[16],E,E,9,[[["self"]],[R[18]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[50],E,E,30,[[],["i"]]],[11,"into",E,E,30,[[],[U]]],[11,R[12],E,E,30,[[[U]],[R[15]]]],[11,R[13],E,E,30,[[],[R[15]]]],[11,R[14],E,E,30,[[["self"]],[T]]],[11,R[17],E,E,30,[[["self"]],[T]]],[11,R[16],E,E,30,[[["self"]],[R[18]]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[50],E,E,31,[[],["i"]]],[11,"into",E,E,31,[[],[U]]],[11,R[12],E,E,31,[[[U]],[R[15]]]],[11,R[13],E,E,31,[[],[R[15]]]],[11,R[14],E,E,31,[[["self"]],[T]]],[11,R[17],E,E,31,[[["self"]],[T]]],[11,R[16],E,E,31,[[["self"]],[R[18]]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[50],E,E,32,[[],["i"]]],[11,"into",E,E,32,[[],[U]]],[11,R[12],E,E,32,[[[U]],[R[15]]]],[11,R[13],E,E,32,[[],[R[15]]]],[11,R[14],E,E,32,[[["self"]],[T]]],[11,R[17],E,E,32,[[["self"]],[T]]],[11,R[16],E,E,32,[[["self"]],[R[18]]]],[11,"from",E,E,33,[[[T]],[T]]],[11,R[50],E,E,33,[[],["i"]]],[11,"into",E,E,33,[[],[U]]],[11,R[12],E,E,33,[[[U]],[R[15]]]],[11,R[13],E,E,33,[[],[R[15]]]],[11,R[14],E,E,33,[[["self"]],[T]]],[11,R[17],E,E,33,[[["self"]],[T]]],[11,R[16],E,E,33,[[["self"]],[R[18]]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[50],E,E,34,[[],["i"]]],[11,"into",E,E,34,[[],[U]]],[11,R[12],E,E,34,[[[U]],[R[15]]]],[11,R[13],E,E,34,[[],[R[15]]]],[11,R[14],E,E,34,[[["self"]],[T]]],[11,R[17],E,E,34,[[["self"]],[T]]],[11,R[16],E,E,34,[[["self"]],[R[18]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[32],E,E,10,[[["self"]],[T]]],[11,R[33],E,E,10,[[[T],["self"]]]],[11,"into",E,E,10,[[],[U]]],[11,R[12],E,E,10,[[[U]],[R[15]]]],[11,R[13],E,E,10,[[],[R[15]]]],[11,R[14],E,E,10,[[["self"]],[T]]],[11,R[17],E,E,10,[[["self"]],[T]]],[11,R[16],E,E,10,[[["self"]],[R[18]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,"into",E,E,11,[[],[U]]],[11,R[12],E,E,11,[[[U]],[R[15]]]],[11,R[13],E,E,11,[[],[R[15]]]],[11,R[14],E,E,11,[[["self"]],[T]]],[11,R[17],E,E,11,[[["self"]],[T]]],[11,R[16],E,E,11,[[["self"]],[R[18]]]],[11,"from",E,E,35,[[[T]],[T]]],[11,R[50],E,E,35,[[],["i"]]],[11,"into",E,E,35,[[],[U]]],[11,R[12],E,E,35,[[[U]],[R[15]]]],[11,R[13],E,E,35,[[],[R[15]]]],[11,R[14],E,E,35,[[["self"]],[T]]],[11,R[17],E,E,35,[[["self"]],[T]]],[11,R[16],E,E,35,[[["self"]],[R[18]]]],[11,"from",E,E,36,[[[T]],[T]]],[11,"into",E,E,36,[[],[U]]],[11,R[12],E,E,36,[[[U]],[R[15]]]],[11,R[13],E,E,36,[[],[R[15]]]],[11,R[14],E,E,36,[[["self"]],[T]]],[11,R[17],E,E,36,[[["self"]],[T]]],[11,R[16],E,E,36,[[["self"]],[R[18]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,"into",E,E,2,[[],[U]]],[11,R[12],E,E,2,[[[U]],[R[15]]]],[11,R[13],E,E,2,[[],[R[15]]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[32],E,E,14,[[["self"]],[T]]],[11,R[33],E,E,14,[[[T],["self"]]]],[11,"into",E,E,14,[[],[U]]],[11,R[12],E,E,14,[[[U]],[R[15]]]],[11,R[13],E,E,14,[[],[R[15]]]],[11,R[14],E,E,14,[[["self"]],[T]]],[11,R[17],E,E,14,[[["self"]],[T]]],[11,R[16],E,E,14,[[["self"]],[R[18]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[32],E,E,15,[[["self"]],[T]]],[11,R[33],E,E,15,[[[T],["self"]]]],[11,R[50],E,E,15,[[],["i"]]],[11,"into",E,E,15,[[],[U]]],[11,R[12],E,E,15,[[[U]],[R[15]]]],[11,R[13],E,E,15,[[],[R[15]]]],[11,R[14],E,E,15,[[["self"]],[T]]],[11,R[17],E,E,15,[[["self"]],[T]]],[11,R[16],E,E,15,[[["self"]],[R[18]]]],[11,"from",E,E,37,[[[T]],[T]]],[11,R[50],E,E,37,[[],["i"]]],[11,"into",E,E,37,[[],[U]]],[11,R[12],E,E,37,[[[U]],[R[15]]]],[11,R[13],E,E,37,[[],[R[15]]]],[11,R[14],E,E,37,[[["self"]],[T]]],[11,R[17],E,E,37,[[["self"]],[T]]],[11,R[16],E,E,37,[[["self"]],[R[18]]]],[11,"from",E,E,38,[[[T]],[T]]],[11,R[32],E,E,38,[[["self"]],[T]]],[11,R[33],E,E,38,[[[T],["self"]]]],[11,R[50],E,E,38,[[],["i"]]],[11,"into",E,E,38,[[],[U]]],[11,R[12],E,E,38,[[[U]],[R[15]]]],[11,R[13],E,E,38,[[],[R[15]]]],[11,R[14],E,E,38,[[["self"]],[T]]],[11,R[17],E,E,38,[[["self"]],[T]]],[11,R[16],E,E,38,[[["self"]],[R[18]]]],[11,R[490],E,E,36,[[["self"],["vec"],[R[431]]]]],[11,R[426],E,E,36,[[["self"]],[["cow"],[R[3],["cow"]]]]],[11,R[490],E,E,2,[[["self"],["vec"],[R[431]]]]],[11,R[426],E,E,2,[[["self"]],[["cow"],[R[3],["cow"]]]]],[11,R[490],"regex",E,27,[[["self"],[R[431]],[R[2]]]]],[11,R[426],E,E,27,[[["self"]],[[R[3],["cow"]],["cow",["str"]]]]],[11,R[490],E,E,0,[[["self"],[R[431]],[R[2]]]]],[11,R[426],E,E,0,[[["self"]],[[R[3],["cow"]],["cow",["str"]]]]],[11,R[63],E,E,21,[[["self"]],[[R[3],["usize"]],["usize"]]]],[11,R[63],E,E,22,[[["self"]],[[R[3],["usize"]],["usize"]]]],[11,R[63],R[422],E,37,[[["self"]],[[R[3],["usize"]],["usize"]]]],[11,R[63],E,E,38,[[["self"]],[[R[3],["usize"]],["usize"]]]],[11,"next",E,E,30,[[["self"]],[[R[3],["match"]],["match"]]]],[11,"next",E,E,31,[[["self"]],[[R[3],[R[431]]],[R[431]]]]],[11,"next",E,E,32,[[["self"]],[R[3]]]],[11,"next",E,E,33,[[["self"]],[R[3]]]],[11,"next",E,E,34,[[["self"]],[[R[3],["str"]],[R[3],[R[3]]]]]],[11,R[51],E,E,34,[[["self"]]]],[11,"next",E,E,35,[[["self"]],[[R[3],[R[3]]],[R[3],["match"]]]]],[11,"next","regex",E,21,[[["self"]],[[R[3],["usize"]],["usize"]]]],[11,R[51],E,E,21,[[["self"]]]],[11,"next",E,E,22,[[["self"]],[[R[3],["usize"]],["usize"]]]],[11,R[51],E,E,22,[[["self"]]]],[11,"next",R[422],E,37,[[["self"]],[[R[3],["usize"]],["usize"]]]],[11,R[51],E,E,37,[[["self"]]]],[11,"next",E,E,38,[[["self"]],[[R[3],["usize"]],["usize"]]]],[11,R[51],E,E,38,[[["self"]]]],[11,"next","regex",E,23,[[["self"]],[[R[3],["str"]],[R[3],[R[3]]]]]],[11,R[51],E,E,23,[[["self"]]]],[11,"next",E,E,28,[[["self"]],[["str"],[R[3],["str"]]]]],[11,"next",E,E,29,[[["self"]],[["str"],[R[3],["str"]]]]],[11,"next",E,E,26,[[["self"]],[[R[3],[R[3]]],[R[3],["match"]]]]],[11,"next",E,E,25,[[["self"]],[[R[431]],[R[3],[R[431]]]]]],[11,"next",E,E,24,[[["self"]],[[R[3],["match"]],["match"]]]],[11,"eq",E,E,1,[[["self"],["error"]],["bool"]]],[11,"ne",E,E,1,[[["self"],["error"]],["bool"]]],[11,"eq",R[422],E,8,[[["self"],["match"]],["bool"]]],[11,"ne",E,E,8,[[["self"],["match"]],["bool"]]],[11,"eq","regex",E,16,[[["self"],["match"]],["bool"]]],[11,"ne",E,E,16,[[["self"],["match"]],["bool"]]],[11,"clone",E,E,1,[[["self"]],["error"]]],[11,"clone",R[422],E,8,[[["self"]],["match"]]],[11,"clone",E,E,9,[[["self"]],["regex"]]],[11,"clone",E,E,10,[[["self"]],[R[434]]]],[11,"clone","regex",E,12,[[["self"]],[R[425]]]],[11,"clone",E,E,13,[[["self"]],[R[439]]]],[11,"clone",E,E,22,[[["self"]],[R[447]]]],[11,"clone",R[422],E,14,[[["self"]],[R[425]]]],[11,"clone",E,E,15,[[["self"]],[R[439]]]],[11,"clone",E,E,38,[[["self"]],[R[447]]]],[11,"clone","regex",E,16,[[["self"]],["match"]]],[11,"clone",E,E,17,[[["self"]],["regex"]]],[11,"clone",E,E,18,[[["self"]],[R[434]]]],[11,R[50],E,E,13,[[]]],[11,R[50],R[422],E,15,[[]]],[11,"fmt","regex",E,1,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[422],R[492],9,[[["self"],[R[36]]],[R[15]]]],[11,"fmt","regex",R[492],17,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,1,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[422],E,8,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,R[492],9,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,10,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,11,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,36,[[["self"],[R[36]]],[R[15]]]],[11,"fmt","regex",E,13,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,12,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[422],E,15,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,14,[[["self"],[R[36]]],[R[15]]]],[11,"fmt","regex",E,16,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,R[492],17,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,18,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,19,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,27,[[["self"],[R[36]]],[R[15]]]],[11,"from_str",R[422],R[493],9,[[["str"]],[[R[15],["regex","error"]],["regex"],["error"]]]],[11,"from_str","regex",R[493],17,[[["str"]],[["regex"],[R[15],["regex","error"]],["error"]]]],[11,"index",R[422],E,11,[[["self"],["usize"]]]],[11,"index",E,E,11,[[["str"],["self"]]]],[11,"index","regex",E,19,[[["self"],["usize"]],["str"]]],[11,"index",E,E,19,[[["str"],["self"]],["str"]]],[11,R[255],E,E,1,[[["self"]],["str"]]],[11,R[426],E,R[494],20,[[["self"]],[[R[3],["cow"]],["cow",["str"]]]]],[11,"by_ref",E,R[428],20,[[["self"]],[R[429]]]]],"p":[[3,R[495]],[4,"Error"],[3,R[495]],[8,R[496]],[3,R[384]],[3,R[384]],[3,R[386]],[3,R[386]],[3,"Match"],[3,"Regex"],[3,R[396]],[3,R[497]],[3,R[498]],[3,R[403]],[3,R[498]],[3,R[403]],[3,"Match"],[3,"Regex"],[3,R[396]],[3,R[497]],[8,R[496]],[3,R[405]],[3,R[407]],[3,R[394]],[3,"Matches"],[3,R[390]],[3,R[398]],[3,R[400]],[3,"Split"],[3,"SplitN"],[3,"Matches"],[3,R[390]],[3,"Split"],[3,"SplitN"],[3,R[394]],[3,R[398]],[3,R[400]],[3,R[405]],[3,R[407]]]};
searchIndex["regex_syntax"]={"doc":"This crate provides a robust regular expression parser.","i":[[3,"Parser",R[154],"A convenience parser for regular expressions.",N,N],[3,R[145],E,R[146],N,N],[4,"Error",E,"This error type encompasses any error that can be returned…",N,N],[13,"Parse",E,"An error that occurred while translating concrete syntax…",0,N],[13,"Translate",E,"An error that occurred while translating abstract syntax…",0,N],[5,"escape",E,R[499],N,[[["str"]],[R[2]]]],[5,"escape_into",E,"Escapes all meta characters in `text` and writes the…",N,[[[R[2]],["str"]]]],[5,"is_meta_character",E,"Returns true if the give character has significance in a…",N,[[["char"]],["bool"]]],[5,"is_word_character",E,"Returns true if and only if the given character is a…",N,[[["char"]],["bool"]]],[5,"is_word_byte",E,"Returns true if and only if the given character is an…",N,[[["u8"]],["bool"]]],[0,"ast",E,"Defines an abstract syntax for regular expressions.",N,N],[3,"Error",R[130],"An error that occurred while parsing a regular expression…",N,N],[3,"Span",E,"Span represents the position information of a single AST…",N,N],[12,"start",E,"The start byte offset.",1,N],[12,"end",E,"The end byte offset.",1,N],[3,"Position",E,"A single position in a regular expression.",N,N],[12,"offset",E,"The absolute offset of this position, starting at `0` from…",2,N],[12,"line",E,"The line number, starting at `1`.",2,N],[12,"column",E,"The approximate column number, starting at `1`.",2,N],[3,R[274],E,"An abstract syntax tree for a singular expression along…",N,N],[12,"ast",E,"The actual ast.",3,N],[12,"comments",E,"All comments found in the original regular expression.",3,N],[3,"Comment",E,"A comment from a regular expression with an associated span.",N,N],[12,"span",E,"The span of this comment, including the beginning `#` and…",4,N],[12,"comment",E,"The comment text, starting with the first character…",4,N],[3,R[137],E,R[138],N,N],[12,"span",E,"The span of this alternation.",5,N],[12,"asts",E,"The alternate regular expressions.",5,N],[3,"Concat",E,R[139],N,N],[12,"span",E,"The span of this concatenation.",6,N],[12,"asts",E,"The concatenation regular expressions.",6,N],[3,R[172],E,"A single literal expression.",N,N],[12,"span",E,"The span of this literal.",7,N],[12,"kind",E,"The kind of this literal.",7,N],[12,"c",E,"The Unicode scalar value corresponding to this literal.",7,N],[3,R[275],E,"A Perl character class.",N,N],[12,"span",E,R[129],8,N],[12,"kind",E,"The kind of Perl class.",8,N],[12,"negated",E,"Whether the class is negated or not. e.g., `\\d` is not…",8,N],[3,R[276],E,"An ASCII character class.",N,N],[12,"span",E,R[129],9,N],[12,"kind",E,"The kind of ASCII class.",9,N],[12,"negated",E,"Whether the class is negated or not. e.g., `[[:alpha:]]`…",9,N],[3,R[155],E,"A Unicode character class.",N,N],[12,"span",E,R[129],10,N],[12,"negated",E,"Whether this class is negated or not.",10,N],[12,"kind",E,"The kind of Unicode class.",10,N],[3,R[277],E,"A bracketed character class, e.g., `[a-z0-9]`.",N,N],[12,"span",E,R[129],11,N],[12,"negated",E,"Whether this class is negated or not. e.g., `[a]` is not…",11,N],[12,"kind",E,"The type of this set. A set is either a normal union of…",11,N],[3,R[278],E,"A single character class range in a set.",N,N],[12,"span",E,"The span of this range.",12,N],[12,"start",E,"The start of this range.",12,N],[12,"end",E,"The end of this range.",12,N],[3,R[279],E,"A union of items inside a character class set.",N,N],[12,"span",E,"The span of the items in this operation. e.g., the…",13,N],[12,"items",E,"The sequence of items that make up this union.",13,N],[3,R[280],E,"A Unicode character class set operation.",N,N],[12,"span",E,"The span of this operation. e.g., the `a-z--[h-p]` in…",14,N],[12,"kind",E,"The type of this set operation.",14,N],[12,"lhs",E,"The left hand side of the operation.",14,N],[12,"rhs",E,"The right hand side of the operation.",14,N],[3,R[133],E,R[134],N,N],[12,"span",E,"The span of this assertion.",15,N],[12,"kind",E,"The assertion kind, e.g., `\\b` or `^`.",15,N],[3,R[135],E,"A repetition operation applied to a regular expression.",N,N],[12,"span",E,"The span of this operation.",16,N],[12,"op",E,"The actual operation.",16,N],[12,"greedy",E,"Whether this operation was applied greedily or not.",16,N],[12,"ast",E,"The regular expression under repetition.",16,N],[3,R[281],E,"The repetition operator itself.",N,N],[12,"span",E,"The span of this operator. This includes things like `+`,…",17,N],[12,"kind",E,"The type of operation.",17,N],[3,"Group",E,R[136],N,N],[12,"span",E,"The span of this group.",18,N],[12,"kind",E,"The kind of this group.",18,N],[12,"ast",E,"The regular expression in this group.",18,N],[3,R[144],E,"A capture name.",N,N],[12,"span",E,"The span of this capture name.",19,N],[12,"name",E,"The capture name.",19,N],[12,"index",E,"The capture index.",19,N],[3,"SetFlags",E,"A group of flags that is not applied to a particular…",N,N],[12,"span",E,"The span of these flags, including the grouping parentheses.",20,N],[12,"flags",E,"The actual sequence of flags.",20,N],[3,"Flags",E,"A group of flags.",N,N],[12,"span",E,"The span of this group of flags.",21,N],[12,"items",E,"A sequence of flag items. Each item is either a flag or a…",21,N],[3,R[282],E,"A single item in a group of flags.",N,N],[12,"span",E,"The span of this item.",22,N],[12,"kind",E,"The kind of this item.",22,N],[4,R[106],E,"The type of an error that occurred while building an AST.",N,N],[13,"CaptureLimitExceeded",E,"The capturing group limit was exceeded.",23,N],[13,"ClassEscapeInvalid",E,"An invalid escape sequence was found in a character class…",23,N],[13,"ClassRangeInvalid",E,"An invalid character class range was found. An invalid…",23,N],[13,"ClassRangeLiteral",E,"An invalid range boundary was found in a character class.…",23,N],[13,"ClassUnclosed",E,"An opening `[` was found with no corresponding closing `]`.",23,N],[13,"DecimalEmpty",E,"Note that this error variant is no longer used. Namely, a…",23,N],[13,"DecimalInvalid",E,"An invalid decimal number was given where one was expected.",23,N],[13,"EscapeHexEmpty",E,"A bracketed hex literal was empty.",23,N],[13,"EscapeHexInvalid",E,"A bracketed hex literal did not correspond to a Unicode…",23,N],[13,"EscapeHexInvalidDigit",E,"An invalid hexadecimal digit was found.",23,N],[13,"EscapeUnexpectedEof",E,"EOF was found before an escape sequence was completed.",23,N],[13,"EscapeUnrecognized",E,"An unrecognized escape sequence.",23,N],[13,"FlagDanglingNegation",E,"A dangling negation was used when setting flags, e.g., `i-`.",23,N],[13,"FlagDuplicate",E,"A flag was used twice, e.g., `i-i`.",23,N],[12,R[132],R[131],"The position of the original flag. The error position…",23,N],[13,"FlagRepeatedNegation",R[130],"The negation operator was used twice, e.g., `-i-s`.",23,N],[12,R[132],R[131],"The position of the original negation operator. The error…",23,N],[13,"FlagUnexpectedEof",R[130],"Expected a flag but got EOF, e.g., `(?`.",23,N],[13,"FlagUnrecognized",E,"Unrecognized flag, e.g., `a`.",23,N],[13,"GroupNameDuplicate",E,"A duplicate capture name was found.",23,N],[12,R[132],R[131],"The position of the initial occurrence of the capture…",23,N],[13,"GroupNameEmpty",R[130],"A capture group name is empty, e.g., `(?P<>abc)`.",23,N],[13,"GroupNameInvalid",E,"An invalid character was seen for a capture group name.…",23,N],[13,"GroupNameUnexpectedEof",E,"A closing `>` could not be found for a capture group name.",23,N],[13,"GroupUnclosed",E,"An unclosed group, e.g., `(ab`.",23,N],[13,"GroupUnopened",E,"An unopened group, e.g., `ab)`.",23,N],[13,"NestLimitExceeded",E,"The nest limit was exceeded. The limit stored here is the…",23,N],[13,"RepetitionCountInvalid",E,"The range provided in a counted repetition operator is…",23,N],[13,"RepetitionCountDecimalEmpty",E,"An opening `{` was not followed by a valid decimal value.…",23,N],[13,"RepetitionCountUnclosed",E,"An opening `{` was found with no corresponding closing `}`.",23,N],[13,"RepetitionMissing",E,"A repetition operator was applied to a missing…",23,N],[13,"UnsupportedBackreference",E,"When octal support is disabled, this error is produced…",23,N],[13,"UnsupportedLookAround",E,"When syntax similar to PCRE's look-around is used, this…",23,N],[4,"Ast",E,"An abstract syntax tree for a single regular expression.",N,N],[13,"Empty",E,"An empty regex that matches everything.",24,N],[13,"Flags",E,"A set of flags, e.g., `(?is)`.",24,N],[13,R[172],E,"A single character literal, which includes escape sequences.",24,N],[13,"Dot",E,"The \"any character\" class.",24,N],[13,R[133],E,R[134],24,N],[13,"Class",E,"A single character class. This includes all forms of…",24,N],[13,R[135],E,"A repetition operator applied to an arbitrary regular…",24,N],[13,"Group",E,R[136],24,N],[13,R[137],E,R[138],24,N],[13,"Concat",E,R[139],24,N],[4,R[283],E,"The kind of a single literal expression.",N,N],[13,"Verbatim",E,"The literal is written verbatim, e.g., `a` or `☃`.",25,N],[13,"Punctuation",E,"The literal is written as an escape because it is…",25,N],[13,"Octal",E,"The literal is written as an octal escape, e.g., `\\141`.",25,N],[13,"HexFixed",E,"The literal is written as a hex code with a fixed number…",25,N],[13,"HexBrace",E,"The literal is written as a hex code with a bracketed…",25,N],[13,"Special",E,"The literal is written as a specially recognized escape,…",25,N],[4,R[284],E,"The type of a special literal.",N,N],[13,"Bell",E,"Bell, spelled `\\a` (`\\x07`).",26,N],[13,"FormFeed",E,"Form feed, spelled `\\f` (`\\x0C`).",26,N],[13,"Tab",E,"Tab, spelled `\\t` (`\\x09`).",26,N],[13,"LineFeed",E,"Line feed, spelled `\\n` (`\\x0A`).",26,N],[13,"CarriageReturn",E,"Carriage return, spelled `\\r` (`\\x0D`).",26,N],[13,"VerticalTab",E,"Vertical tab, spelled `\\v` (`\\x0B`).",26,N],[13,"Space",E,"Space, spelled `\\ ` (`\\x20`). Note that this can only…",26,N],[4,R[285],E,"The type of a Unicode hex literal.",N,N],[13,"X",E,"A `\\x` prefix. When used without brackets, this form is…",27,N],[13,"UnicodeShort",E,"A `\\u` prefix. When used without brackets, this form is…",27,N],[13,"UnicodeLong",E,"A `\\U` prefix. When used without brackets, this form is…",27,N],[4,"Class",E,"A single character class expression.",N,N],[13,R[160],E,R[140],28,N],[13,"Perl",E,R[141],28,N],[13,R[142],E,R[143],28,N],[4,R[286],E,"The available Perl character classes.",N,N],[13,"Digit",E,"Decimal numbers.",29,N],[13,"Space",E,"Whitespace.",29,N],[13,"Word",E,"Word characters.",29,N],[4,R[287],E,"The available ASCII character classes.",N,N],[13,"Alnum",E,"`[0-9A-Za-z]`",30,N],[13,"Alpha",E,"`[A-Za-z]`",30,N],[13,"Ascii",E,"`[\\x00-\\x7F]`",30,N],[13,"Blank",E,"`[ \\t]`",30,N],[13,"Cntrl",E,"`[\\x00-\\x1F\\x7F]`",30,N],[13,"Digit",E,"`[0-9]`",30,N],[13,"Graph",E,"`[!-~]`",30,N],[13,"Lower",E,"`[a-z]`",30,N],[13,"Print",E,"`[ -~]`",30,N],[13,"Punct",E,"`[!-/:-@\\[-`{-~]`",30,N],[13,"Space",E,"`[\\t\\n\\v\\f\\r ]`",30,N],[13,"Upper",E,"`[A-Z]`",30,N],[13,"Word",E,"`[0-9A-Za-z_]`",30,N],[13,"Xdigit",E,"`[0-9A-Fa-f]`",30,N],[4,R[288],E,"The available forms of Unicode character classes.",N,N],[13,"OneLetter",E,"A one letter abbreviated class, e.g., `\\pN`.",31,N],[13,"Named",E,"A binary property, general category or script. The string…",31,N],[13,"NamedValue",E,"A property name and an associated value.",31,N],[12,"op","regex_syntax::ast::ClassUnicodeKind","The type of Unicode op used to associate `name` with…",31,N],[12,"name",E,"The property name (which may be empty).",31,N],[12,"value",E,"The property value (which may be empty).",31,N],[4,R[289],R[130],"The type of op used in a Unicode character class.",N,N],[13,"Equal",E,"A property set to a specific value, e.g.,…",32,N],[13,"Colon",E,"A property set to a specific value using a colon, e.g.,…",32,N],[13,"NotEqual",E,"A property that isn't a particular value, e.g.,…",32,N],[4,"ClassSet",E,"A character class set.",N,N],[13,"Item",E,"An item, which can be a single literal, range, nested…",33,N],[13,"BinaryOp",E,"A single binary operation (i.e., &&, -- or ~~).",33,N],[4,R[290],E,"A single component of a character class set.",N,N],[13,"Empty",E,"An empty item.",34,N],[13,R[172],E,"A single literal.",34,N],[13,"Range",E,"A range between two literals.",34,N],[13,"Ascii",E,"An ASCII character class, e.g., `[:alnum:]` or `[:punct:]`.",34,N],[13,R[160],E,R[140],34,N],[13,"Perl",E,R[141],34,N],[13,R[142],E,R[143],34,N],[13,"Union",E,"A union of items.",34,N],[4,R[291],E,"The type of a Unicode character class set operation.",N,N],[13,"Intersection",E,"The intersection of two sets, e.g., `\\pN&&[a-z]`.",35,N],[13,"Difference",E,"The difference of two sets, e.g., `\\pN--[0-9]`.",35,N],[13,"SymmetricDifference",E,"The symmetric difference of two sets. The symmetric…",35,N],[4,R[292],E,"An assertion kind.",N,N],[13,R[158],E,"`^`",36,N],[13,"EndLine",E,"`$`",36,N],[13,R[159],E,"`\\A`",36,N],[13,"EndText",E,"`\\z`",36,N],[13,R[156],E,"`\\b`",36,N],[13,"NotWordBoundary",E,"`\\B`",36,N],[4,R[165],E,R[166],N,N],[13,R[167],E,"`?`",37,N],[13,R[168],E,"`*`",37,N],[13,R[169],E,"`+`",37,N],[13,"Range",E,"`{m,n}`",37,N],[4,R[170],E,"A range repetition operator.",N,N],[13,"Exactly",E,"`{m}`",38,N],[13,"AtLeast",E,"`{m,}`",38,N],[13,"Bounded",E,"`{m,n}`",38,N],[4,R[161],E,"The kind of a group.",N,N],[13,R[162],E,"`(a)`",39,N],[13,R[144],E,"`(?P<name>a)`",39,N],[13,R[163],E,"`(?:a)` and `(?i:a)`",39,N],[4,R[293],E,"The kind of an item in a group of flags.",N,N],[13,"Negation",E,"A negation operator applied to all subsequent flags in the…",40,N],[13,"Flag",E,"A single flag in a group.",40,N],[4,"Flag",E,"A single flag.",N,N],[13,"CaseInsensitive",E,"`i`",41,N],[13,"MultiLine",E,"`m`",41,N],[13,"DotMatchesNewLine",E,"`s`",41,N],[13,"SwapGreed",E,"`U`",41,N],[13,R[160],E,"`u`",41,N],[13,"IgnoreWhitespace",E,"`x`",41,N],[5,"visit",E,R[171],N,[[["ast"],["visitor"]],[R[15]]]],[0,"parse",E,"This module provides a regular expression parser.",N,N],[3,R[145],R[223],R[146],N,N],[3,"Parser",E,"A regular expression parser.",N,N],[11,"new",E,R[209],42,[[],[R[147]]]],[11,"build",E,R[210],42,[[["self"]],["parser"]]],[11,R[211],E,R[212],42,[[["self"],["u32"]],[R[147]]]],[11,"octal",E,R[213],42,[[["self"],["bool"]],[R[147]]]],[11,R[215],E,R[216],42,[[["self"],["bool"]],[R[147]]]],[11,"new",E,R[222],43,[[],["parser"]]],[11,"parse",E,"Parse the regular expression into an abstract syntax tree.",43,[[["self"],["str"]],[["error"],[R[15],["ast","error"]],["ast"]]]],[11,"parse_with_comments",E,"Parse the regular expression and return an abstract syntax…",43,[[["self"],["str"]],[[R[15],[R[148],"error"]],[R[148]],["error"]]]],[0,"print",R[130],"This module provides a regular expression printer for `Ast`.",N,N],[3,"Printer",R[224],"A printer for a regular expression abstract syntax tree.",N,N],[11,"new",E,R[174],44,[[],["printer"]]],[11,"print",E,R[175],44,[[["self"],["ast"],["write"]],[R[15]]]],[8,"Visitor",R[130],"A trait for visiting an abstract syntax tree (AST) in…",N,N],[16,"Output",E,"The result of visiting an AST.",45,N],[16,"Err",E,"An error that visiting an AST might return.",45,N],[10,"finish",E,R[179],45,[[],[R[15]]]],[11,"start",E,R[256],45,[[["self"]]]],[11,R[180],E,R[257],45,[[["self"],["ast"]],[R[15]]]],[11,R[181],E,R[258],45,[[["self"],["ast"]],[R[15]]]],[11,R[182],E,R[259],45,[[["self"]],[R[15]]]],[11,R[260],E,R[261],45,[[["self"],[R[149]]],[R[15]]]],[11,R[262],E,R[263],45,[[["self"],[R[149]]],[R[15]]]],[11,R[264],E,R[265],45,[[["self"],[R[150]]],[R[15]]]],[11,R[266],E,R[267],45,[[["self"],[R[150]]],[R[15]]]],[11,R[268],E,R[269],45,[[["self"],[R[150]]],[R[15]]]],[11,"kind",E,R[183],46,[[["self"]],[R[104]]]],[11,"pattern",E,R[184],46,[[["self"]],["str"]]],[11,"span",E,R[185],46,[[["self"]],["span"]]],[11,"auxiliary_span",E,"Return an auxiliary span. This span exists only for some…",46,[[["self"]],[["span"],[R[3],["span"]]]]],[11,"new",E,"Create a new span with the given positions.",1,[[[R[151]]],["span"]]],[11,"splat",E,"Create a new span using the given position as the start…",1,[[[R[151]]],["span"]]],[11,"with_start",E,"Create a new span by replacing the starting the position…",1,[[[R[151]]],["span"]]],[11,"with_end",E,"Create a new span by replacing the ending the position…",1,[[[R[151]]],["span"]]],[11,"is_one_line",E,"Returns true if and only if this span occurs on a single…",1,[[["self"]],["bool"]]],[11,R[152],E,"Returns true if and only if this span is empty. That is,…",1,[[["self"]],["bool"]]],[11,"new",E,"Create a new position with the given information.",2,[[["usize"]],[R[151]]]],[11,"span",E,"Return the span of this abstract syntax tree.",24,[[["self"]],["span"]]],[11,R[152],E,"Return true if and only if this Ast is empty.",24,[[["self"]],["bool"]]],[11,"into_ast",E,"Return this alternation as an AST.",5,[[],["ast"]]],[11,"into_ast",E,"Return this concatenation as an AST.",6,[[],["ast"]]],[11,"byte",E,"If this literal was written as a `\\x` hex escape, then…",7,[[["self"]],[[R[3],["u8"]],["u8"]]]],[11,"digits",E,"The number of digits that must be used with this literal…",27,[[["self"]],["u32"]]],[11,"span",E,"Return the span of this character class.",28,[[["self"]],["span"]]],[11,"from_name",E,"Return the corresponding ClassAsciiKind variant for the…",30,[[["str"]],[[R[153]],[R[3],[R[153]]]]]],[11,R[207],E,"Returns true if this class has been negated.",10,[[["self"]],["bool"]]],[11,"is_equal",E,"Whether the op is an equality op or not.",32,[[["self"]],["bool"]]],[11,"union",E,"Build a set from a union.",33,[[[R[236]]],[R[234]]]],[11,"span",E,"Return the span of this character class set.",33,[[["self"]],["span"]]],[11,"span",E,"Return the span of this character class set item.",34,[[["self"]],["span"]]],[11,"is_valid",E,"Returns true if and only if this character class range is…",12,[[["self"]],["bool"]]],[11,"push",E,"Push a new item in this union.",13,[[["self"],[R[149]]]]],[11,"into_item",E,"Return this union as a character class set item.",13,[[],[R[149]]]],[11,"is_valid",E,"Returns true if and only if this repetition range is valid.",38,[[["self"]],["bool"]]],[11,"flags",E,"If this group is non-capturing, then this returns the…",18,[[["self"]],[["flags"],[R[3],["flags"]]]]],[11,"is_capturing",E,"Returns true if and only if this group is capturing.",18,[[["self"]],["bool"]]],[11,"capture_index",E,"Returns the capture index of this group, if this is a…",18,[[["self"]],[["u32"],[R[3],["u32"]]]]],[11,"add_item",E,"Add the given item to this sequence of flags.",21,[[["self"],[R[243]]],[[R[3],["usize"]],["usize"]]]],[11,"flag_state",E,"Returns the state of the given flag in this set.",21,[[["flag"],["self"]],[[R[3],["bool"]],["bool"]]]],[11,"is_negation",E,"Returns true if and only if this item is a negation…",40,[[["self"]],["bool"]]],[0,"hir",R[154],"Defines a high-level intermediate representation for…",N,N],[3,"Error",R[164],"An error that can occur while translating an `Ast` to a…",N,N],[3,"Hir",E,"A high-level intermediate representation (HIR) for a…",N,N],[3,R[155],E,R[157],N,N],[3,R[299],E,"An iterator over all ranges in a Unicode character class.",N,N],[3,R[296],E,"A single range of characters represented by Unicode scalar…",N,N],[3,R[297],E,"A set of characters represented by arbitrary bytes (where…",N,N],[3,R[300],E,"An iterator over all ranges in a byte character class.",N,N],[3,R[298],E,"A single range of characters represented by arbitrary bytes.",N,N],[3,"Group",E,"The high-level intermediate representation for a group.",N,N],[12,"kind",E,"The kind of this group. If it is a capturing group, then…",47,N],[12,"hir",E,"The expression inside the capturing group, which may be…",47,N],[3,R[135],E,"The high-level intermediate representation of a repetition…",N,N],[12,"kind",E,"The kind of this repetition operator.",48,N],[12,"greedy",E,"Whether this repetition operator is greedy or not. A…",48,N],[12,"hir",E,"The expression being repeated.",48,N],[4,R[106],E,"The type of an error that occurred while building an `Hir`.",N,N],[13,"UnicodeNotAllowed",E,"This error occurs when a Unicode feature is used when…",49,N],[13,"InvalidUtf8",E,"This error occurs when translating a pattern that could…",49,N],[13,"UnicodePropertyNotFound",E,"This occurs when an unrecognized Unicode property name…",49,N],[13,"UnicodePropertyValueNotFound",E,"This occurs when an unrecognized Unicode property value…",49,N],[13,"EmptyClassNotAllowed",E,"This occurs when the translator attempts to construct a…",49,N],[4,"HirKind",E,"The kind of an arbitrary `Hir` expression.",N,N],[13,"Empty",E,"The empty regular expression, which matches everything,…",50,N],[13,R[172],E,"A single literal character that matches exactly this…",50,N],[13,"Class",E,"A single character class that matches any of the…",50,N],[13,"Anchor",E,"An anchor assertion. An anchor assertion match always has…",50,N],[13,R[156],E,"A word boundary assertion, which may or may not be Unicode…",50,N],[13,R[135],E,"A repetition operation applied to a child expression.",50,N],[13,"Group",E,"A possibly capturing group, which contains a child…",50,N],[13,"Concat",E,"A concatenation of expressions. A concatenation always has…",50,N],[13,R[137],E,"An alternation of expressions. An alternation always has…",50,N],[4,R[172],E,"The high-level intermediate representation of a literal.",N,N],[13,R[160],E,"A single character represented by a Unicode scalar value.",51,N],[13,"Byte",E,"A single character represented by an arbitrary byte.",51,N],[4,"Class",E,"The high-level intermediate representation of a character…",N,N],[13,R[160],E,R[157],52,N],[13,"Bytes",E,"A set of characters represented by arbitrary bytes (one…",52,N],[4,"Anchor",E,"The high-level intermediate representation for an anchor…",N,N],[13,R[158],E,"Match the beginning of a line or the beginning of text.…",53,N],[13,"EndLine",E,"Match the end of a line or the end of text. Specifically,…",53,N],[13,R[159],E,"Match the beginning of text. Specifically, this matches at…",53,N],[13,"EndText",E,"Match the end of text. Specifically, this matches at the…",53,N],[4,R[156],E,"The high-level intermediate representation for a…",N,N],[13,R[160],E,"Match a Unicode-aware word boundary. That is, this matches…",54,N],[13,"UnicodeNegate",E,"Match a Unicode-aware negation of a word boundary.",54,N],[13,"Ascii",E,"Match an ASCII-only word boundary. That is, this matches a…",54,N],[13,"AsciiNegate",E,"Match an ASCII-only negation of a word boundary.",54,N],[4,R[161],E,"The kind of group.",N,N],[13,R[162],E,"A normal unnamed capturing group.",55,N],[13,R[144],E,"A named capturing group.",55,N],[12,"name","regex_syntax::hir::GroupKind","The name of the group.",55,N],[12,"index",E,"The capture index of the group.",55,N],[13,R[163],R[164],"A non-capturing group.",55,N],[4,R[165],E,R[166],N,N],[13,R[167],E,"Matches a sub-expression zero or one times.",56,N],[13,R[168],E,"Matches a sub-expression zero or more times.",56,N],[13,R[169],E,"Matches a sub-expression one or more times.",56,N],[13,"Range",E,"Matches a sub-expression within a bounded range of times.",56,N],[4,R[170],E,"The kind of a counted repetition operator.",N,N],[13,"Exactly",E,"Matches a sub-expression exactly this many times.",57,N],[13,"AtLeast",E,"Matches a sub-expression at least this many times.",57,N],[13,"Bounded",E,"Matches a sub-expression at least `m` times and at most…",57,N],[5,"visit",E,R[171],N,[[["hir"],["visitor"]],[R[15]]]],[0,R[186],E,"Provides routines for extracting literal prefixes and…",N,N],[3,"Literals",R[225],"A set of literal byte strings extracted from a regular…",N,N],[3,R[172],E,"A single member of a set of literals extracted from a…",N,N],[11,"empty",E,"Returns a new empty set of literals using default limits.",58,[[],[R[173]]]],[11,"prefixes",E,"Returns a set of literal prefixes extracted from the given…",58,[[["hir"]],[R[173]]]],[11,"suffixes",E,"Returns a set of literal suffixes extracted from the given…",58,[[["hir"]],[R[173]]]],[11,"limit_size",E,"Get the approximate size limit (in bytes) of this set.",58,[[["self"]],["usize"]]],[11,"set_limit_size",E,"Set the approximate size limit (in bytes) of this set.",58,[[["self"],["usize"]],[R[173]]]],[11,"limit_class",E,"Get the character class size limit for this set.",58,[[["self"]],["usize"]]],[11,"set_limit_class",E,"Limits the size of character(or byte) classes considered.",58,[[["self"],["usize"]],[R[173]]]],[11,R[173],E,"Returns the set of literals as a slice. Its order is…",58,[[["self"]]]],[11,"min_len",E,"Returns the length of the smallest literal.",58,[[["self"]],[[R[3],["usize"]],["usize"]]]],[11,"all_complete",E,"Returns true if all members in this set are complete.",58,[[["self"]],["bool"]]],[11,"any_complete",E,"Returns true if any member in this set is complete.",58,[[["self"]],["bool"]]],[11,"contains_empty",E,"Returns true if this set contains an empty literal.",58,[[["self"]],["bool"]]],[11,R[152],E,"Returns true if this set is empty or if all of its members…",58,[[["self"]],["bool"]]],[11,"to_empty",E,"Returns a new empty set of literals using this set's limits.",58,[[["self"]],[R[173]]]],[11,"longest_common_prefix",E,"Returns the longest common prefix of all members in this…",58,[[["self"]]]],[11,"longest_common_suffix",E,"Returns the longest common suffix of all members in this…",58,[[["self"]]]],[11,"trim_suffix",E,"Returns a new set of literals with the given number of…",58,[[["self"],["usize"]],[[R[173]],[R[3],[R[173]]]]]],[11,"unambiguous_prefixes",E,"Returns a new set of prefixes of this set of literals that…",58,[[["self"]],[R[173]]]],[11,"unambiguous_suffixes",E,"Returns a new set of suffixes of this set of literals that…",58,[[["self"]],[R[173]]]],[11,"union_prefixes",E,"Unions the prefixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union_suffixes",E,"Unions the suffixes from the given expression to this set.",58,[[["self"],["hir"]],["bool"]]],[11,"union",E,"Unions this set with another set.",58,[[["self"],[R[173]]],["bool"]]],[11,"cross_product",E,"Extends this set with another set.",58,[[["self"],[R[173]]],["bool"]]],[11,"cross_add",E,"Extends each literal in this set with the bytes given.",58,[[["self"]],["bool"]]],[11,"add",E,"Adds the given literal to this set.",58,[[["self"],[R[186]]],["bool"]]],[11,"add_char_class",E,"Extends each literal in this set with the character class…",58,[[["self"],[R[191]]],["bool"]]],[11,"add_byte_class",E,"Extends each literal in this set with the byte class given.",58,[[["self"],[R[195]]],["bool"]]],[11,"cut",E,"Cuts every member of this set. When a member is cut, it…",58,[[["self"]]]],[11,"reverse",E,"Reverses all members in place.",58,[[["self"]]]],[11,"clear",E,"Clears this set of all members.",58,[[["self"]]]],[11,"new",E,"Returns a new complete literal with the bytes given.",59,[[["vec",["u8"]],["u8"]],[R[186]]]],[11,"empty",E,"Returns a new complete empty literal.",59,[[],[R[186]]]],[11,"is_cut",E,"Returns true if this literal was \"cut.\"",59,[[["self"]],["bool"]]],[11,"cut",E,"Cuts this literal.",59,[[["self"]]]],[0,"print",R[164],"This module provides a regular expression printer for `Hir`.",N,N],[3,"Printer",R[226],"A printer for a regular expression's high-level…",N,N],[11,"new",E,R[174],60,[[],["printer"]]],[11,"print",E,R[175],60,[[["self"],["hir"],["write"]],[R[15]]]],[0,R[178],R[164],"Defines a translator that converts an `Ast` to an `Hir`.",N,N],[3,R[294],R[227],"A builder for constructing an AST->HIR translator.",N,N],[3,R[295],E,"A translator maps abstract syntax to a high level…",N,N],[11,"new",E,"Create a new translator builder with a default c…",61,[[],[R[176]]]],[11,"build",E,"Build a translator using the current configuration.",61,[[["self"]],[R[177]]]],[11,R[214],E,"When enabled, translation will permit the construction of…",61,[[["self"],["bool"]],[R[176]]]],[11,R[217],E,"Enable or disable the case insensitive flag (`i`) by…",61,[[["self"],["bool"]],[R[176]]]],[11,R[218],E,"Enable or disable the multi-line matching flag (`m`) by…",61,[[["self"],["bool"]],[R[176]]]],[11,R[219],E,"Enable or disable the \"dot matches any character\" flag…",61,[[["self"],["bool"]],[R[176]]]],[11,R[220],E,"Enable or disable the \"swap greed\" flag (`U`) by default.",61,[[["self"],["bool"]],[R[176]]]],[11,R[500],E,R[221],61,[[["self"],["bool"]],[R[176]]]],[11,"new",E,"Create a new translator using the default configuration.",62,[[],[R[177]]]],[11,R[178],E,"Translate the given abstract syntax tree (AST) into a high…",62,[[["self"],["ast"],["str"]],[[R[15],["hir","error"]],["hir"],["error"]]]],[8,"Visitor",R[164],"A trait for visiting the high-level IR (HIR) in depth…",N,N],[16,"Output",E,"The result of visiting an HIR.",63,N],[16,"Err",E,"An error that visiting an HIR might return.",63,N],[10,"finish",E,R[179],63,[[],[R[15]]]],[11,"start",E,R[270],63,[[["self"]]]],[11,R[180],E,R[271],63,[[["self"],["hir"]],[R[15]]]],[11,R[181],E,R[272],63,[[["self"],["hir"]],[R[15]]]],[11,R[182],E,R[273],63,[[["self"]],[R[15]]]],[11,"kind",E,R[183],64,[[["self"]],[R[104]]]],[11,"pattern",E,R[184],64,[[["self"]],["str"]]],[11,"span",E,R[185],64,[[["self"]],["span"]]],[11,"kind",E,"Returns a reference to the underlying HIR kind.",65,[[["self"]],["hirkind"]]],[11,"into_kind",E,"Consumes ownership of this HIR expression and returns its…",65,[[],["hirkind"]]],[11,"empty",E,"Returns an empty HIR expression.",65,[[],["hir"]]],[11,R[186],E,"Creates a literal HIR expression.",65,[[[R[186]]],["hir"]]],[11,"class",E,"Creates a class HIR expression.",65,[[["class"]],["hir"]]],[11,"anchor",E,"Creates an anchor assertion HIR expression.",65,[[["anchor"]],["hir"]]],[11,"word_boundary",E,"Creates a word boundary assertion HIR expression.",65,[[[R[245]]],["hir"]]],[11,R[187],E,"Creates a repetition HIR expression.",65,[[[R[187]]],["hir"]]],[11,"group",E,"Creates a group HIR expression.",65,[[["group"]],["hir"]]],[11,"concat",E,"Returns the concatenation of the given expressions.",65,[[["hir"],["vec",["hir"]]],["hir"]]],[11,R[228],E,"Returns the alternation of the given expressions.",65,[[["hir"],["vec",["hir"]]],["hir"]]],[11,"dot",E,"Build an HIR expression for `.`.",65,[[["bool"]],["hir"]]],[11,"any",E,"Build an HIR expression for `(?s).`.",65,[[["bool"]],["hir"]]],[11,R[190],E,"Return true if and only if this HIR will always match…",65,[[["self"]],["bool"]]],[11,"is_all_assertions",E,"Returns true if and only if this entire HIR expression is…",65,[[["self"]],["bool"]]],[11,"is_anchored_start",E,R[188],65,[[["self"]],["bool"]]],[11,"is_anchored_end",E,R[188],65,[[["self"]],["bool"]]],[11,"is_line_anchored_start",E,R[188],65,[[["self"]],["bool"]]],[11,"is_line_anchored_end",E,R[188],65,[[["self"]],["bool"]]],[11,"is_any_anchored_start",E,R[189],65,[[["self"]],["bool"]]],[11,"is_any_anchored_end",E,R[189],65,[[["self"]],["bool"]]],[11,R[208],E,"Return true if and only if the empty string is part of the…",65,[[["self"]],["bool"]]],[11,"is_literal",E,"Return true if and only if this HIR is a simple literal.…",65,[[["self"]],["bool"]]],[11,"is_alternation_literal",E,"Return true if and only if this HIR is either a simple…",65,[[["self"]],["bool"]]],[11,R[152],E,"Return true if and only if this HIR is the empty regular…",50,[[["self"]],["bool"]]],[11,"has_subexprs",E,"Returns true if and only if this kind has any (including…",50,[[["self"]],["bool"]]],[11,"is_unicode",E,"Returns true if and only if this literal corresponds to a…",51,[[["self"]],["bool"]]],[11,R[192],E,"Apply Unicode simple case folding to this character class,…",52,[[["self"]]]],[11,"negate",E,"Negate this character class in place.",52,[[["self"]]]],[11,R[190],E,"Returns true if and only if this character class will only…",52,[[["self"]],["bool"]]],[11,"new",E,R[194],66,[[["i"]],[R[191]]]],[11,"empty",E,R[196],66,[[],[R[191]]]],[11,"push",E,R[197],66,[[["self"],[R[193]]]]],[11,"iter",E,R[198],66,[[["self"]],["classunicodeiter"]]],[11,"ranges",E,R[199],66,[[["self"]]]],[11,R[192],E,R[200],66,[[["self"]]]],[11,"negate",E,"Negate this character class.",66,[[["self"]]]],[11,"union",E,"Union this character class with the given character class,…",66,[[["self"],[R[191]]]]],[11,R[201],E,"Intersect this character class with the given character…",66,[[["self"],[R[191]]]]],[11,R[202],E,"Subtract the given character class from this character…",66,[[["self"],[R[191]]]]],[11,R[203],E,"Compute the symmetric difference of the given character…",66,[[["self"],[R[191]]]]],[11,"new",E,"Create a new Unicode scalar value range for a character…",67,[[["char"]],[R[193]]]],[11,"start",E,R[205],67,[[["self"]],["char"]]],[11,"end",E,R[206],67,[[["self"]],["char"]]],[11,"new",E,R[194],68,[[["i"]],[R[195]]]],[11,"empty",E,R[196],68,[[],[R[195]]]],[11,"push",E,R[197],68,[[["self"],[R[204]]]]],[11,"iter",E,R[198],68,[[["self"]],["classbytesiter"]]],[11,"ranges",E,R[199],68,[[["self"]]]],[11,R[192],E,R[200],68,[[["self"]]]],[11,"negate",E,"Negate this byte class.",68,[[["self"]]]],[11,"union",E,"Union this byte class with the given byte class, in place.",68,[[["self"],[R[195]]]]],[11,R[201],E,"Intersect this byte class with the given byte class, in…",68,[[["self"],[R[195]]]]],[11,R[202],E,"Subtract the given byte class from this byte class, in…",68,[[["self"],[R[195]]]]],[11,R[203],E,"Compute the symmetric difference of the given byte…",68,[[["self"],[R[195]]]]],[11,"is_all_ascii",E,"Returns true if and only if this character class will…",68,[[["self"]],["bool"]]],[11,"new",E,"Create a new byte range for a character class.",69,[[["u8"]],[R[204]]]],[11,"start",E,R[205],69,[[["self"]],["u8"]]],[11,"end",E,R[206],69,[[["self"]],["u8"]]],[11,R[207],E,"Returns true if and only if this word boundary assertion…",54,[[["self"]],["bool"]]],[11,R[208],E,"Returns true if and only if this repetition operator makes…",48,[[["self"]],["bool"]]],[11,"new",R[154],R[209],70,[[],[R[147]]]],[11,"build",E,R[210],70,[[["self"]],["parser"]]],[11,R[211],E,R[212],70,[[["self"],["u32"]],[R[147]]]],[11,"octal",E,R[213],70,[[["self"],["bool"]],[R[147]]]],[11,R[214],E,"When enabled, the parser will permit the construction of a…",70,[[["self"],["bool"]],[R[147]]]],[11,R[215],E,R[216],70,[[["self"],["bool"]],[R[147]]]],[11,R[217],E,"Enable or disable the case insensitive flag by default.",70,[[["self"],["bool"]],[R[147]]]],[11,R[218],E,"Enable or disable the multi-line matching flag by default.",70,[[["self"],["bool"]],[R[147]]]],[11,R[219],E,"Enable or disable the \"dot matches any character\" flag by…",70,[[["self"],["bool"]],[R[147]]]],[11,R[220],E,"Enable or disable the \"swap greed\" flag by default.",70,[[["self"],["bool"]],[R[147]]]],[11,R[500],E,R[221],70,[[["self"],["bool"]],[R[147]]]],[11,"new",E,R[222],71,[[],["parser"]]],[11,"parse",E,"Parse the regular expression into a high level…",71,[[["self"],["str"]],[[R[15],["hir"]],["hir"]]]],[6,"Result",E,"A type alias for dealing with errors returned by this crate.",N,N],[11,"from",E,E,71,[[[T]],[T]]],[11,R[32],E,E,71,[[["self"]],[T]]],[11,R[33],E,E,71,[[[T],["self"]]]],[11,"into",E,E,71,[[],[U]]],[11,R[12],E,E,71,[[[U]],[R[15]]]],[11,R[13],E,E,71,[[],[R[15]]]],[11,R[14],E,E,71,[[["self"]],[T]]],[11,R[17],E,E,71,[[["self"]],[T]]],[11,R[16],E,E,71,[[["self"]],[R[18]]]],[11,"from",E,E,70,[[[T]],[T]]],[11,R[32],E,E,70,[[["self"]],[T]]],[11,R[33],E,E,70,[[[T],["self"]]]],[11,"into",E,E,70,[[],[U]]],[11,R[12],E,E,70,[[[U]],[R[15]]]],[11,R[13],E,E,70,[[],[R[15]]]],[11,R[14],E,E,70,[[["self"]],[T]]],[11,R[17],E,E,70,[[["self"]],[T]]],[11,R[16],E,E,70,[[["self"]],[R[18]]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[32],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,[[[T],["self"]]]],[11,R[81],E,E,0,[[["self"]],[R[2]]]],[11,"into",E,E,0,[[],[U]]],[11,R[12],E,E,0,[[[U]],[R[15]]]],[11,R[13],E,E,0,[[],[R[15]]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,"from",R[130],E,46,[[[T]],[T]]],[11,R[32],E,E,46,[[["self"]],[T]]],[11,R[33],E,E,46,[[[T],["self"]]]],[11,R[81],E,E,46,[[["self"]],[R[2]]]],[11,"into",E,E,46,[[],[U]]],[11,R[12],E,E,46,[[[U]],[R[15]]]],[11,R[13],E,E,46,[[],[R[15]]]],[11,R[14],E,E,46,[[["self"]],[T]]],[11,R[17],E,E,46,[[["self"]],[T]]],[11,R[16],E,E,46,[[["self"]],[R[18]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[32],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[[T],["self"]]]],[11,"into",E,E,1,[[],[U]]],[11,R[12],E,E,1,[[[U]],[R[15]]]],[11,R[13],E,E,1,[[],[R[15]]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[32],E,E,2,[[["self"]],[T]]],[11,R[33],E,E,2,[[[T],["self"]]]],[11,"into",E,E,2,[[],[U]]],[11,R[12],E,E,2,[[[U]],[R[15]]]],[11,R[13],E,E,2,[[],[R[15]]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[32],E,E,3,[[["self"]],[T]]],[11,R[33],E,E,3,[[[T],["self"]]]],[11,"into",E,E,3,[[],[U]]],[11,R[12],E,E,3,[[[U]],[R[15]]]],[11,R[13],E,E,3,[[],[R[15]]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"]],[R[18]]]],[11,"from",E,E,4,[[[T]],[T]]],[11,R[32],E,E,4,[[["self"]],[T]]],[11,R[33],E,E,4,[[[T],["self"]]]],[11,"into",E,E,4,[[],[U]]],[11,R[12],E,E,4,[[[U]],[R[15]]]],[11,R[13],E,E,4,[[],[R[15]]]],[11,R[14],E,E,4,[[["self"]],[T]]],[11,R[17],E,E,4,[[["self"]],[T]]],[11,R[16],E,E,4,[[["self"]],[R[18]]]],[11,"from",E,E,5,[[[T]],[T]]],[11,R[32],E,E,5,[[["self"]],[T]]],[11,R[33],E,E,5,[[[T],["self"]]]],[11,"into",E,E,5,[[],[U]]],[11,R[12],E,E,5,[[[U]],[R[15]]]],[11,R[13],E,E,5,[[],[R[15]]]],[11,R[14],E,E,5,[[["self"]],[T]]],[11,R[17],E,E,5,[[["self"]],[T]]],[11,R[16],E,E,5,[[["self"]],[R[18]]]],[11,"from",E,E,6,[[[T]],[T]]],[11,R[32],E,E,6,[[["self"]],[T]]],[11,R[33],E,E,6,[[[T],["self"]]]],[11,"into",E,E,6,[[],[U]]],[11,R[12],E,E,6,[[[U]],[R[15]]]],[11,R[13],E,E,6,[[],[R[15]]]],[11,R[14],E,E,6,[[["self"]],[T]]],[11,R[17],E,E,6,[[["self"]],[T]]],[11,R[16],E,E,6,[[["self"]],[R[18]]]],[11,"from",E,E,7,[[[T]],[T]]],[11,R[32],E,E,7,[[["self"]],[T]]],[11,R[33],E,E,7,[[[T],["self"]]]],[11,"into",E,E,7,[[],[U]]],[11,R[12],E,E,7,[[[U]],[R[15]]]],[11,R[13],E,E,7,[[],[R[15]]]],[11,R[14],E,E,7,[[["self"]],[T]]],[11,R[17],E,E,7,[[["self"]],[T]]],[11,R[16],E,E,7,[[["self"]],[R[18]]]],[11,"from",E,E,8,[[[T]],[T]]],[11,R[32],E,E,8,[[["self"]],[T]]],[11,R[33],E,E,8,[[[T],["self"]]]],[11,"into",E,E,8,[[],[U]]],[11,R[12],E,E,8,[[[U]],[R[15]]]],[11,R[13],E,E,8,[[],[R[15]]]],[11,R[14],E,E,8,[[["self"]],[T]]],[11,R[17],E,E,8,[[["self"]],[T]]],[11,R[16],E,E,8,[[["self"]],[R[18]]]],[11,"from",E,E,9,[[[T]],[T]]],[11,R[32],E,E,9,[[["self"]],[T]]],[11,R[33],E,E,9,[[[T],["self"]]]],[11,"into",E,E,9,[[],[U]]],[11,R[12],E,E,9,[[[U]],[R[15]]]],[11,R[13],E,E,9,[[],[R[15]]]],[11,R[14],E,E,9,[[["self"]],[T]]],[11,R[17],E,E,9,[[["self"]],[T]]],[11,R[16],E,E,9,[[["self"]],[R[18]]]],[11,"from",E,E,10,[[[T]],[T]]],[11,R[32],E,E,10,[[["self"]],[T]]],[11,R[33],E,E,10,[[[T],["self"]]]],[11,"into",E,E,10,[[],[U]]],[11,R[12],E,E,10,[[[U]],[R[15]]]],[11,R[13],E,E,10,[[],[R[15]]]],[11,R[14],E,E,10,[[["self"]],[T]]],[11,R[17],E,E,10,[[["self"]],[T]]],[11,R[16],E,E,10,[[["self"]],[R[18]]]],[11,"from",E,E,11,[[[T]],[T]]],[11,R[32],E,E,11,[[["self"]],[T]]],[11,R[33],E,E,11,[[[T],["self"]]]],[11,"into",E,E,11,[[],[U]]],[11,R[12],E,E,11,[[[U]],[R[15]]]],[11,R[13],E,E,11,[[],[R[15]]]],[11,R[14],E,E,11,[[["self"]],[T]]],[11,R[17],E,E,11,[[["self"]],[T]]],[11,R[16],E,E,11,[[["self"]],[R[18]]]],[11,"from",E,E,12,[[[T]],[T]]],[11,R[32],E,E,12,[[["self"]],[T]]],[11,R[33],E,E,12,[[[T],["self"]]]],[11,"into",E,E,12,[[],[U]]],[11,R[12],E,E,12,[[[U]],[R[15]]]],[11,R[13],E,E,12,[[],[R[15]]]],[11,R[14],E,E,12,[[["self"]],[T]]],[11,R[17],E,E,12,[[["self"]],[T]]],[11,R[16],E,E,12,[[["self"]],[R[18]]]],[11,"from",E,E,13,[[[T]],[T]]],[11,R[32],E,E,13,[[["self"]],[T]]],[11,R[33],E,E,13,[[[T],["self"]]]],[11,"into",E,E,13,[[],[U]]],[11,R[12],E,E,13,[[[U]],[R[15]]]],[11,R[13],E,E,13,[[],[R[15]]]],[11,R[14],E,E,13,[[["self"]],[T]]],[11,R[17],E,E,13,[[["self"]],[T]]],[11,R[16],E,E,13,[[["self"]],[R[18]]]],[11,"from",E,E,14,[[[T]],[T]]],[11,R[32],E,E,14,[[["self"]],[T]]],[11,R[33],E,E,14,[[[T],["self"]]]],[11,"into",E,E,14,[[],[U]]],[11,R[12],E,E,14,[[[U]],[R[15]]]],[11,R[13],E,E,14,[[],[R[15]]]],[11,R[14],E,E,14,[[["self"]],[T]]],[11,R[17],E,E,14,[[["self"]],[T]]],[11,R[16],E,E,14,[[["self"]],[R[18]]]],[11,"from",E,E,15,[[[T]],[T]]],[11,R[32],E,E,15,[[["self"]],[T]]],[11,R[33],E,E,15,[[[T],["self"]]]],[11,"into",E,E,15,[[],[U]]],[11,R[12],E,E,15,[[[U]],[R[15]]]],[11,R[13],E,E,15,[[],[R[15]]]],[11,R[14],E,E,15,[[["self"]],[T]]],[11,R[17],E,E,15,[[["self"]],[T]]],[11,R[16],E,E,15,[[["self"]],[R[18]]]],[11,"from",E,E,16,[[[T]],[T]]],[11,R[32],E,E,16,[[["self"]],[T]]],[11,R[33],E,E,16,[[[T],["self"]]]],[11,"into",E,E,16,[[],[U]]],[11,R[12],E,E,16,[[[U]],[R[15]]]],[11,R[13],E,E,16,[[],[R[15]]]],[11,R[14],E,E,16,[[["self"]],[T]]],[11,R[17],E,E,16,[[["self"]],[T]]],[11,R[16],E,E,16,[[["self"]],[R[18]]]],[11,"from",E,E,17,[[[T]],[T]]],[11,R[32],E,E,17,[[["self"]],[T]]],[11,R[33],E,E,17,[[[T],["self"]]]],[11,"into",E,E,17,[[],[U]]],[11,R[12],E,E,17,[[[U]],[R[15]]]],[11,R[13],E,E,17,[[],[R[15]]]],[11,R[14],E,E,17,[[["self"]],[T]]],[11,R[17],E,E,17,[[["self"]],[T]]],[11,R[16],E,E,17,[[["self"]],[R[18]]]],[11,"from",E,E,18,[[[T]],[T]]],[11,R[32],E,E,18,[[["self"]],[T]]],[11,R[33],E,E,18,[[[T],["self"]]]],[11,"into",E,E,18,[[],[U]]],[11,R[12],E,E,18,[[[U]],[R[15]]]],[11,R[13],E,E,18,[[],[R[15]]]],[11,R[14],E,E,18,[[["self"]],[T]]],[11,R[17],E,E,18,[[["self"]],[T]]],[11,R[16],E,E,18,[[["self"]],[R[18]]]],[11,"from",E,E,19,[[[T]],[T]]],[11,R[32],E,E,19,[[["self"]],[T]]],[11,R[33],E,E,19,[[[T],["self"]]]],[11,"into",E,E,19,[[],[U]]],[11,R[12],E,E,19,[[[U]],[R[15]]]],[11,R[13],E,E,19,[[],[R[15]]]],[11,R[14],E,E,19,[[["self"]],[T]]],[11,R[17],E,E,19,[[["self"]],[T]]],[11,R[16],E,E,19,[[["self"]],[R[18]]]],[11,"from",E,E,20,[[[T]],[T]]],[11,R[32],E,E,20,[[["self"]],[T]]],[11,R[33],E,E,20,[[[T],["self"]]]],[11,"into",E,E,20,[[],[U]]],[11,R[12],E,E,20,[[[U]],[R[15]]]],[11,R[13],E,E,20,[[],[R[15]]]],[11,R[14],E,E,20,[[["self"]],[T]]],[11,R[17],E,E,20,[[["self"]],[T]]],[11,R[16],E,E,20,[[["self"]],[R[18]]]],[11,"from",E,E,21,[[[T]],[T]]],[11,R[32],E,E,21,[[["self"]],[T]]],[11,R[33],E,E,21,[[[T],["self"]]]],[11,"into",E,E,21,[[],[U]]],[11,R[12],E,E,21,[[[U]],[R[15]]]],[11,R[13],E,E,21,[[],[R[15]]]],[11,R[14],E,E,21,[[["self"]],[T]]],[11,R[17],E,E,21,[[["self"]],[T]]],[11,R[16],E,E,21,[[["self"]],[R[18]]]],[11,"from",E,E,22,[[[T]],[T]]],[11,R[32],E,E,22,[[["self"]],[T]]],[11,R[33],E,E,22,[[[T],["self"]]]],[11,"into",E,E,22,[[],[U]]],[11,R[12],E,E,22,[[[U]],[R[15]]]],[11,R[13],E,E,22,[[],[R[15]]]],[11,R[14],E,E,22,[[["self"]],[T]]],[11,R[17],E,E,22,[[["self"]],[T]]],[11,R[16],E,E,22,[[["self"]],[R[18]]]],[11,"from",E,E,23,[[[T]],[T]]],[11,R[32],E,E,23,[[["self"]],[T]]],[11,R[33],E,E,23,[[[T],["self"]]]],[11,R[81],E,E,23,[[["self"]],[R[2]]]],[11,"into",E,E,23,[[],[U]]],[11,R[12],E,E,23,[[[U]],[R[15]]]],[11,R[13],E,E,23,[[],[R[15]]]],[11,R[14],E,E,23,[[["self"]],[T]]],[11,R[17],E,E,23,[[["self"]],[T]]],[11,R[16],E,E,23,[[["self"]],[R[18]]]],[11,"from",E,E,24,[[[T]],[T]]],[11,R[32],E,E,24,[[["self"]],[T]]],[11,R[33],E,E,24,[[[T],["self"]]]],[11,R[81],E,E,24,[[["self"]],[R[2]]]],[11,"into",E,E,24,[[],[U]]],[11,R[12],E,E,24,[[[U]],[R[15]]]],[11,R[13],E,E,24,[[],[R[15]]]],[11,R[14],E,E,24,[[["self"]],[T]]],[11,R[17],E,E,24,[[["self"]],[T]]],[11,R[16],E,E,24,[[["self"]],[R[18]]]],[11,"from",E,E,25,[[[T]],[T]]],[11,R[32],E,E,25,[[["self"]],[T]]],[11,R[33],E,E,25,[[[T],["self"]]]],[11,"into",E,E,25,[[],[U]]],[11,R[12],E,E,25,[[[U]],[R[15]]]],[11,R[13],E,E,25,[[],[R[15]]]],[11,R[14],E,E,25,[[["self"]],[T]]],[11,R[17],E,E,25,[[["self"]],[T]]],[11,R[16],E,E,25,[[["self"]],[R[18]]]],[11,"from",E,E,26,[[[T]],[T]]],[11,R[32],E,E,26,[[["self"]],[T]]],[11,R[33],E,E,26,[[[T],["self"]]]],[11,"into",E,E,26,[[],[U]]],[11,R[12],E,E,26,[[[U]],[R[15]]]],[11,R[13],E,E,26,[[],[R[15]]]],[11,R[14],E,E,26,[[["self"]],[T]]],[11,R[17],E,E,26,[[["self"]],[T]]],[11,R[16],E,E,26,[[["self"]],[R[18]]]],[11,"from",E,E,27,[[[T]],[T]]],[11,R[32],E,E,27,[[["self"]],[T]]],[11,R[33],E,E,27,[[[T],["self"]]]],[11,"into",E,E,27,[[],[U]]],[11,R[12],E,E,27,[[[U]],[R[15]]]],[11,R[13],E,E,27,[[],[R[15]]]],[11,R[14],E,E,27,[[["self"]],[T]]],[11,R[17],E,E,27,[[["self"]],[T]]],[11,R[16],E,E,27,[[["self"]],[R[18]]]],[11,"from",E,E,28,[[[T]],[T]]],[11,R[32],E,E,28,[[["self"]],[T]]],[11,R[33],E,E,28,[[[T],["self"]]]],[11,"into",E,E,28,[[],[U]]],[11,R[12],E,E,28,[[[U]],[R[15]]]],[11,R[13],E,E,28,[[],[R[15]]]],[11,R[14],E,E,28,[[["self"]],[T]]],[11,R[17],E,E,28,[[["self"]],[T]]],[11,R[16],E,E,28,[[["self"]],[R[18]]]],[11,"from",E,E,29,[[[T]],[T]]],[11,R[32],E,E,29,[[["self"]],[T]]],[11,R[33],E,E,29,[[[T],["self"]]]],[11,"into",E,E,29,[[],[U]]],[11,R[12],E,E,29,[[[U]],[R[15]]]],[11,R[13],E,E,29,[[],[R[15]]]],[11,R[14],E,E,29,[[["self"]],[T]]],[11,R[17],E,E,29,[[["self"]],[T]]],[11,R[16],E,E,29,[[["self"]],[R[18]]]],[11,"from",E,E,30,[[[T]],[T]]],[11,R[32],E,E,30,[[["self"]],[T]]],[11,R[33],E,E,30,[[[T],["self"]]]],[11,"into",E,E,30,[[],[U]]],[11,R[12],E,E,30,[[[U]],[R[15]]]],[11,R[13],E,E,30,[[],[R[15]]]],[11,R[14],E,E,30,[[["self"]],[T]]],[11,R[17],E,E,30,[[["self"]],[T]]],[11,R[16],E,E,30,[[["self"]],[R[18]]]],[11,"from",E,E,31,[[[T]],[T]]],[11,R[32],E,E,31,[[["self"]],[T]]],[11,R[33],E,E,31,[[[T],["self"]]]],[11,"into",E,E,31,[[],[U]]],[11,R[12],E,E,31,[[[U]],[R[15]]]],[11,R[13],E,E,31,[[],[R[15]]]],[11,R[14],E,E,31,[[["self"]],[T]]],[11,R[17],E,E,31,[[["self"]],[T]]],[11,R[16],E,E,31,[[["self"]],[R[18]]]],[11,"from",E,E,32,[[[T]],[T]]],[11,R[32],E,E,32,[[["self"]],[T]]],[11,R[33],E,E,32,[[[T],["self"]]]],[11,"into",E,E,32,[[],[U]]],[11,R[12],E,E,32,[[[U]],[R[15]]]],[11,R[13],E,E,32,[[],[R[15]]]],[11,R[14],E,E,32,[[["self"]],[T]]],[11,R[17],E,E,32,[[["self"]],[T]]],[11,R[16],E,E,32,[[["self"]],[R[18]]]],[11,"from",E,E,33,[[[T]],[T]]],[11,R[32],E,E,33,[[["self"]],[T]]],[11,R[33],E,E,33,[[[T],["self"]]]],[11,"into",E,E,33,[[],[U]]],[11,R[12],E,E,33,[[[U]],[R[15]]]],[11,R[13],E,E,33,[[],[R[15]]]],[11,R[14],E,E,33,[[["self"]],[T]]],[11,R[17],E,E,33,[[["self"]],[T]]],[11,R[16],E,E,33,[[["self"]],[R[18]]]],[11,"from",E,E,34,[[[T]],[T]]],[11,R[32],E,E,34,[[["self"]],[T]]],[11,R[33],E,E,34,[[[T],["self"]]]],[11,"into",E,E,34,[[],[U]]],[11,R[12],E,E,34,[[[U]],[R[15]]]],[11,R[13],E,E,34,[[],[R[15]]]],[11,R[14],E,E,34,[[["self"]],[T]]],[11,R[17],E,E,34,[[["self"]],[T]]],[11,R[16],E,E,34,[[["self"]],[R[18]]]],[11,"from",E,E,35,[[[T]],[T]]],[11,R[32],E,E,35,[[["self"]],[T]]],[11,R[33],E,E,35,[[[T],["self"]]]],[11,"into",E,E,35,[[],[U]]],[11,R[12],E,E,35,[[[U]],[R[15]]]],[11,R[13],E,E,35,[[],[R[15]]]],[11,R[14],E,E,35,[[["self"]],[T]]],[11,R[17],E,E,35,[[["self"]],[T]]],[11,R[16],E,E,35,[[["self"]],[R[18]]]],[11,"from",E,E,36,[[[T]],[T]]],[11,R[32],E,E,36,[[["self"]],[T]]],[11,R[33],E,E,36,[[[T],["self"]]]],[11,"into",E,E,36,[[],[U]]],[11,R[12],E,E,36,[[[U]],[R[15]]]],[11,R[13],E,E,36,[[],[R[15]]]],[11,R[14],E,E,36,[[["self"]],[T]]],[11,R[17],E,E,36,[[["self"]],[T]]],[11,R[16],E,E,36,[[["self"]],[R[18]]]],[11,"from",E,E,37,[[[T]],[T]]],[11,R[32],E,E,37,[[["self"]],[T]]],[11,R[33],E,E,37,[[[T],["self"]]]],[11,"into",E,E,37,[[],[U]]],[11,R[12],E,E,37,[[[U]],[R[15]]]],[11,R[13],E,E,37,[[],[R[15]]]],[11,R[14],E,E,37,[[["self"]],[T]]],[11,R[17],E,E,37,[[["self"]],[T]]],[11,R[16],E,E,37,[[["self"]],[R[18]]]],[11,"from",E,E,38,[[[T]],[T]]],[11,R[32],E,E,38,[[["self"]],[T]]],[11,R[33],E,E,38,[[[T],["self"]]]],[11,"into",E,E,38,[[],[U]]],[11,R[12],E,E,38,[[[U]],[R[15]]]],[11,R[13],E,E,38,[[],[R[15]]]],[11,R[14],E,E,38,[[["self"]],[T]]],[11,R[17],E,E,38,[[["self"]],[T]]],[11,R[16],E,E,38,[[["self"]],[R[18]]]],[11,"from",E,E,39,[[[T]],[T]]],[11,R[32],E,E,39,[[["self"]],[T]]],[11,R[33],E,E,39,[[[T],["self"]]]],[11,"into",E,E,39,[[],[U]]],[11,R[12],E,E,39,[[[U]],[R[15]]]],[11,R[13],E,E,39,[[],[R[15]]]],[11,R[14],E,E,39,[[["self"]],[T]]],[11,R[17],E,E,39,[[["self"]],[T]]],[11,R[16],E,E,39,[[["self"]],[R[18]]]],[11,"from",E,E,40,[[[T]],[T]]],[11,R[32],E,E,40,[[["self"]],[T]]],[11,R[33],E,E,40,[[[T],["self"]]]],[11,"into",E,E,40,[[],[U]]],[11,R[12],E,E,40,[[[U]],[R[15]]]],[11,R[13],E,E,40,[[],[R[15]]]],[11,R[14],E,E,40,[[["self"]],[T]]],[11,R[17],E,E,40,[[["self"]],[T]]],[11,R[16],E,E,40,[[["self"]],[R[18]]]],[11,"from",E,E,41,[[[T]],[T]]],[11,R[32],E,E,41,[[["self"]],[T]]],[11,R[33],E,E,41,[[[T],["self"]]]],[11,"into",E,E,41,[[],[U]]],[11,R[12],E,E,41,[[[U]],[R[15]]]],[11,R[13],E,E,41,[[],[R[15]]]],[11,R[14],E,E,41,[[["self"]],[T]]],[11,R[17],E,E,41,[[["self"]],[T]]],[11,R[16],E,E,41,[[["self"]],[R[18]]]],[11,"from",R[223],E,42,[[[T]],[T]]],[11,R[32],E,E,42,[[["self"]],[T]]],[11,R[33],E,E,42,[[[T],["self"]]]],[11,"into",E,E,42,[[],[U]]],[11,R[12],E,E,42,[[[U]],[R[15]]]],[11,R[13],E,E,42,[[],[R[15]]]],[11,R[14],E,E,42,[[["self"]],[T]]],[11,R[17],E,E,42,[[["self"]],[T]]],[11,R[16],E,E,42,[[["self"]],[R[18]]]],[11,"from",E,E,43,[[[T]],[T]]],[11,R[32],E,E,43,[[["self"]],[T]]],[11,R[33],E,E,43,[[[T],["self"]]]],[11,"into",E,E,43,[[],[U]]],[11,R[12],E,E,43,[[[U]],[R[15]]]],[11,R[13],E,E,43,[[],[R[15]]]],[11,R[14],E,E,43,[[["self"]],[T]]],[11,R[17],E,E,43,[[["self"]],[T]]],[11,R[16],E,E,43,[[["self"]],[R[18]]]],[11,"from",R[224],E,44,[[[T]],[T]]],[11,"into",E,E,44,[[],[U]]],[11,R[12],E,E,44,[[[U]],[R[15]]]],[11,R[13],E,E,44,[[],[R[15]]]],[11,R[14],E,E,44,[[["self"]],[T]]],[11,R[17],E,E,44,[[["self"]],[T]]],[11,R[16],E,E,44,[[["self"]],[R[18]]]],[11,"from",R[164],E,64,[[[T]],[T]]],[11,R[32],E,E,64,[[["self"]],[T]]],[11,R[33],E,E,64,[[[T],["self"]]]],[11,R[81],E,E,64,[[["self"]],[R[2]]]],[11,"into",E,E,64,[[],[U]]],[11,R[12],E,E,64,[[[U]],[R[15]]]],[11,R[13],E,E,64,[[],[R[15]]]],[11,R[14],E,E,64,[[["self"]],[T]]],[11,R[17],E,E,64,[[["self"]],[T]]],[11,R[16],E,E,64,[[["self"]],[R[18]]]],[11,"from",E,E,65,[[[T]],[T]]],[11,R[32],E,E,65,[[["self"]],[T]]],[11,R[33],E,E,65,[[[T],["self"]]]],[11,R[81],E,E,65,[[["self"]],[R[2]]]],[11,"into",E,E,65,[[],[U]]],[11,R[12],E,E,65,[[[U]],[R[15]]]],[11,R[13],E,E,65,[[],[R[15]]]],[11,R[14],E,E,65,[[["self"]],[T]]],[11,R[17],E,E,65,[[["self"]],[T]]],[11,R[16],E,E,65,[[["self"]],[R[18]]]],[11,"from",E,E,66,[[[T]],[T]]],[11,R[32],E,E,66,[[["self"]],[T]]],[11,R[33],E,E,66,[[[T],["self"]]]],[11,"into",E,E,66,[[],[U]]],[11,R[12],E,E,66,[[[U]],[R[15]]]],[11,R[13],E,E,66,[[],[R[15]]]],[11,R[14],E,E,66,[[["self"]],[T]]],[11,R[17],E,E,66,[[["self"]],[T]]],[11,R[16],E,E,66,[[["self"]],[R[18]]]],[11,"from",E,E,72,[[[T]],[T]]],[11,R[50],E,E,72,[[],["i"]]],[11,"into",E,E,72,[[],[U]]],[11,R[12],E,E,72,[[[U]],[R[15]]]],[11,R[13],E,E,72,[[],[R[15]]]],[11,R[14],E,E,72,[[["self"]],[T]]],[11,R[17],E,E,72,[[["self"]],[T]]],[11,R[16],E,E,72,[[["self"]],[R[18]]]],[11,"from",E,E,67,[[[T]],[T]]],[11,R[32],E,E,67,[[["self"]],[T]]],[11,R[33],E,E,67,[[[T],["self"]]]],[11,"into",E,E,67,[[],[U]]],[11,R[12],E,E,67,[[[U]],[R[15]]]],[11,R[13],E,E,67,[[],[R[15]]]],[11,R[14],E,E,67,[[["self"]],[T]]],[11,R[17],E,E,67,[[["self"]],[T]]],[11,R[16],E,E,67,[[["self"]],[R[18]]]],[11,"from",E,E,68,[[[T]],[T]]],[11,R[32],E,E,68,[[["self"]],[T]]],[11,R[33],E,E,68,[[[T],["self"]]]],[11,"into",E,E,68,[[],[U]]],[11,R[12],E,E,68,[[[U]],[R[15]]]],[11,R[13],E,E,68,[[],[R[15]]]],[11,R[14],E,E,68,[[["self"]],[T]]],[11,R[17],E,E,68,[[["self"]],[T]]],[11,R[16],E,E,68,[[["self"]],[R[18]]]],[11,"from",E,E,73,[[[T]],[T]]],[11,R[50],E,E,73,[[],["i"]]],[11,"into",E,E,73,[[],[U]]],[11,R[12],E,E,73,[[[U]],[R[15]]]],[11,R[13],E,E,73,[[],[R[15]]]],[11,R[14],E,E,73,[[["self"]],[T]]],[11,R[17],E,E,73,[[["self"]],[T]]],[11,R[16],E,E,73,[[["self"]],[R[18]]]],[11,"from",E,E,69,[[[T]],[T]]],[11,R[32],E,E,69,[[["self"]],[T]]],[11,R[33],E,E,69,[[[T],["self"]]]],[11,"into",E,E,69,[[],[U]]],[11,R[12],E,E,69,[[[U]],[R[15]]]],[11,R[13],E,E,69,[[],[R[15]]]],[11,R[14],E,E,69,[[["self"]],[T]]],[11,R[17],E,E,69,[[["self"]],[T]]],[11,R[16],E,E,69,[[["self"]],[R[18]]]],[11,"from",E,E,47,[[[T]],[T]]],[11,R[32],E,E,47,[[["self"]],[T]]],[11,R[33],E,E,47,[[[T],["self"]]]],[11,"into",E,E,47,[[],[U]]],[11,R[12],E,E,47,[[[U]],[R[15]]]],[11,R[13],E,E,47,[[],[R[15]]]],[11,R[14],E,E,47,[[["self"]],[T]]],[11,R[17],E,E,47,[[["self"]],[T]]],[11,R[16],E,E,47,[[["self"]],[R[18]]]],[11,"from",E,E,48,[[[T]],[T]]],[11,R[32],E,E,48,[[["self"]],[T]]],[11,R[33],E,E,48,[[[T],["self"]]]],[11,"into",E,E,48,[[],[U]]],[11,R[12],E,E,48,[[[U]],[R[15]]]],[11,R[13],E,E,48,[[],[R[15]]]],[11,R[14],E,E,48,[[["self"]],[T]]],[11,R[17],E,E,48,[[["self"]],[T]]],[11,R[16],E,E,48,[[["self"]],[R[18]]]],[11,"from",E,E,49,[[[T]],[T]]],[11,R[32],E,E,49,[[["self"]],[T]]],[11,R[33],E,E,49,[[[T],["self"]]]],[11,R[81],E,E,49,[[["self"]],[R[2]]]],[11,"into",E,E,49,[[],[U]]],[11,R[12],E,E,49,[[[U]],[R[15]]]],[11,R[13],E,E,49,[[],[R[15]]]],[11,R[14],E,E,49,[[["self"]],[T]]],[11,R[17],E,E,49,[[["self"]],[T]]],[11,R[16],E,E,49,[[["self"]],[R[18]]]],[11,"from",E,E,50,[[[T]],[T]]],[11,R[32],E,E,50,[[["self"]],[T]]],[11,R[33],E,E,50,[[[T],["self"]]]],[11,"into",E,E,50,[[],[U]]],[11,R[12],E,E,50,[[[U]],[R[15]]]],[11,R[13],E,E,50,[[],[R[15]]]],[11,R[14],E,E,50,[[["self"]],[T]]],[11,R[17],E,E,50,[[["self"]],[T]]],[11,R[16],E,E,50,[[["self"]],[R[18]]]],[11,"from",E,E,51,[[[T]],[T]]],[11,R[32],E,E,51,[[["self"]],[T]]],[11,R[33],E,E,51,[[[T],["self"]]]],[11,"into",E,E,51,[[],[U]]],[11,R[12],E,E,51,[[[U]],[R[15]]]],[11,R[13],E,E,51,[[],[R[15]]]],[11,R[14],E,E,51,[[["self"]],[T]]],[11,R[17],E,E,51,[[["self"]],[T]]],[11,R[16],E,E,51,[[["self"]],[R[18]]]],[11,"from",E,E,52,[[[T]],[T]]],[11,R[32],E,E,52,[[["self"]],[T]]],[11,R[33],E,E,52,[[[T],["self"]]]],[11,"into",E,E,52,[[],[U]]],[11,R[12],E,E,52,[[[U]],[R[15]]]],[11,R[13],E,E,52,[[],[R[15]]]],[11,R[14],E,E,52,[[["self"]],[T]]],[11,R[17],E,E,52,[[["self"]],[T]]],[11,R[16],E,E,52,[[["self"]],[R[18]]]],[11,"from",E,E,53,[[[T]],[T]]],[11,R[32],E,E,53,[[["self"]],[T]]],[11,R[33],E,E,53,[[[T],["self"]]]],[11,"into",E,E,53,[[],[U]]],[11,R[12],E,E,53,[[[U]],[R[15]]]],[11,R[13],E,E,53,[[],[R[15]]]],[11,R[14],E,E,53,[[["self"]],[T]]],[11,R[17],E,E,53,[[["self"]],[T]]],[11,R[16],E,E,53,[[["self"]],[R[18]]]],[11,"from",E,E,54,[[[T]],[T]]],[11,R[32],E,E,54,[[["self"]],[T]]],[11,R[33],E,E,54,[[[T],["self"]]]],[11,"into",E,E,54,[[],[U]]],[11,R[12],E,E,54,[[[U]],[R[15]]]],[11,R[13],E,E,54,[[],[R[15]]]],[11,R[14],E,E,54,[[["self"]],[T]]],[11,R[17],E,E,54,[[["self"]],[T]]],[11,R[16],E,E,54,[[["self"]],[R[18]]]],[11,"from",E,E,55,[[[T]],[T]]],[11,R[32],E,E,55,[[["self"]],[T]]],[11,R[33],E,E,55,[[[T],["self"]]]],[11,"into",E,E,55,[[],[U]]],[11,R[12],E,E,55,[[[U]],[R[15]]]],[11,R[13],E,E,55,[[],[R[15]]]],[11,R[14],E,E,55,[[["self"]],[T]]],[11,R[17],E,E,55,[[["self"]],[T]]],[11,R[16],E,E,55,[[["self"]],[R[18]]]],[11,"from",E,E,56,[[[T]],[T]]],[11,R[32],E,E,56,[[["self"]],[T]]],[11,R[33],E,E,56,[[[T],["self"]]]],[11,"into",E,E,56,[[],[U]]],[11,R[12],E,E,56,[[[U]],[R[15]]]],[11,R[13],E,E,56,[[],[R[15]]]],[11,R[14],E,E,56,[[["self"]],[T]]],[11,R[17],E,E,56,[[["self"]],[T]]],[11,R[16],E,E,56,[[["self"]],[R[18]]]],[11,"from",E,E,57,[[[T]],[T]]],[11,R[32],E,E,57,[[["self"]],[T]]],[11,R[33],E,E,57,[[[T],["self"]]]],[11,"into",E,E,57,[[],[U]]],[11,R[12],E,E,57,[[[U]],[R[15]]]],[11,R[13],E,E,57,[[],[R[15]]]],[11,R[14],E,E,57,[[["self"]],[T]]],[11,R[17],E,E,57,[[["self"]],[T]]],[11,R[16],E,E,57,[[["self"]],[R[18]]]],[11,"from",R[225],E,58,[[[T]],[T]]],[11,R[32],E,E,58,[[["self"]],[T]]],[11,R[33],E,E,58,[[[T],["self"]]]],[11,"into",E,E,58,[[],[U]]],[11,R[12],E,E,58,[[[U]],[R[15]]]],[11,R[13],E,E,58,[[],[R[15]]]],[11,R[14],E,E,58,[[["self"]],[T]]],[11,R[17],E,E,58,[[["self"]],[T]]],[11,R[16],E,E,58,[[["self"]],[R[18]]]],[11,"from",E,E,59,[[[T]],[T]]],[11,R[32],E,E,59,[[["self"]],[T]]],[11,R[33],E,E,59,[[[T],["self"]]]],[11,"into",E,E,59,[[],[U]]],[11,R[12],E,E,59,[[[U]],[R[15]]]],[11,R[13],E,E,59,[[],[R[15]]]],[11,R[14],E,E,59,[[["self"]],[T]]],[11,R[17],E,E,59,[[["self"]],[T]]],[11,R[16],E,E,59,[[["self"]],[R[18]]]],[11,"from",R[226],E,60,[[[T]],[T]]],[11,"into",E,E,60,[[],[U]]],[11,R[12],E,E,60,[[[U]],[R[15]]]],[11,R[13],E,E,60,[[],[R[15]]]],[11,R[14],E,E,60,[[["self"]],[T]]],[11,R[17],E,E,60,[[["self"]],[T]]],[11,R[16],E,E,60,[[["self"]],[R[18]]]],[11,"from",R[227],E,61,[[[T]],[T]]],[11,R[32],E,E,61,[[["self"]],[T]]],[11,R[33],E,E,61,[[[T],["self"]]]],[11,"into",E,E,61,[[],[U]]],[11,R[12],E,E,61,[[[U]],[R[15]]]],[11,R[13],E,E,61,[[],[R[15]]]],[11,R[14],E,E,61,[[["self"]],[T]]],[11,R[17],E,E,61,[[["self"]],[T]]],[11,R[16],E,E,61,[[["self"]],[R[18]]]],[11,"from",E,E,62,[[[T]],[T]]],[11,R[32],E,E,62,[[["self"]],[T]]],[11,R[33],E,E,62,[[[T],["self"]]]],[11,"into",E,E,62,[[],[U]]],[11,R[12],E,E,62,[[[U]],[R[15]]]],[11,R[13],E,E,62,[[],[R[15]]]],[11,R[14],E,E,62,[[["self"]],[T]]],[11,R[17],E,E,62,[[["self"]],[T]]],[11,R[16],E,E,62,[[["self"]],[R[18]]]],[11,"next",R[164],E,72,[[["self"]],[[R[193]],[R[3],[R[193]]]]]],[11,"next",E,E,73,[[["self"]],[[R[3],[R[204]]],[R[204]]]]],[11,"eq",R[130],E,46,[[["error"],["self"]],["bool"]]],[11,"ne",E,E,46,[[["error"],["self"]],["bool"]]],[11,"eq",E,E,23,[[["self"],[R[104]]],["bool"]]],[11,"ne",E,E,23,[[["self"],[R[104]]],["bool"]]],[11,"eq",E,E,1,[[["self"],["span"]],["bool"]]],[11,"ne",E,E,1,[[["self"],["span"]],["bool"]]],[11,"eq",E,E,2,[[["self"],[R[151]]],["bool"]]],[11,"ne",E,E,2,[[["self"],[R[151]]],["bool"]]],[11,"eq",E,E,3,[[["self"],[R[148]]],["bool"]]],[11,"ne",E,E,3,[[["self"],[R[148]]],["bool"]]],[11,"eq",E,E,4,[[["self"],["comment"]],["bool"]]],[11,"ne",E,E,4,[[["self"],["comment"]],["bool"]]],[11,"eq",E,E,24,[[["ast"],["self"]],["bool"]]],[11,"ne",E,E,24,[[["ast"],["self"]],["bool"]]],[11,"eq",E,E,5,[[["self"],[R[228]]],["bool"]]],[11,"ne",E,E,5,[[["self"],[R[228]]],["bool"]]],[11,"eq",E,E,6,[[["self"],["concat"]],["bool"]]],[11,"ne",E,E,6,[[["self"],["concat"]],["bool"]]],[11,"eq",E,E,7,[[["self"],[R[186]]],["bool"]]],[11,"ne",E,E,7,[[["self"],[R[186]]],["bool"]]],[11,"eq",E,E,25,[[["self"],[R[229]]],["bool"]]],[11,"ne",E,E,25,[[["self"],[R[229]]],["bool"]]],[11,"eq",E,E,26,[[["self"],[R[246]]],["bool"]]],[11,"eq",E,E,27,[[[R[247]],["self"]],["bool"]]],[11,"eq",E,E,28,[[["class"],["self"]],["bool"]]],[11,"ne",E,E,28,[[["class"],["self"]],["bool"]]],[11,"eq",E,E,8,[[["self"],[R[230]]],["bool"]]],[11,"ne",E,E,8,[[["self"],[R[230]]],["bool"]]],[11,"eq",E,E,29,[[["self"],[R[248]]],["bool"]]],[11,"eq",E,E,9,[[[R[231]],["self"]],["bool"]]],[11,"ne",E,E,9,[[[R[231]],["self"]],["bool"]]],[11,"eq",E,E,30,[[["self"],[R[153]]],["bool"]]],[11,"eq",E,E,10,[[["self"],[R[191]]],["bool"]]],[11,"ne",E,E,10,[[["self"],[R[191]]],["bool"]]],[11,"eq",E,E,31,[[["self"],[R[232]]],["bool"]]],[11,"ne",E,E,31,[[["self"],[R[232]]],["bool"]]],[11,"eq",E,E,32,[[["self"],[R[249]]],["bool"]]],[11,"eq",E,E,11,[[["self"],[R[233]]],["bool"]]],[11,"ne",E,E,11,[[["self"],[R[233]]],["bool"]]],[11,"eq",E,E,33,[[["self"],[R[234]]],["bool"]]],[11,"ne",E,E,33,[[["self"],[R[234]]],["bool"]]],[11,"eq",E,E,34,[[["self"],[R[149]]],["bool"]]],[11,"ne",E,E,34,[[["self"],[R[149]]],["bool"]]],[11,"eq",E,E,12,[[["self"],[R[235]]],["bool"]]],[11,"ne",E,E,12,[[["self"],[R[235]]],["bool"]]],[11,"eq",E,E,13,[[[R[236]],["self"]],["bool"]]],[11,"ne",E,E,13,[[[R[236]],["self"]],["bool"]]],[11,"eq",E,E,14,[[["self"],[R[150]]],["bool"]]],[11,"ne",E,E,14,[[["self"],[R[150]]],["bool"]]],[11,"eq",E,E,35,[[["self"],[R[250]]],["bool"]]],[11,"eq",E,E,15,[[["self"],[R[237]]],["bool"]]],[11,"ne",E,E,15,[[["self"],[R[237]]],["bool"]]],[11,"eq",E,E,36,[[["self"],[R[251]]],["bool"]]],[11,"eq",E,E,16,[[["self"],[R[187]]],["bool"]]],[11,"ne",E,E,16,[[["self"],[R[187]]],["bool"]]],[11,"eq",E,E,17,[[[R[238]],["self"]],["bool"]]],[11,"ne",E,E,17,[[[R[238]],["self"]],["bool"]]],[11,"eq",E,E,37,[[["self"],[R[239]]],["bool"]]],[11,"ne",E,E,37,[[["self"],[R[239]]],["bool"]]],[11,"eq",E,E,38,[[[R[240]],["self"]],["bool"]]],[11,"ne",E,E,38,[[[R[240]],["self"]],["bool"]]],[11,"eq",E,E,18,[[["group"],["self"]],["bool"]]],[11,"ne",E,E,18,[[["group"],["self"]],["bool"]]],[11,"eq",E,E,39,[[["self"],[R[241]]],["bool"]]],[11,"ne",E,E,39,[[["self"],[R[241]]],["bool"]]],[11,"eq",E,E,19,[[[R[242]],["self"]],["bool"]]],[11,"ne",E,E,19,[[[R[242]],["self"]],["bool"]]],[11,"eq",E,E,20,[[["self"],[R[252]]],["bool"]]],[11,"ne",E,E,20,[[["self"],[R[252]]],["bool"]]],[11,"eq",E,E,21,[[["flags"],["self"]],["bool"]]],[11,"ne",E,E,21,[[["flags"],["self"]],["bool"]]],[11,"eq",E,E,22,[[["self"],[R[243]]],["bool"]]],[11,"ne",E,E,22,[[["self"],[R[243]]],["bool"]]],[11,"eq",E,E,40,[[["self"],[R[244]]],["bool"]]],[11,"ne",E,E,40,[[["self"],[R[244]]],["bool"]]],[11,"eq",E,E,41,[[["self"],["flag"]],["bool"]]],[11,"eq",R[154],E,0,[[["self"],["error"]],["bool"]]],[11,"ne",E,E,0,[[["self"],["error"]],["bool"]]],[11,"eq",R[225],E,58,[[["self"],[R[173]]],["bool"]]],[11,"ne",E,E,58,[[["self"],[R[173]]],["bool"]]],[11,"eq",E,E,59,[[[R[186]],["self"]],["bool"]]],[11,"eq",R[164],E,64,[[["self"],["error"]],["bool"]]],[11,"ne",E,E,64,[[["self"],["error"]],["bool"]]],[11,"eq",E,E,49,[[[R[104]],["self"]],["bool"]]],[11,"eq",E,E,65,[[["self"],["hir"]],["bool"]]],[11,"ne",E,E,65,[[["self"],["hir"]],["bool"]]],[11,"eq",E,E,50,[[["self"],["hirkind"]],["bool"]]],[11,"ne",E,E,50,[[["self"],["hirkind"]],["bool"]]],[11,"eq",E,E,51,[[["self"],[R[186]]],["bool"]]],[11,"ne",E,E,51,[[["self"],[R[186]]],["bool"]]],[11,"eq",E,E,52,[[["class"],["self"]],["bool"]]],[11,"ne",E,E,52,[[["class"],["self"]],["bool"]]],[11,"eq",E,E,66,[[["self"],[R[191]]],["bool"]]],[11,"ne",E,E,66,[[["self"],[R[191]]],["bool"]]],[11,"eq",E,E,67,[[["self"],[R[193]]],["bool"]]],[11,"ne",E,E,67,[[["self"],[R[193]]],["bool"]]],[11,"eq",E,E,68,[[["self"],[R[195]]],["bool"]]],[11,"ne",E,E,68,[[["self"],[R[195]]],["bool"]]],[11,"eq",E,E,69,[[["self"],[R[204]]],["bool"]]],[11,"ne",E,E,69,[[["self"],[R[204]]],["bool"]]],[11,"eq",E,E,53,[[["self"],["anchor"]],["bool"]]],[11,"eq",E,E,54,[[["self"],[R[245]]],["bool"]]],[11,"eq",E,E,47,[[["self"],["group"]],["bool"]]],[11,"ne",E,E,47,[[["self"],["group"]],["bool"]]],[11,"eq",E,E,55,[[["self"],[R[241]]],["bool"]]],[11,"ne",E,E,55,[[["self"],[R[241]]],["bool"]]],[11,"eq",E,E,48,[[[R[187]],["self"]],["bool"]]],[11,"ne",E,E,48,[[[R[187]],["self"]],["bool"]]],[11,"eq",E,E,56,[[[R[239]],["self"]],["bool"]]],[11,"ne",E,E,56,[[[R[239]],["self"]],["bool"]]],[11,"eq",E,E,57,[[[R[240]],["self"]],["bool"]]],[11,"ne",E,E,57,[[[R[240]],["self"]],["bool"]]],[11,"as_ref",R[225],E,59,[[["self"]]]],[11,"from",R[154],E,0,[[["error"]],["error"]]],[11,"from",E,E,0,[[["error"]],["error"]]],[11,"clone",R[223],E,42,[[["self"]],[R[147]]]],[11,"clone",E,E,43,[[["self"]],["parser"]]],[11,"clone",R[130],E,46,[[["self"]],["error"]]],[11,"clone",E,E,23,[[["self"]],[R[104]]]],[11,"clone",E,E,1,[[["self"]],["span"]]],[11,"clone",E,E,2,[[["self"]],[R[151]]]],[11,"clone",E,E,3,[[["self"]],[R[148]]]],[11,"clone",E,E,4,[[["self"]],["comment"]]],[11,"clone",E,E,24,[[["self"]],["ast"]]],[11,"clone",E,E,5,[[["self"]],[R[228]]]],[11,"clone",E,E,6,[[["self"]],["concat"]]],[11,"clone",E,E,7,[[["self"]],[R[186]]]],[11,"clone",E,E,25,[[["self"]],[R[229]]]],[11,"clone",E,E,26,[[["self"]],[R[246]]]],[11,"clone",E,E,27,[[["self"]],[R[247]]]],[11,"clone",E,E,28,[[["self"]],["class"]]],[11,"clone",E,E,8,[[["self"]],[R[230]]]],[11,"clone",E,E,29,[[["self"]],[R[248]]]],[11,"clone",E,E,9,[[["self"]],[R[231]]]],[11,"clone",E,E,30,[[["self"]],[R[153]]]],[11,"clone",E,E,10,[[["self"]],[R[191]]]],[11,"clone",E,E,31,[[["self"]],[R[232]]]],[11,"clone",E,E,32,[[["self"]],[R[249]]]],[11,"clone",E,E,11,[[["self"]],[R[233]]]],[11,"clone",E,E,33,[[["self"]],[R[234]]]],[11,"clone",E,E,34,[[["self"]],[R[149]]]],[11,"clone",E,E,12,[[["self"]],[R[235]]]],[11,"clone",E,E,13,[[["self"]],[R[236]]]],[11,"clone",E,E,14,[[["self"]],[R[150]]]],[11,"clone",E,E,35,[[["self"]],[R[250]]]],[11,"clone",E,E,15,[[["self"]],[R[237]]]],[11,"clone",E,E,36,[[["self"]],[R[251]]]],[11,"clone",E,E,16,[[["self"]],[R[187]]]],[11,"clone",E,E,17,[[["self"]],[R[238]]]],[11,"clone",E,E,37,[[["self"]],[R[239]]]],[11,"clone",E,E,38,[[["self"]],[R[240]]]],[11,"clone",E,E,18,[[["self"]],["group"]]],[11,"clone",E,E,39,[[["self"]],[R[241]]]],[11,"clone",E,E,19,[[["self"]],[R[242]]]],[11,"clone",E,E,20,[[["self"]],[R[252]]]],[11,"clone",E,E,21,[[["self"]],["flags"]]],[11,"clone",E,E,22,[[["self"]],[R[243]]]],[11,"clone",E,E,40,[[["self"]],[R[244]]]],[11,"clone",E,E,41,[[["self"]],["flag"]]],[11,"clone",R[154],E,0,[[["self"]],["error"]]],[11,"clone",R[225],E,58,[[["self"]],[R[173]]]],[11,"clone",E,E,59,[[["self"]],[R[186]]]],[11,"clone",R[227],E,61,[[["self"]],[R[176]]]],[11,"clone",E,E,62,[[["self"]],[R[177]]]],[11,"clone",R[164],E,64,[[["self"]],["error"]]],[11,"clone",E,E,49,[[["self"]],[R[104]]]],[11,"clone",E,E,65,[[["self"]],["hir"]]],[11,"clone",E,E,50,[[["self"]],["hirkind"]]],[11,"clone",E,E,51,[[["self"]],[R[186]]]],[11,"clone",E,E,52,[[["self"]],["class"]]],[11,"clone",E,E,66,[[["self"]],[R[191]]]],[11,"clone",E,E,67,[[["self"]],[R[193]]]],[11,"clone",E,E,68,[[["self"]],[R[195]]]],[11,"clone",E,E,69,[[["self"]],[R[204]]]],[11,"clone",E,E,53,[[["self"]],["anchor"]]],[11,"clone",E,E,54,[[["self"]],[R[245]]]],[11,"clone",E,E,47,[[["self"]],["group"]]],[11,"clone",E,E,55,[[["self"]],[R[241]]]],[11,"clone",E,E,48,[[["self"]],[R[187]]]],[11,"clone",E,E,56,[[["self"]],[R[239]]]],[11,"clone",E,E,57,[[["self"]],[R[240]]]],[11,"clone",R[154],E,70,[[["self"]],[R[147]]]],[11,"clone",E,E,71,[[["self"]],["parser"]]],[11,"cmp",R[130],E,1,[[["self"],["span"]],[R[253]]]],[11,"cmp",E,E,2,[[["self"],[R[151]]],[R[253]]]],[11,"cmp",R[225],E,59,[[[R[186]],["self"]],[R[253]]]],[11,"cmp",R[164],E,67,[[["self"],[R[193]]],[R[253]]]],[11,"cmp",E,E,69,[[["self"],[R[204]]],[R[253]]]],[11,R[23],R[223],E,42,[[],[R[147]]]],[11,R[23],R[227],E,61,[[],[R[176]]]],[11,R[23],R[164],E,67,[[],[R[193]]]],[11,R[23],E,E,69,[[],[R[204]]]],[11,R[23],R[154],E,70,[[],[R[147]]]],[11,"drop",R[130],E,24,[[["self"]]]],[11,"drop",E,E,33,[[["self"]]]],[11,"drop",R[164],E,65,[[["self"]]]],[11,R[254],R[130],E,1,[[["self"],["span"]],[[R[253]],[R[3],[R[253]]]]]],[11,R[254],E,E,2,[[["self"],[R[151]]],[[R[253]],[R[3],[R[253]]]]]],[11,R[254],R[225],E,59,[[[R[186]],["self"]],[[R[3],[R[253]]],[R[253]]]]],[11,R[254],R[164],E,67,[[["self"],[R[193]]],[[R[253]],[R[3],[R[253]]]]]],[11,"lt",E,E,67,[[["self"],[R[193]]],["bool"]]],[11,"le",E,E,67,[[["self"],[R[193]]],["bool"]]],[11,"gt",E,E,67,[[["self"],[R[193]]],["bool"]]],[11,"ge",E,E,67,[[["self"],[R[193]]],["bool"]]],[11,R[254],E,E,69,[[["self"],[R[204]]],[[R[253]],[R[3],[R[253]]]]]],[11,"lt",E,E,69,[[["self"],[R[204]]],["bool"]]],[11,"le",E,E,69,[[["self"],[R[204]]],["bool"]]],[11,"gt",E,E,69,[[["self"],[R[204]]],["bool"]]],[11,"ge",E,E,69,[[["self"],[R[204]]],["bool"]]],[11,"deref",R[225],E,59,[[["self"]],["vec"]]],[11,"deref_mut",E,E,59,[[["self"]],["vec"]]],[11,"fmt",R[130],E,46,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,23,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,24,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[154],E,0,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[164],E,64,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,49,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,65,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[223],E,42,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,43,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[224],E,44,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[130],E,46,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,23,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,1,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,2,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,3,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,4,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,24,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,5,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,6,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,7,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,25,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,26,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,27,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,28,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,8,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,29,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,9,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,30,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,10,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,31,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,32,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,11,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,33,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,34,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,12,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,13,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,14,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,35,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,15,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,36,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,16,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,17,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,37,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,38,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,18,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,39,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,19,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,20,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,21,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,22,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,40,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,41,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[154],E,0,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[225],E,58,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,59,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[226],E,60,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[227],E,61,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,62,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[164],E,64,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,49,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,65,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,50,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,51,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,52,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,66,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,72,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,67,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,68,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,73,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,69,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,53,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,54,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,47,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,55,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,48,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,56,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,57,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",R[154],E,70,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,71,[[["self"],[R[36]]],[R[15]]]],[11,R[255],R[130],E,46,[[["self"]],["str"]]],[11,R[255],R[154],E,0,[[["self"]],["str"]]],[11,R[255],R[164],E,64,[[["self"]],["str"]]],[11,"start",R[130],R[256],45,[[["self"]]]],[11,R[180],E,R[257],45,[[["self"],["ast"]],[R[15]]]],[11,R[181],E,R[258],45,[[["self"],["ast"]],[R[15]]]],[11,R[182],E,R[259],45,[[["self"]],[R[15]]]],[11,R[260],E,R[261],45,[[["self"],[R[149]]],[R[15]]]],[11,R[262],E,R[263],45,[[["self"],[R[149]]],[R[15]]]],[11,R[264],E,R[265],45,[[["self"],[R[150]]],[R[15]]]],[11,R[266],E,R[267],45,[[["self"],[R[150]]],[R[15]]]],[11,R[268],E,R[269],45,[[["self"],[R[150]]],[R[15]]]],[11,"start",R[164],R[270],63,[[["self"]]]],[11,R[180],E,R[271],63,[[["self"],["hir"]],[R[15]]]],[11,R[181],E,R[272],63,[[["self"],["hir"]],[R[15]]]],[11,R[182],E,R[273],63,[[["self"]],[R[15]]]]],"p":[[4,"Error"],[3,"Span"],[3,"Position"],[3,R[274]],[3,"Comment"],[3,R[137]],[3,"Concat"],[3,R[172]],[3,R[275]],[3,R[276]],[3,R[155]],[3,R[277]],[3,R[278]],[3,R[279]],[3,R[280]],[3,R[133]],[3,R[135]],[3,R[281]],[3,"Group"],[3,R[144]],[3,"SetFlags"],[3,"Flags"],[3,R[282]],[4,R[106]],[4,"Ast"],[4,R[283]],[4,R[284]],[4,R[285]],[4,"Class"],[4,R[286]],[4,R[287]],[4,R[288]],[4,R[289]],[4,"ClassSet"],[4,R[290]],[4,R[291]],[4,R[292]],[4,R[165]],[4,R[170]],[4,R[161]],[4,R[293]],[4,"Flag"],[3,R[145]],[3,"Parser"],[3,"Printer"],[8,"Visitor"],[3,"Error"],[3,"Group"],[3,R[135]],[4,R[106]],[4,"HirKind"],[4,R[172]],[4,"Class"],[4,"Anchor"],[4,R[156]],[4,R[161]],[4,R[165]],[4,R[170]],[3,"Literals"],[3,R[172]],[3,"Printer"],[3,R[294]],[3,R[295]],[8,"Visitor"],[3,"Error"],[3,"Hir"],[3,R[155]],[3,R[296]],[3,R[297]],[3,R[298]],[3,R[145]],[3,"Parser"],[3,R[299]],[3,R[300]]]};
searchIndex["thread_local"]={"doc":"Per-object thread-local storage","i":[[3,R[54],"thread_local","Thread-local variable wrapper",N,N],[3,"IterMut",E,"Mutable iterator over the contents of a `ThreadLocal`.",N,N],[3,R[56],E,"An iterator that moves out of a `ThreadLocal`.",N,N],[3,R[55],E,"Wrapper around `ThreadLocal` which adds a fast path for a…",N,N],[6,"CachedIterMut",E,"Mutable iterator over the contents of a `CachedThreadLocal`.",N,N],[6,"CachedIntoIter",E,"An iterator that moves out of a `CachedThreadLocal`.",N,N],[11,"new",E,"Creates a new empty `ThreadLocal`.",0,[[],[R[52]]]],[11,"get",E,R[43],0,[[["self"]],[[T],[R[3]]]]],[11,"get_or",E,R[42],0,[[["self"],["f"]],[T]]],[11,R[44],E,R[42],0,[[["self"],["f"]],[[T],[R[15]]]]],[11,R[45],E,R[46],0,[[["self"]],["itermut"]]],[11,"clear",E,R[47],0,[[["self"]]]],[11,R[48],E,R[49],0,[[["self"]],[T]]],[11,"new",E,"Creates a new empty `CachedThreadLocal`.",1,[[],[R[53]]]],[11,"get",E,R[43],1,[[["self"]],[[T],[R[3]]]]],[11,"get_or",E,R[42],1,[[["self"],["f"]],[T]]],[11,R[44],E,R[42],1,[[["self"],["f"]],[[T],[R[15]]]]],[11,R[45],E,R[46],1,[[["self"]],["cacheditermut"]]],[11,"clear",E,R[47],1,[[["self"]]]],[11,R[48],E,R[49],1,[[["self"]],[T]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[50],E,E,0,[[],["i"]]],[11,"into",E,E,0,[[],[U]]],[11,R[12],E,E,0,[[[U]],[R[15]]]],[11,R[13],E,E,0,[[],[R[15]]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[50],E,E,2,[[],["i"]]],[11,"into",E,E,2,[[],[U]]],[11,R[12],E,E,2,[[[U]],[R[15]]]],[11,R[13],E,E,2,[[],[R[15]]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,"from",E,E,3,[[[T]],[T]]],[11,R[50],E,E,3,[[],["i"]]],[11,"into",E,E,3,[[],[U]]],[11,R[12],E,E,3,[[[U]],[R[15]]]],[11,R[13],E,E,3,[[],[R[15]]]],[11,R[14],E,E,3,[[["self"]],[T]]],[11,R[17],E,E,3,[[["self"]],[T]]],[11,R[16],E,E,3,[[["self"]],[R[18]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[50],E,E,1,[[],["i"]]],[11,"into",E,E,1,[[],[U]]],[11,R[12],E,E,1,[[[U]],[R[15]]]],[11,R[13],E,E,1,[[],[R[15]]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,"next",E,E,2,[[["self"]],[[R[3],["box"]],["box"]]]],[11,R[51],E,E,2,[[["self"]]]],[11,"next",E,E,3,[[["self"]],[[R[3],["box"]],["box"]]]],[11,R[51],E,E,3,[[["self"]]]],[11,R[23],E,E,0,[[],[R[52]]]],[11,R[23],E,E,1,[[],[R[53]]]],[11,R[50],E,E,0,[[],["intoiter"]]],[11,R[50],E,E,1,[[],["cachedintoiter"]]],[11,"drop",E,E,0,[[["self"]]]],[11,"fmt",E,E,0,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,1,[[["self"],[R[36]]],[R[15]]]]],"p":[[3,R[54]],[3,R[55]],[3,"IterMut"],[3,R[56]]]};
searchIndex["ucd_util"]={"doc":"The `ucd-util` crate contains a smattering of utility…","i":[[5,"hangul_name","ucd_util","Return the character name of the given precomposed Hangul…",N,[[["u32"]],[[R[3],[R[2]]],[R[2]]]]],[5,"hangul_full_canonical_decomposition",E,"Return the full canonical decomposition of the given…",N,[[["u32"]],[R[3]]]],[5,"ideograph_name",E,"Return the character name of the given ideograph codepoint.",N,[[["u32"]],[[R[3],[R[2]]],[R[2]]]]],[5,"character_name_normalize",E,"Normalize the given character name in place according to…",N,[[[R[2]]]]],[5,"symbolic_name_normalize",E,"Normalize the given symbolic name in place according to…",N,[[[R[2]]]]],[5,"canonical_property_name",E,"Find the canonical property name for the given normalized…",N,[[["propertytable"],["str"]],[[R[3],["str"]],["str"]]]],[5,"property_values",E,"Find the set of possible property values for a given…",N,[[["propertyvaluetable"],["str"]],[[R[3],[R[4]]],[R[4]]]]],[5,"canonical_property_value",E,"Find the canonical property value for the given normalized…",N,[[["str"],[R[4]]],[[R[3],["str"]],["str"]]]],[6,"PropertyTable",E,"The type of a property name table.",N,N],[6,"PropertyValueTable",E,"Type of a property value table.",N,N],[6,"PropertyValues",E,"A mapping of property values for a specific property.",N,N],[17,"RANGE_HANGUL_SYLLABLE",E,"A set of ranges that corresponds to the set of all Hangul…",N,N],[17,"RANGE_IDEOGRAPH",E,"A set of ranges that corresponds to the set of all…",N,N]],"p":[]};
searchIndex["utf8_ranges"]={"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar…","i":[[3,R[37],"utf8_ranges","A single inclusive range of UTF-8 bytes.",N,N],[12,"start",E,"Start of byte range (inclusive).",0,N],[12,"end",E,"End of byte range (inclusive).",0,N],[3,R[39],E,"An iterator over ranges of matching UTF-8 byte sequences.",N,N],[4,R[38],E,"Utf8Sequence represents a sequence of byte ranges.",N,N],[13,"One",E,"One byte range.",1,N],[13,"Two",E,"Two successive byte ranges.",1,N],[13,"Three",E,"Three successive byte ranges.",1,N],[13,"Four",E,"Four successive byte ranges.",1,N],[11,"as_slice",E,"Returns the underlying sequence of byte ranges as a slice.",1,[[["self"]]]],[11,"len",E,"Returns the number of byte ranges in this sequence.",1,[[["self"]],["usize"]]],[11,R[501],E,"Returns true if and only if a prefix of `bytes` matches…",1,[[["self"]],["bool"]]],[11,R[501],E,"Returns true if and only if the given byte is in this range.",0,[[["self"],["u8"]],["bool"]]],[11,"new",E,"Create a new iterator over UTF-8 byte ranges for the…",2,[[["char"]],["self"]]],[11,"from",E,E,0,[[[T]],[T]]],[11,R[32],E,E,0,[[["self"]],[T]]],[11,R[33],E,E,0,[[[T],["self"]]]],[11,"into",E,E,0,[[],[U]]],[11,R[12],E,E,0,[[[U]],[R[15]]]],[11,R[13],E,E,0,[[],[R[15]]]],[11,R[14],E,E,0,[[["self"]],[T]]],[11,R[17],E,E,0,[[["self"]],[T]]],[11,R[16],E,E,0,[[["self"]],[R[18]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[50],E,E,2,[[],["i"]]],[11,"into",E,E,2,[[],[U]]],[11,R[12],E,E,2,[[[U]],[R[15]]]],[11,R[13],E,E,2,[[],[R[15]]]],[11,R[14],E,E,2,[[["self"]],[T]]],[11,R[17],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"]],[R[18]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[32],E,E,1,[[["self"]],[T]]],[11,R[33],E,E,1,[[[T],["self"]]]],[11,"into",E,E,1,[[],[U]]],[11,R[12],E,E,1,[[[U]],[R[15]]]],[11,R[13],E,E,1,[[],[R[15]]]],[11,R[14],E,E,1,[[["self"]],[T]]],[11,R[17],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"]],[R[18]]]],[11,"next",E,E,2,[[["self"]],[R[3]]]],[11,"eq",E,E,1,[[["self"],[R[34]]],["bool"]]],[11,"ne",E,E,1,[[["self"],[R[34]]],["bool"]]],[11,"eq",E,E,0,[[[R[35]],["self"]],["bool"]]],[11,"ne",E,E,0,[[[R[35]],["self"]],["bool"]]],[11,"clone",E,E,1,[[["self"]],[R[34]]]],[11,"clone",E,E,0,[[["self"]],[R[35]]]],[11,"fmt",E,E,1,[[["self"],[R[36]]],[R[15]]]],[11,"fmt",E,E,0,[[["self"],[R[36]]],[R[15]]]]],"p":[[3,R[37]],[4,R[38]],[3,R[39]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);